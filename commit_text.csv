Commit message,Class
extract method.,extract
Minor tweaks following review extraction of methods plus throwing upon unexpected data when mapping genres.,extract
extract some stuff to a method[git p4: depot paths   //coremedia/jangaroo/ : change   155813],extract
extract some methods in DoiServiceImpl,extract
refactoring getMenuSpace in Navigation: extract isEmptyMainMenu querymethod,extract
extract method resolveTemplatePath,extract
refactorings extract methods for moveTreeDocAfter,extract
extracted method setRightsOnUserDoc,extract
extract method getMetaTags,extract
Extract setup of default HttpParams into public static methodgit svn id: https://svn.apache.org/repos/asf/httpcomponents/httpclient/trunk@1045232 13f79535 47bb 0310 9956 ffa450edef68,extract
HTTPCLIENT 1032: Refactor to clean up duplicated code in cacheentry validation (regular and variant reuse negotation) byextracting code to shared method.git svn id: https://svn.apache.org/repos/asf/httpcomponents/httpclient/trunk@1045357 13f79535 47bb 0310 9956 ffa450edef68,extract
HTTPCLIENT 1032: Refactor to clean up duplicated code in cacheentry validation (regular and variant reuse negotation) byextracting code to shared method.git svn id: https://svn.apache.org/repos/asf/httpcomponents/httpclient/trunk@1045357 13f79535 47bb 0310 9956 ffa450edef68,extract
HTTPCLIENT 975: refactoring primary execute method in CachingHttpClient (mostly method extraction).git svn id: https://svn.apache.org/repos/asf/httpcomponents/httpclient/trunk@1050878 13f79535 47bb 0310 9956 ffa450edef68,extract
HTTPCLIENT 975: more refactoring/method extractiongit svn id: https://svn.apache.org/repos/asf/httpcomponents/httpclient/trunk@1051076 13f79535 47bb 0310 9956 ffa450edef68,extract
HTTPCLIENT 975: more method extraction; the body forCachingHttpClient execute now at least fits on one screen. :)git svn id: https://svn.apache.org/repos/asf/httpcomponents/httpclient/trunk@1051133 13f79535 47bb 0310 9956 ffa450edef68,extract
Extract setup for materializePull out the setup method for doing a materialize on a PCollectionre using it for in memory mapside joins.,extract
Extract method,extract
o Extracted a few methods to make method fit in 5 printed pages ;)No functional changesgit svn id: https://svn.apache.org/repos/asf/maven/surefire/trunk@1036640 13f79535 47bb 0310 9956 ffa450edef68,extract
o Reduced duplication in mojos extracted nice methodsPatch by Stefan Birkner submitted via github. Reformatted to IntelliJ maven template by me otherwiseunchangedgit svn id: https://svn.apache.org/repos/asf/maven/surefire/trunk@1099576 13f79535 47bb 0310 9956 ffa450edef68,extract
o Extracted a well named method removed a commentgit svn id: https://svn.apache.org/repos/asf/maven/surefire/trunk@1225473 13f79535 47bb 0310 9956 ffa450edef68,extract
o Extracted a few methods,extract
Refactor createOrUpdate method in MongoChannelStore to extract methods and make code more readable,extract
JCBC 58: Refactoring HttpFuture and ViewFutureThis changeset refactors the get() method for both theHttpFuture and the ViewFuture to extract a common codepathinside and reduce duplication.Change Id: I719dad0636cf3f2b0419335fbbe477033c335392Reviewed on: http://review.couchbase.org/22353Reviewed by: Michael Wiederhold <mike@couchbase.com>Tested by: Michael Nitschinger <michael.nitschinger@couchbase.com>,extract
Extract method,extract
Extract generic octal formatting method to simplify code and eliminate array copiesChange leading padding to zeroes as that is more compatible (and required for Posix)git svn id: https://svn.apache.org/repos/asf/commons/proper/compress/trunk@760737 13f79535 47bb 0310 9956 ffa450edef68,extract
a few  extract method  refactorings to make code more readable still won t win a beauty contestgit svn id: https://svn.apache.org/repos/asf/commons/proper/compress/trunk@1156621 13f79535 47bb 0310 9956 ffa450edef68,extract
Cut overall object instantiation in half by changing fileheader generation algorithm for a 10 15 percent performanceimprovement when archive contains lots of small files.Also extracted two private methods createLocalFileHeaderand createCentralFileHeader in ZipArchiveOutputStream.These may have some interesting additional usages in the near future.This is basically a tactical refactoring ; scatter/gather had awonderful performance in the scatter algorithm but spentan *equal* amount of time in the gather phasegit svn id: https://svn.apache.org/repos/asf/commons/proper/compress/trunk@1647787 13f79535 47bb 0310 9956 ffa450edef68,extract
Extract out the method that runs an arbitrary file of SQL statements so I can use it to create an actual upgrade path wiuth migration like things.git svn id: svn://svn.jbidwatcher.com/jbidwatcher/trunk@341 b1acfa68 eb39 11db b167 a3a8cd6b847e,extract
Clean up some overly complex code by extracting usefully named methods. parse is still super complex.,extract
Extract out a method to localize responsibilities.,extract
extracted updateRepository() method to avoid copy/pastegit svn id: https://svn.apache.org/repos/asf/maven/archetype/trunk@986982 13f79535 47bb 0310 9956 ffa450edef68,extract
Extract methods no PngPdfTransformerHelper E iniciando uma fluent interfacezinha para geracao de modulos,extract
avoid code duplication: extract a method,extract
avoid code duplication: extract a method,extract
Extract error handling in a method,extract
extracted method buildQueryURI() so that future QueryExecutor implementations can get the URI object and eventually change it before turning it into a String,extract
extract configureHttpParams() method so we can override it in the application,extract
* ContentExtractorTestBase.javacreateRecorder(String String) new method for creating test Recorder and specifying charsetcreateRecorder(String) deprecate (use default charset as before),extract
Tighten up javascript extraction based on real world analysis (addresses HER 1523)* UriUtils.javanew method isVeryLikelyUri() with tighter heuristic than isLikelyUri()* ExtractorJS.javause UriUtils.isVeryLikelyUri() and change order of operations to do fixup before call to isVeryLikelyUri() since it doesn t expect strings with javascript escaping and stuff* StringExtractorTestBase.javahandle test data with expected value null meaning no outlinks expected* ExtractorHTMLTest.javaavoid redundancy by using the extractor created in ContentExtractorTestBase.setUp()* ExtractorJSTest.javasome new tests,extract
Simplify JnlpProtocolHandlerTest.Some of this is similar to the simplifications for NetworkLayerTest in e9c1af14. This test has also been hitting sporadic hangs / failures primarily on certain OSes etc. These mostly occur in preClose0() also. Similar to that test part of the solution here is to eliminate the repetition of the exact same test.As part of understanding and cleaning up this test I also made a major effort to remove other duplication. And to improve naming and clarity. The individual test methods were lengthy with lots of duplicated code making it hard to understand what they were doing. Indeed some of the tests didn t actually match their name / intention. I extracted out the commonality and tried to make it clearer the variation in each test.This test had continued testing all old versions of the JNLP protocol. There had been TODOs marked to remove them from this test. They ve been deprecated for a long time. Their implementations aren t quite behaving properly particularly when it comes to closing them down which causes contamination with testing the currently supported protocols. With Oracle deprecating JNLP entirely it s time to remove these protocols from this test.,extract
extract method and clean up code,extract
[refactor]: extract write and send method,extract
[refactor]: extract writeNumberArray method,extract
[refactor]: extract method objToJsonObject and objToJsonArray,extract
[refactor]: extract create parser method,extract
[refactor]: extract unwrap method,extract
[refactor]: extract common method,extract
HV 363 extracted two methods,extract
Minor refactoring.Shortened method in NewFolderWindow by extracting button creation code.Prevented null pointer when no mode is specified by defaulting to Mode.NORMAL.,extract
refactor the Main run. Extract a few methods out,extract
IsmAvatar Commit 1.6.0.1.2 (Alpha)Updated CustomFileFilter to handle files without extensions>Does not use a for loopFixed IndexButtonGroup.setValue for non cumulative values>Changed from MapTable to array (stable but non variable size)Updated SoundFrame>Load and Save buttons now load/save sound data (untested)>Layout GUI etc (merged filename label and value)>>addGap method added maybe extract to ResourceFrame?>Appended space to messages.properties SoundFrame.FILE valueUpdated LGM to display the working filename>Updated Listener>>Removed some Listener debugger code for JFileChooser (default folder)>Added Quadduc to credits in LGM>Upgraded MarkO from a hole to jerk : )git svn id: https://lateralgm.svn.sourceforge.net/svnroot/lateralgm@43 8f422083 7f27 0410 bc82 93e204be8cd2,extract
ResourceMenu opens at mouse position now* Components correctly sized now* Still a work in progressGmObjectFrame Parent and Mask now use ResourceMenu* Fixed up sizing a little* Still a work in progressListener actionPerformed shortened a little by making stringToRes method* Consider extracting to another class* actionPerformed needs further shorteninggit svn id: https://lateralgm.svn.sourceforge.net/svnroot/lateralgm@96 8f422083 7f27 0410 bc82 93e204be8cd2,extract
Coded most of the Popup Menu for ResNode (in Listener)* Extracted some methods for Listener.actionPerformed delegation* Will need revision on Mouse handling and add/insertResource methods* copyResource still needs to be coded.Corrected some credits in READMEAdded Javadocs to ResNode.status and ResNode.kind* I get them confused a lot even though I coined the termsTemporary Tile painting in RoomEditor now uses transparency and Caching* Will need to be replaced with a TileComponent.git svn id: https://lateralgm.svn.sourceforge.net/svnroot/lateralgm@172 8f422083 7f27 0410 bc82 93e204be8cd2,extract
Implemented Shift and Lock and cleaned up from last 2 commitsRemoved commented updateInstance code* Refer to r221 or r222 if neededExtracted different mouse parts to methodsRemoved extra repaint() call in mouseEditRemoved WIP text from Object tabDowngraded cursorInstance to InstanceComponent cursorICSwapped ID and Object in RoomFrame Status bar* Opposite of GM but more logical this wayRemoved EDIT_MODE editInstancesObject editInstancesDeleteUnderlying* Too hard to keep up to date just used swing directlyAdded Fixme tag for Object Tab (I ll probably take this up)git svn id: https://lateralgm.svn.sourceforge.net/svnroot/lateralgm@223 8f422083 7f27 0410 bc82 93e204be8cd2,extract
Fixed readSettings method length to be within Checkstyle limits* Extracted a readSettingsIncludes methodgit svn id: https://lateralgm.svn.sourceforge.net/svnroot/lateralgm/LateralGM/branches/versioning@411 8f422083 7f27 0410 bc82 93e204be8cd2,extract
Extracted file handling methods from Listener to new FileChooser class. Modularized readers. Added support for plugging in FileView modules. Next revision will modularize the writers so translators might wish to wait until then to update strings.git svn id: https://lateralgm.svn.sourceforge.net/svnroot/lateralgm/LateralGM/trunk@525 8f422083 7f27 0410 bc82 93e204be8cd2,extract
extracted jump method useful to force jump on PlatformerEntity (forexample as response on collision with enemy),extract
Extract the writeObject method from writeExtras,extract
fixed 87 support for truststore with multi pems.Extracted a method to read certificates bag use it inDirectoryTrustAnchorStore.,extract
Extract adding the move function to a private method,extract
extract static assertXyz methods for null safe and unknown type safe checks,extract
Removed duplicate code by extracting a method for the parsing of the event line ( E ... ).,extract
Refactoring to extract method so that it is easier to subclass theTopLevelTransaction and disable the persistence of data.,extract
Refactor: Extracted parts from generateRoleSlotMethodsMultStar() to allow subclasses of code generator to wrap the multiple generated methods without replicating most of the code in the original code generator super class method. Also generate any interfaces declared in the dml files to the base classes.,extract
[bplustree] Extracted InnerNode s constructors to init methods* This allows the constructor s code to be reused in subclasses* Also extracted LastKey representation to its toString(),extract
Extract Kahn s algorithm from compute method,extract
extracted some internal methods in TimelineValue class with some tests,extract
Extract the ConnectionListener creation in a separate method in Pool,extract
Fixed A87 Reduced the resulting index size based on not storing the filename and dfilename (for displaying only).Now we just index the lowercase variant and store the original one. That has been done for filename and for path as well. Removed the dpath and the dfilename fields. Did some little refactoring (extracting some methods) toget an better overview and less long methods.git svn id: http://svn.serverix/supose/trunk@421 2a5690f4 4b40 0410 ba62 85a317ce182b,extract
1012 extract common builder for the StreamMappingMethods and IterableMappingMethod,extract
Polish after PR merge* Extract common TypeMirror extraction into a separate method* Remove not needed code from tests,extract
Extracted two methods from handleState() to reduce the method size.,extract
Extract the readBinding method so that it can be publicly reusedFixes 152,extract
Clean up code extract method.,extract
Extract method: waitForExit()git svn id: https://scm.ops4j.org/repos/ops4j/projects/pax/runner@14226 9b982a3c 3ae5 0310 a4bc d9a3335569bd,extract
extracted methods.,extract
Extract OIDC UserInfo and Token request construction into extensible methods,extract
refactor TestIndirectBasicAuthClientThere were several tests that had very similar structure and code.Extract helper methods to make the intent of the code more clear andavoid repetition.,extract
extracted method per pull request comment,extract
CAS 173: Port changes from CAS 157 to the PAC4J project SAML2ClientConfiguration has been made non final to allow forsub classes. A new init() method has been introduced. It does nothing inSAML2ClientConfiguration but can be overridden in sub classes.SAML2Client now calls the new init() method on its configuration.A piece of code in Clients has been extracted into a separate method. Itallows for reuse in sub classes of Clients.,extract
Support for European e identification (merging with master) ( 1128)* Only bootstrapping signature signing configuration if none defined* Support for configuring ProviderName and AuthnRequest extensions* guarding against null pointer exception when AuthContext is defined but AuthnContextClassRef is not (it is not mandatory)* Adding support for setting a SAML attribute as the principal Id* extracting code block to reduce internalInit() method size,extract
[NGRINDER 567] Simplify the impl (delete unncessary code and extractmethods),extract
Extract methods,extract
Extract helper methods to separate classes.Refactored towards Composed Method.,extract
Extract common g gap assertion code into something more readable for processor.with methods,extract
Extract if clauses into methods and add Javadoc commentsThe extracted methods more clearly describe why we useEquinox ExtendedLogService it provide named Loggerswhich log messages with class based granularity(instead of bundle based like with standard OSGI LogService)Additionally the ExtendedLogService is included and used by defaultin Eclipse since 3.7 version:https://bugs.eclipse.org/bugs/show_bug.cgi?id 292135,extract
Advance method extracted from run method,extract
BalajiN | 158 | Refactoring TreatmentCardService. Extracting out methods,extract
extracted method,extract
extracted method to find next downstream traffic light,extract
extracted a method to parse the comment contents,extract
Extract some methods from AbstractPipe path.Needed this to override getPathToHere in Pacer plus it cleans up the method a bit I think.,extract
Extracted method that determines the metrics value.,extract
Extract some logic to methods in DefaultComparator to improve readability,extract
Slightly untested extraction of method to compute effective tweet lengths,extract
Refactored to extract writePotToFile and writePoToFile methods,extract
Extracted interpolation method,extract
Extract method,extract
Extract abstract method JavacSingularizer.generateClearStatements,extract
Extract method finishAndInjectMethod,extract
Rearranged some file related methods* Extracted little endian methods from GmStreamEncoder to StreamEncoder* I chose not to do this for GSDecoder due to the obfuscation table* Maybe once we add more GM7 support we ll revise this model* GSE now extends SE and holds some Resource specific methods* Moved some lower level methods from GmFileWriter to GSE* Likewise for GmFileReader and GSDecoder* Improved read4 and readD to use byte arrays rather than individual reads.git svn id: https://lateralgm.svn.sourceforge.net/svnroot/lateralgm@358 8f422083 7f27 0410 bc82 93e204be8cd2,extract
[HER 741] Make extractors interrogate for charset* ReplayCharSequence GenericReplayCharSequenceuse Charset instance rather than String name* Recorderuse Charset instance ratehr than String name(getContentReplayCharSequence) avoid reusing cached ReplayCharSequence when encoding in use has changed since it was created(getContentReplayPrefixString) allow requested specific charset interpretation* ExtractorHTML ExtractorXMLwork with Charset instancesdouble check that in content declarations are self consistent before usingrecycle matcher instanceschange minor charset problems/decisions to a crawl.log annotation,extract
[HER 741] Make extractors interrogate for charset* FetchHTTPuse Charset instances rather than String names,extract
* ExtractorMultipleRegex.javarefactor for readability,extract
* ExtractorJS.javarefactor so considerStrings() is not static allowing it to be overridden in subclasses* ExtractorHTML.java ExtractorJS.javaadd @Autowired parameter extractorJS used to process inline javascript instead of call to static ExtractorJS.considerStrings(),extract
only extract urls that look like youtube watch pages,extract
implement itagPriority and extractLimit parameters,extract
extract settings object,extract
extract class,extract
and more code extracts,extract
extract base class + move test classes,extract
JNI libs are now extracted to the .wsn device drivers folder in the user home.  4,extract
Extract HTTPServletRequest usage to createURLData to reduce the scope ofmutability and to allow future cache of URLDatas,extract
autocomletion started. + start to extract new class GlobalEnvironment,extract
extracted all wsdl/soap functionality into an external library(generic soap client). Needs it now for compilation.,extract
Simplified MOH731 builder code by using EmrReportingUtils.addRow to add columns based on dimensions and also extracted PwP indicators into PwpIndicatorLibrary,extract
Begun working on extracting JsonPath,extract
It s now possible to map to java objects when extracting from a list in JsonPath,extract
[refactor]: extract authorization service interace,extract
HV 1166 Handling value unwrapping via ValueExtractor;* Replacing value handlers for JavaFX and Optional with ValueExtractor implementations* Not supporting implicit unwrapping for the time being,extract
HV 1339 Add support for non parameterized type in value extraction,extract
HV 1356 Enable CDI for value extractors added via the ServiceLoader,extract
HV 1381 Fix value extraction resolution logic for forced and implicitunwrapping,extract
Extracted StatusUpdateService from TimelineService,extract
Mongo mapReduce: handle collection name extraction from the getCollection function,extract
Coded MDI functionality and lots of other GUI code.GMLTextArea* Leading spaces are converted to tabs* Tab width is set on initialisation* Added getTextCompat() to convert newlines and tabs back for resave* See Prefs.tabWidth* See Util.convertIndents(String)GmMenu* Extracted from GmMenuBar to allow subclassingGmMenuBar* Added Window menuGmTreeGraphics* Background nodes are now shown correctly in the treeMDIManager* Implemented resizeDesktop()MDIMenu* The Window menu it updates when frames are added and removed and offers some common commands* Subclasses GmMenuMDIPane* Modified to call resizeDesktop() in certain cases* Added functions to close all etc.VTextIcon* Fixed a generics warningLGM* mdi is now an instance of MDIPane* Modified createTree to add a JToggleButton for the EventFrame* Reordered some GUI initialisation code to work with the extra toolbar button* Overloaded makeButton for other kinds of AbstractButtonResource* Modified the arguments to copy there are now two versions* Modified subclasses to use the new arguments.ResourceFrame* Added javadoc comments to some fields to clarify their purpose* Modified resourceChanged in all subclasses to compare against resOriginalScriptFrame* Modified to use GMLTextArea.getTextCompat()EventFrame* Added support for the toggle buttoncheckstyle.xml* TODO comments are now ignored Eclipse already has better functionality for thatAbstractBitmap* Removed a FIXME commentgit svn id: https://lateralgm.svn.sourceforge.net/svnroot/lateralgm@113 8f422083 7f27 0410 bc82 93e204be8cd2,extract
Coded MDI functionality and lots of other GUI code.GMLTextArea* Leading spaces are converted to tabs* Tab width is set on initialisation* Added getTextCompat() to convert newlines and tabs back for resave* See Prefs.tabWidth* See Util.convertIndents(String)GmMenu* Extracted from GmMenuBar to allow subclassingGmMenuBar* Added Window menuGmTreeGraphics* Background nodes are now shown correctly in the treeMDIManager* Implemented resizeDesktop()MDIMenu* The Window menu it updates when frames are added and removed and offers some common commands* Subclasses GmMenuMDIPane* Modified to call resizeDesktop() in certain cases* Added functions to close all etc.VTextIcon* Fixed a generics warningLGM* mdi is now an instance of MDIPane* Modified createTree to add a JToggleButton for the EventFrame* Reordered some GUI initialisation code to work with the extra toolbar button* Overloaded makeButton for other kinds of AbstractButtonResource* Modified the arguments to copy there are now two versions* Modified subclasses to use the new arguments.ResourceFrame* Added javadoc comments to some fields to clarify their purpose* Modified resourceChanged in all subclasses to compare against resOriginalScriptFrame* Modified to use GMLTextArea.getTextCompat()EventFrame* Added support for the toggle buttoncheckstyle.xml* TODO comments are now ignored Eclipse already has better functionality for thatAbstractBitmap* Removed a FIXME commentgit svn id: https://lateralgm.svn.sourceforge.net/svnroot/lateralgm@113 8f422083 7f27 0410 bc82 93e204be8cd2,extract
Coded MDI functionality and lots of other GUI code.GMLTextArea* Leading spaces are converted to tabs* Tab width is set on initialisation* Added getTextCompat() to convert newlines and tabs back for resave* See Prefs.tabWidth* See Util.convertIndents(String)GmMenu* Extracted from GmMenuBar to allow subclassingGmMenuBar* Added Window menuGmTreeGraphics* Background nodes are now shown correctly in the treeMDIManager* Implemented resizeDesktop()MDIMenu* The Window menu it updates when frames are added and removed and offers some common commands* Subclasses GmMenuMDIPane* Modified to call resizeDesktop() in certain cases* Added functions to close all etc.VTextIcon* Fixed a generics warningLGM* mdi is now an instance of MDIPane* Modified createTree to add a JToggleButton for the EventFrame* Reordered some GUI initialisation code to work with the extra toolbar button* Overloaded makeButton for other kinds of AbstractButtonResource* Modified the arguments to copy there are now two versions* Modified subclasses to use the new arguments.ResourceFrame* Added javadoc comments to some fields to clarify their purpose* Modified resourceChanged in all subclasses to compare against resOriginalScriptFrame* Modified to use GMLTextArea.getTextCompat()EventFrame* Added support for the toggle buttoncheckstyle.xml* TODO comments are now ignored Eclipse already has better functionality for thatAbstractBitmap* Removed a FIXME commentgit svn id: https://lateralgm.svn.sourceforge.net/svnroot/lateralgm@113 8f422083 7f27 0410 bc82 93e204be8cd2,extract
Coded MDI functionality and lots of other GUI code.GMLTextArea* Leading spaces are converted to tabs* Tab width is set on initialisation* Added getTextCompat() to convert newlines and tabs back for resave* See Prefs.tabWidth* See Util.convertIndents(String)GmMenu* Extracted from GmMenuBar to allow subclassingGmMenuBar* Added Window menuGmTreeGraphics* Background nodes are now shown correctly in the treeMDIManager* Implemented resizeDesktop()MDIMenu* The Window menu it updates when frames are added and removed and offers some common commands* Subclasses GmMenuMDIPane* Modified to call resizeDesktop() in certain cases* Added functions to close all etc.VTextIcon* Fixed a generics warningLGM* mdi is now an instance of MDIPane* Modified createTree to add a JToggleButton for the EventFrame* Reordered some GUI initialisation code to work with the extra toolbar button* Overloaded makeButton for other kinds of AbstractButtonResource* Modified the arguments to copy there are now two versions* Modified subclasses to use the new arguments.ResourceFrame* Added javadoc comments to some fields to clarify their purpose* Modified resourceChanged in all subclasses to compare against resOriginalScriptFrame* Modified to use GMLTextArea.getTextCompat()EventFrame* Added support for the toggle buttoncheckstyle.xml* TODO comments are now ignored Eclipse already has better functionality for thatAbstractBitmap* Removed a FIXME commentgit svn id: https://lateralgm.svn.sourceforge.net/svnroot/lateralgm@113 8f422083 7f27 0410 bc82 93e204be8cd2,extract
Coded MDI functionality and lots of other GUI code.GMLTextArea* Leading spaces are converted to tabs* Tab width is set on initialisation* Added getTextCompat() to convert newlines and tabs back for resave* See Prefs.tabWidth* See Util.convertIndents(String)GmMenu* Extracted from GmMenuBar to allow subclassingGmMenuBar* Added Window menuGmTreeGraphics* Background nodes are now shown correctly in the treeMDIManager* Implemented resizeDesktop()MDIMenu* The Window menu it updates when frames are added and removed and offers some common commands* Subclasses GmMenuMDIPane* Modified to call resizeDesktop() in certain cases* Added functions to close all etc.VTextIcon* Fixed a generics warningLGM* mdi is now an instance of MDIPane* Modified createTree to add a JToggleButton for the EventFrame* Reordered some GUI initialisation code to work with the extra toolbar button* Overloaded makeButton for other kinds of AbstractButtonResource* Modified the arguments to copy there are now two versions* Modified subclasses to use the new arguments.ResourceFrame* Added javadoc comments to some fields to clarify their purpose* Modified resourceChanged in all subclasses to compare against resOriginalScriptFrame* Modified to use GMLTextArea.getTextCompat()EventFrame* Added support for the toggle buttoncheckstyle.xml* TODO comments are now ignored Eclipse already has better functionality for thatAbstractBitmap* Removed a FIXME commentgit svn id: https://lateralgm.svn.sourceforge.net/svnroot/lateralgm@113 8f422083 7f27 0410 bc82 93e204be8cd2,extract
Fixed layout in `GmObjectFrame` and `TimelineFrame` using `GroupLayout` manager and extracted ActionList and related code to separate classes (see also r229 and r230).git svn id: https://lateralgm.svn.sourceforge.net/svnroot/lateralgm@231 8f422083 7f27 0410 bc82 93e204be8cd2,extract
Fixed layout in `GmObjectFrame` and `TimelineFrame` using `GroupLayout` manager and extracted ActionList and related code to separate classes (see also r229 and r230).git svn id: https://lateralgm.svn.sourceforge.net/svnroot/lateralgm@231 8f422083 7f27 0410 bc82 93e204be8cd2,extract
small refactoring (extracting scope handling),extract
many refactorings* always use dyn:getProp for scope resolution* extracted hasOwnProperty helper* removing all the dynjs:scope proprietary calls,extract
many refactorings* always use dyn:getProp for scope resolution* extracted hasOwnProperty helper* removing all the dynjs:scope proprietary calls,extract
extracting class naming generator,extract
extracting GetValue,extract
Extracted fileChecker,extract
Finally added the ability to project new documents into the LSA/LSI documentspace. Lots and lots of other minor fixes and adjustments to make this workand/or debuggable.modified: src/main/java/edu/ucla/sspace/basis/BasisMapping.java Fixed javadoc typomodified: src/main/java/edu/ucla/sspace/common/GenericTermDocumentVectorSpace.java Sped up the token counting with a Counter classmodified: src/main/java/edu/ucla/sspace/common/Similarity.java Added a new version of Spearman s rho that accounts for ties as reported inthe Nonparametric Statistics handbook. However this new version doesn t seemto agree with existing results despite matching the examples in the book...modified: src/main/java/edu/ucla/sspace/common/Statistics.java Added support for getting the mode of a sequencemodified: src/main/java/edu/ucla/sspace/graph/AbstractGraph.java Added support for pre allocating the number of vertices and edges in a graphto avoid having to rehash large graphsmodified: src/main/java/edu/ucla/sspace/graph/ChineseWhispersClustering.java Fixed some bugs (probably?) Pushed primitive shuffle to PrimitiveCollectionsnew file: src/main/java/edu/ucla/sspace/graph/CompactSparseTypedEdgeSet.java Alternate implementation of edge sets that is vertex pivoted instead oftype pivoted. Not sure how to expose this as a configurable paramater yet.modified: src/main/java/edu/ucla/sspace/graph/SparseTypedEdgeSet.java Reworked to be type pivotedmodified: src/main/java/edu/ucla/sspace/graph/SparseUndirectedEdgeSet.java Added support for preallocating space for new edgesmodified: src/main/java/edu/ucla/sspace/graph/SparseUndirectedGraph.java Added support for preallocating space based on the expected size of the graphnew file: src/main/java/edu/ucla/sspace/graph/io/PajekWriter.java Added minimal support for writing in Pajek formatmodified: src/main/java/edu/ucla/sspace/lsa/LatentSemanticAnalysis.java Lots of fun to tweaks to support new document projection Tightened the class constructor to only allow SVD dimensionality reductions since this is LSA proper.modified: src/main/java/edu/ucla/sspace/mains/LSAMain.java Reworked to use the new SingularValueDecomposition interfacemodified: src/main/java/edu/ucla/sspace/mains/PLSAMain.java NOTE: this code is now broken :( We probably need to have a new middleabstract class between GenericTermDocumentSpace and LSA/PLSAmodified: src/main/java/edu/ucla/sspace/matrix/AbstractMatrix.java Added a useful toString() Fixed equals() which was broken but for still unexplained reasons.modified: src/main/java/edu/ucla/sspace/matrix/ArrayMatrix.javamodified: src/main/java/edu/ucla/sspace/matrix/DiagonalMatrix.javamodified: src/main/java/edu/ucla/sspace/matrix/GrowingSparseMatrix.javamodified: src/main/java/edu/ucla/sspace/matrix/RowMaskedMatrix.javamodified: src/main/java/edu/ucla/sspace/matrix/TransposedMatrix.java Now extends AbstractMatrixmodified: src/main/java/edu/ucla/sspace/matrix/BaseTransform.javamodified: src/main/java/edu/ucla/sspace/matrix/CorrelationTransform.javamodified: src/main/java/edu/ucla/sspace/matrix/GlobalTransform.javamodified: src/main/java/edu/ucla/sspace/matrix/LogEntropyTransform.javamodified: src/main/java/edu/ucla/sspace/matrix/LogLikelihoodTransform.javamodified: src/main/java/edu/ucla/sspace/matrix/PointWiseMutualInformationTransform.javamodified: src/main/java/edu/ucla/sspace/matrix/RowMagnitudeTransform.javamodified: src/main/java/edu/ucla/sspace/matrix/TfIdfDocStripedTransform.javamodified: src/main/java/edu/ucla/sspace/matrix/TfIdfTransform.javamodified: src/main/java/edu/ucla/sspace/matrix/Transform.java Now supports applying the transform to new documents (column vectors) thatweren t in the original datamodified: src/main/java/edu/ucla/sspace/matrix/NoTransform.java Now properly supports GlobalTransform so it can be used in LSAmodified: src/main/java/edu/ucla/sspace/matrix/Matrices.java Better error messagemodified: src/main/java/edu/ucla/sspace/matrix/SVD.java Updated to use the new SingularValueDecomposition interfacesmodified: src/main/java/edu/ucla/sspace/matrix/factorization/AbstractSvd.javanew file: src/main/java/edu/ucla/sspace/matrix/factorization/SingularValueDecomposition.javamodified: src/main/java/edu/ucla/sspace/matrix/factorization/SingularValueDecompositionLibC.javamodified: src/main/java/edu/ucla/sspace/matrix/factorization/SingularValueDecompositionLibJ.javamodified: src/main/java/edu/ucla/sspace/matrix/factorization/SingularValueDecompositionMatlab.javamodified: src/main/java/edu/ucla/sspace/matrix/factorization/SingularValueDecompositionOctave.java Added new interface for the SVD which supports returning the U S and Vdecomposed matrixes and not their premultiplied formmodified: src/main/java/edu/ucla/sspace/text/WordIterator.java Removed private protection on the current line so subclass could inspect itmodified: src/main/java/edu/ucla/sspace/tools/IterativeBigramExtractor.java Fixed typo in command line optionsmodified: src/main/java/edu/ucla/sspace/util/KrippendorffsAlpha.java Added support for computing alpha using the Interval level of measuremntmodified: src/main/java/edu/ucla/sspace/util/ObjectCounter.java Fixed bug in min()/max()new file: src/main/java/edu/ucla/sspace/util/Triple.java Yet another tuple objectnew file: src/main/java/edu/ucla/sspace/util/primitive/DoublePair.java Primimite pair to match IntPairmodified: src/main/java/edu/ucla/sspace/util/primitive/IntPair.java Fixed formattingmodified: src/main/java/edu/ucla/sspace/util/primitive/PrimitiveCollections.java Added the ability to shuffle an int[]modified: src/main/java/edu/ucla/sspace/vector/SparseHashDoubleVector.java Now extends AbstractDoubleVectormodified: src/main/java/edu/ucla/sspace/vector/SparseHashIntegerVector.java Fixed performance bug where the magnitude was not cachedmodified: src/test/java/edu/ucla/sspace/common/SimilarityTest.java Added more unit tests for Spearman s rhonew file: src/test/java/edu/ucla/sspace/graph/CompactSparseTypedEdgeSetTests.java New unit testsmodified: src/test/java/edu/ucla/sspace/graph/SparseTypedEdgeSetTests.java More unit testsnew file: src/test/java/edu/ucla/sspace/lsa/LatentSemanticAnalysisTest.java Tested project() based on worked example on websitemodified: src/test/java/edu/ucla/sspace/matrix/ArrayMatrixTests.java Added test for matrix equalitymodified: src/test/java/edu/ucla/sspace/matrix/FileTransformUtil.java Added test for new transform behaviormodified: src/test/java/edu/ucla/sspace/matrix/RowMaskedMatrixTest.java Added weird debug to try to figure out what was going with ArrayMatrix.equal()new file: src/test/java/edu/ucla/sspace/util/KrippendorffsAlphaTest.java Added unit tests for some of Alpha s possible computationsmodified: src/test/java/edu/ucla/sspace/util/ObjectCounterTest.java Verified min()/max()new file: src/test/java/edu/ucla/sspace/vector/AbstractDoubleVectorTest.java Added test for equals(),extract
Extracts duplicated error response creation,extract
Added test in functional tests for using a single stage group Now uses unique UUIDs as IDs to avoid tests interfering Extracted classes LinearPipelineBuilder and StageBuilder,extract
Refactor topological test sort to extract graph and results,extract
Rework a bit connection pools internals based on feedback: waiter aren t be added to the waiters list when there is no waiter extract the connection acquisition from checkPending() and use it in getConnection remove the all Set<Holder> and use the weight instead set a removed boolean on Holder to tolerate incorrect usage of ConnectionListener removed the validity check on the connection in favor of a pool eviction calling HttpConnection goAway(code) uses the last known stream instead of max int value,extract
Extracting system ClassLoader inits to PreClassLoaderInitiator plugins.  44,extract
Refactor ThreadLocalCleanUp and extract WarningThreadLocalCleanUp subclass.  44,extract
Extract different parts of the statements,extract
Extract step 5.4 to a new function to make it possible to unit test,extract
35 Extracting Mapping instantitation from visitor class,extract
Extracting loadClass to allow overriding,extract
Adding the LinkIndexUpdator which updates the LinkIndex (previously called LinkManager) in response to repository events. The RecordLinkExtractor now extracts links from link fields (still todo: blob fields).This still needs testcases but I stumbled upon some small but blocking issues with the repository.Secondary changes: adding queue mock package containing classes to fake queue operation (used by both indexer & linkmgmt tests) adding repo util for utility classes which are useful for multiple modules and are repository related (in contrast with the other util package which is not dependent on the lily repository)Also disabled the indexer in the root pom.xml so that the build runs.git svn id: svn+ssh://dev.outerthought.org/outerthought/lilyproject/projects/lily/trunk@3996 b80d95f8 e103 0410 bd55 e03a9dc29394,extract
import tool: allow inline field declarationsExtend the json import format to allow declaring field types embedded in record types. Thus it is no longer to require to declare field types up front in the fieldTypes section.An inline field type declaration is recognized by the prescence of the valueType attribute. Record type import now happens in two passes: first inline field type declarations are extracted (and checked for conflicts between record types) and imported and then the record types themselves are imported.,extract
Fixed up headersMoved some bits to internalReduced log codeExtracted ReplayPrefixOneCharInputStreamExtraced stty detailsExtracted shutdown hook details,extract
Extract Show and Hide view WaveTypes,extract
Extracted particle creation from initRandomParticles tocreateRandomParticles. Now force independent. Needed for clean prepare()call.,extract
Releasing core Ivory on github; extracted from private svn repo,extract
Revised code for bitext extraction. We now process each sentence separately to balance load among mappers equally. also other fixes her and there.,extract
bitext extraction code: changed word trans ratio calculation (do for each token in sentence instead of terms in vector) other minor changes/fixes,extract
updated docs untested changes to bitext extraction pipeline,extract
extracted validation exception refactored protected resource registration endpoint to use this format,extract
synthesis subtree extraction first pass,extract
major rule datatype overhaulI completely rewrote the internals of rule to make it easier to use withChris Dyer s dotted item extraction scheme. Also we should have someidea after profiling but I think that it should take up less space withthe rewrite. Also it s a hell of a lot easier to understand.Also changed the feature functions to reflect this since they look atrule internals. Also made a first attempt at writing the extractionlogic.,extract
reverse support in SAMT extraction,extract
extract time from recording reader without need for it to be a variable,extract
Continued refactoring (extracted PlotConfiguration interface),extract
Extract trigger conversion to separate class.,extract
text and metadata extraction,extract
Checkpoint: more work on the new Argument File index. File changes arenow tracked unprocessed regions are collected and some aspects of theIndex are implement (eg extracting a file from the containing root file),extract
Updates to support caching around extraction of sub files from rootfiles,extract
Fix PAXWICKET 400Refactored HttpTracker to a syncronized model based on the extractedServletDescriptor unified exceptionhandling and extractednormalizeMountpoint function from GenericContext and HttpTracker.,extract
Extract common code,extract
Merged and simplified attribute extraction from class definition,extract
Extract test tomcat setup to TomcatBuilder.,extract
Refactor ODT textStyling to extract a pluggable interface for Styles generation,extract
Abhishek Dev |  274  275 | moving audio File strings to seperate class; extracting out node construction to builder,extract
BalajiN |  0 | Refactoring IVR Module. Extracting out units,extract
extract code to additional function,extract
improve population extraction connection extraction draft refactor clean up,extract
remove unneeded classes some refactor improve population extraction add download for neuroml add domain type some more work on summary2,extract
Simplify extraction of proposals by including  isBasedOnInput  property of proposal sets as input for priority level,extract
Refactored and extracted open type converter in an own class.,extract
Add a J4pResponseExtractor for hooking into Java client deserialization.Fixes  173,extract
Refactor EdgeExtractor and also take inEdges in account,extract
Extracted CharSequenceBuffer interface from CharSequenceList. Allow TagProcessor to be passsed a custom CharSequenceBuffer when pushing a new buffer.,extract
extracting the AMF reader from the writer. Providing a jackson JSON provider.git svn id: https://svn.codehaus.org/enunciate/trunk/enunciate@623 c2b6a248 b21b 0410 9d80 82131e002806,extract
minor updates to extract spring cxf into their own plugingit svn id: https://svn.codehaus.org/enunciate/trunk/enunciate@747 c2b6a248 b21b 0410 9d80 82131e002806,extract
extracting handling logic for unknown provider/resources classes,extract
Removed some statistics that were only used in test code.Replaced them by simple visitors that only extractthe stored value from the raw data tree.Adapted the tests.,extract
Removed CCD testing extracted TransitiveParentCount testing and thus reduced the test to the addition and removal of ClassDescriptors.,extract
A few more test cases for extractCHildGoal,extract
Extract Sibling Goal tests in the client side to the rest services,extract
merge and extract of tasks in the task model,extract
refactor cluster manager code to extract common code,extract
Support for retention time calibration call of MprcExtractRaw.,extract
Task  38: Started to extract and improve interpolation of features fromModuleInterpolator,extract
More tests and extracted ProductGenerator from SiteProjectGenerator,extract
Fix extraction of parameter description from javadoc comments (should be based on parameter name not annotation value),extract
Refactoring extracted some common code.,extract
Extract minimizer interface and rewrite everything that used fmincghardcoded to the interface,extract
Generified extraction of current views filtered by type.,extract
Generified extraction of a view at a certain index.,extract
remove Compartment from Activity move executors for DI tools (dctool more to come) to new package andrestructure: extract base executor class move differences between NWversions into templates instead of classes...,extract
add optional parameter `source` to Get Table Cell Value KeywordWhen source is set to  model  text extractor won t try to get text from cell s component firsts and will get it directly from table model. When source is set to  auto  (default) old strategy is used i.e. extractor will first try to extract text from cell s component and then if this fails it will get it from table model.,extract
refactoring. extract tail builder classes and introduceAbstractTailDoubleArray class.,extract
merged nperrier s addition of extracting cover art from id3 tags when indexing collection (fixes  89),extract
Extracted parameter  directoryNameBase,extract
extract XSLT logic into something reusable,extract
ChildrenNumberComparator extracted from DomDifferenceEngine.,extract
Added support for file selectors to the UnArchiver. Thisallows to restrict the extracted files.PR: PLXCOMP 58,extract
Rework of the actual archive creation in order to avoid multiple iterations over or random access to the resource collection. (Performance gain for extracting tar archives.)PR: PLXCOMP 88,extract
Added support for extracting JSON objects and arrays from request bodies via helpers,extract
pinbit machinery extracted to separate class Transition.Executor now is a property and not a constructor parameter.,extract
refactored search result extraction code and added easy accessor for highlights in search hits resolves  63,extract
Extract  _version  field from JSON responseExtract the  _version  from Elasticsearch JSON response whenusing getSourceAsObject() / getSourceAsObjectList().Try to apply the value to a @JestVersion annotated field in thesource object.,extract
extract shared validation logic,extract
Extract out function for default homedir calculation,extract
SC QCADOO 394 early detection for hooks inconsistency; extracted view hooks class hierarchy to improve type safety; remove unnecessary ComponentCustomEvent class,extract
extract client id logic and test,extract
Extracted BucketLocker tests which verifies that it closes the lock.These tests had similar structure and setup whichis the reason why they were extracted.,extract
Extracted larger end to end test to a functional test,extract
Extracted ArchiveBucketEndpoint out of BucketArchiverRest.  12BucketArchiverRest is too large henceth extraction has begun.,extract
Created ListBucketsEndpoint and extracted creation logic.  12,extract
Refactored ListBucketsEndpoint to use the new class ListsBucketsFiltered.  12The endpoint now has much less logic since it uses the logic that wasextracted from BucketThawer.,extract
Extracted a very unecessary dependency on java.util.URI.  74.This is probably the bigest change everrefactored on the system. The URI classwas nested deep into the system for noreal reason. It was assumed that allbackends would have a URI scheme andthat we keep the URI at all times onall buckets. This was not the case andeverything from the Bucket model to thePathResolver had to be refactored.The change was made in the first placebecause glacier does not have a URIthat we can just call. Instead we wantto configure each backend with key valuesinstead of with URI s.This change to the system should alsomake it easier to transition intoa key value store since the abstractionfor transfering buckets is  give thisbucket this key and when I give youthe key again then give me back my bucket .,extract
Extracts the copying of a bucket from BucketArchiver so copying bucket feature can exist.  80The difference between the oldBucketArchiver and BucketCopier is that in addition to copying thelocal bucket to the archive thearchiver also deletes the localbucket on successful copy.,extract
Extracted calling search peers from ListBucketsEndpoint.  38,extract
Extracted calling search peers from ListBucketsEndpoint.  38,extract
Process both orderings DVD and airThis is in service of Issue  169.Let s look at a few episodes of the show  Robot Chicken . (I refer to season and episode number information like  S08E14  as a  placement .)Episode Title DVD Placement Aired Placement                                           Western Hay Batch S08E12 S08E11Triple Hot Dog S08E13 S08E12Joel Hurwitz Returns S08E14 S08E13Hopefully Salt (none) S08E14Yogurt in a Bag (none) S08E15So if a user has a file  Robot Chicken S08E14.mp4  and the renaming rule says we should add the episode title to the filename which title should we add?Our answer as of now is it should be the former simply because we have a blanket policy of  prefer DVD ordering .So if we  prefer  DVD ordering should we look only at DVD placement? No some shows simply don t have any DVD information. Not every show gets released on DVD.But beyond that many shows as the Robot Chicken example shows have released some episodes on DVD but not others.What if we see  Robot Chicken S08E15.mp4 ? We still prefer DVD ordering but there is no episode with S08E15 as its DVD placement. But there is one with S08E15 as its regular placement. So we use that one. We *prefer* an episode that matches the season and episode number in its DVD ordering but we will fall back on the over the air placement if no episode meets the criteria.We implement this by building an index. Previously the process was: we iterate over all known episodes if it has a DVD placement we try adding it to the index at that place if it doesn t have DVD placement we try using the over the air placementSo  Western Hay Batch  would be entered into the index using its DVD placement S08E12. Since  Yogurt in a Bag  doesn t have a DVD placement it would be entered at S08E15.We would try to add  Joel Hurwitz Returns  to the index at S08E14 it s DVD placement. As for  Hopefully Salt  we would try to add it to the index using its  aired  placement S08E14.So there s a conflict. The behavior as of the previous release was we d  panic  log a message about the two conflicting episodes and put *neither* of them into the index.Note that such a conflict only happens when two episodes have the same preferred placement which only happens if one of them has a DVD placement and the other one doesn t. It does NOT happen every time that the DVD placement disagrees with the over the air placement. For example  Western Hay Batch  and  Triple Hot Dog  both could be mapped to S08E12 but S08E12 is not the *preferred* placement for  Triple Hot Dog  so there was no conflict.This commit introduces a class  EpisodeOptions . Now a placement is mapped to an instance of EpisodeOptions rather than just to a single Episode.Now when we iterate over every episode in Show we always add BOTH placements to the index: DVD and over the air. We don t reserve  over the air  for a fallback any more. And we remember which placement is which because the EpisodeOptions class preserves this information.Then when we look up an Episode in a Season we say whether we prefer the DVD ordering or air ordering. There is always a  fallback  when doing a get. You will get the ordering you asked for if such an episode is there but will get one from the other ordering if your requested ordering doesn t have an episode.As of now in the application we only  get  with a DVD preference but that may change in a future commit. (We are already able to get non DVD episodes in the test harness.)So going back to our example: this ensures a deterministic answer for S08E14: it will be the DVD S08E14 because that s currently the preference this also ensures a deterministic answer for S08E15: it will be the air S08E15 because no DVD S08E15 exists we now have functionality to extract  Hopefully Salt  as S08E14; it just isn t yet exposed to the userThe code would allow the same episode to be the only episode mapped at two different places in the index. It also would allow multiple episodes with the same placement even with the same ordering. Neither of these things should ever happen. But the code doesn t check for it and is prepared to handle it if that s the data we get from the provider.,extract
Refactoring of Relay package. Extract Android to own projectTests not changed yet,extract
XSLT SPACE NORMALIZATION.Also a bunch of refactorings so all requests for xslt templates go thru the factory. Added a flag to the tag extractor to allow it to function in normalized spaces mode and non normalized mode.To switch back to non normalized spaces change the constant template file in the factory and switch the normalize flag to FALSE in th transformer.,extract
Extracted WOTask handling to an extra class which can be used separately,extract
* only render id s for top level (I think it used to do this and I forced it on for all of them a while ago to test)* extract style rendering (buttons render style on the label span rather than the container),extract
Fleshed out PredictiveModelOptimizer2Added Integration Test currently not asserting on anythingExtracted generic interface for outOfTimeDataStill a wip.[ 86243466],extract
Extract Json Instance Loader[ 86243466],extract
Extracted VimTestCase.typeText(),extract
Extracted executeText(),extract
Extracted toEscapeNotation(),extract
Minor improvement to JavaRuleViolation extraction of names and suppression status should be pretty explicit and clear now. Major improvements overall compared to the mess that is in 4.2.x.git svn id: https://pmd.svn.sourceforge.net/svnroot/pmd/trunk@6933 51baf565 9d33 0410 a72c fc3788e3496d,extract
extracted and reworked checkCreateRemoteSvnPath()git svn id: https://svn.apache.org/repos/asf/maven/plugins/trunk@1396669 13f79535 47bb 0310 9956 ffa450edef68,extract
refactoring: extracted IconTool to deal with info/warning/error icons in reportsgit svn id: https://svn.apache.org/repos/asf/maven/plugins/trunk@1608018 13f79535 47bb 0310 9956 ffa450edef68,extract
Move rexpro session monitor to the RexProRexsterServer.java and extract out start of shutdown listener.,extract
extract test runs in to builder style object,extract
Add UDFs that permit storing BSON from Pig and extracting timestamp information from ObjectIds (HADOOP 76).,extract
Add parsing text to compliment appending text.,extract
[ADD] implementation of security role hierarchy in both remote and local security,extract
Added a pow() method to the GroupElement class. Unit test for SU3 not implemented.,extract
Enhanced the batch handler to output error messages; added more tests and new provider that dumps docs selected by a query,extract
Fixed JSplitPane slider location in SourceEditorView ; fixed editor tabs not brought to front when editing a file,extract
"Added """"delete candidate sessions"""" functionality ",extract
added new server commands + added command feedback for telnet  The available commands are now:  * ban * stop * restart * kick * save * give * unmute * unban * time * setgroup * setipgroup * listips * unwhitelist * reload * whitelist * mute * backup,extract
Add hooks support,extract
make class more extendable  added additional docs,extract
"Implemented Shift and Lock and cleaned up from last 2 commits  Removed commented """"updateInstance"""" code  * Refer to r221 or r222 if needed  Extracted different mouse parts to methods Removed extra repaint() call in mouseEdit Removed WIP text from Object tab Downgraded cursorInstance to InstanceComponent cursorIC  Swapped ID and Object in RoomFrame Status bar  * Opposite of GM  but more logical this way  Removed EDIT_MODE  editInstancesObject  editInstancesDeleteUnderlying  * Too hard to keep up to date  just used swing directly  Added Fixme tag for Object Tab (I ll probably take this up)  git svn id: https://lateralgm.svn.sourceforge.net/svnroot/lateralgm@223 8f422083 7f27 0410 bc82 93e204be8cd2 ",extract
JFG 738 session scope plots have been added to the webUI with follow features:   Tests are sorted by startime  Pause between end of previous test and next test also considered,extract
issue  (TFJ 739) add User getURLEntity(),extract
nREPL input area: added a (hopefully) working auto eval on Enter feature,extract
SGF 409   Modify the GemfireDataSourcePostProcessor (basis for <gfe:datasource>) to not assume a GemFire Server was configured and bootstrapped with Spring and subsequently that the SDG ListRegionsOnServerFunction was registered.  Adding unit tests for the GemfireDataSourcePostProcessor class.,extract
bugs in the byteskey. added regression tests.,extract
[clearcase plugin] Added option to set the time window when merging change log entries   git svn id: https://svn.dev.java.net/svn/hudson/trunk/hudson/plugins/clearcase@6357 71c3de6d 444a 0410 be80 ed276b4c234a,extract
Some minor cleanup to TerritoryAccess source code.,extract
fixed up the intention templates  added tail recursion gutter marker  improved the automated error reportign a bit more. try to make the kahlua runner open its own window. remove the default underline formatting for tail calls. improve robustness of the parser under error conditions,extract
Added processing options for the java client.,extract
Refactor,extract
Made DynamicAddress an independent class.,extract
"Add a check to the tests for """"hg"""" actually being available  On some environments  it s possible to have hg configured properly in the path for command line use  but not in graphical applications (such as most IDEs). Mac OS X is an example of one such environment.  In these cases  the test should now fail with a more informative message  rather than with a generic """"No such file or directory"""" message that doesn t explain what the problem is. ",extract
Added static setter methods for the plugin,extract
Addition of on demand retrieval of service proxies (via getRemoteServiceReferences(targetID  interface  filter) for bug https://bugs.eclipse.org/bugs/show_bug.cgi?id 249061,extract
Added/used discovered service ID,extract
Add /res removeall command  Strip out old help system  changed list commands to support multiple pages.,extract
patch to add support for callable statements to the jdbc driver.  The patch was submitted by Paul Bethe pmbethe@yahoo.com,extract
335711 read lifecycle mapping metadata from maven plugin artifact  When calculating buildi lifecycle mapping  m2e will check if main maven plugin artifact has META INF/m2e/lifecycle mapping metadata.xml and will use this resource as additional metadata source. New lifecycle mapping metadata sources priorities  1. this pom embedded  this pom referenced  parent embedded     parent referenced  grand parent embedded... 2. sources contributed by eclipse extensions 3. maven plugin embedded metadata 4. default source  if present  Signed off by: Igor Fedorenko <igor@ifedorenko.com>,extract
AndroidLog: Added getTag() and logChunk() methods  … for easier subclassing.,extract
Vectors: add javadoc  look for more optimisations,extract
Added model visualization after deserialization.,extract
SC QCADOO64 add transactions,extract
Further WIP on valiation/reading.  Did a hopefully final stab at loading/validation  which now constructs fixed Objects containing resolution details for items and tests. Changes made to validation to match this. Some refactoring and tidying now required...,extract
Added WindGate CSV feature ( 111   82   83   105   106   112   113).,extract
Added newrules   git svn id: https://pmd.svn.sourceforge.net/svnroot/pmd/trunk@3384 51baf565 9d33 0410 a72c fc3788e3496d,extract
created Builder for EncFSVolume,extract
Optimizer additions.  Added ConjugateGradeientIPM. Added duality gap and thread count options to MOSEK.,extract
Added support for dynos endpoints to list and restart dynos,extract
ongoing refactoring,extract
prevent adding an ArchiveEntry with same name twice to an ChangeSet  git svn id: https://svn.apache.org/repos/asf/commons/proper/compress/trunk@765850 13f79535 47bb 0310 9956 ffa450edef68,extract
minor cleanup,extract
split session.close(boolean) method to two methods,extract
"Modifed REPL to allow for turning autoRun on and off. Added ability to explitly run program using """"run"""" command.  Modified rollback to rollback to the last successful run.  Added support for executing multiple REPL commands on a single line by separating with semi colons. Additional work is needed for this to work as desired with rollback functionality.",extract
[KARAF 823] Added a basic implementation of remote services (dosgi).  git svn id: https://svn.apache.org/repos/asf/karaf/cellar/trunk@1162249 13f79535 47bb 0310 9956 ffa450edef68,extract
Added methods on EUtils web service to retrieve identifiers through Elink queries.  Moved SDF fields extractor classes to CheMet IO (previously on core).  Added PubChemCompoundCrossRefs  git svn id: https://svn.ebi.ac.uk/steinbeck research/CheMet/trunk@770 47e25a5e c6eb 4c94 8020 4a4a81ee2334,extract
Added very simple REST like assessment runner,extract
Imdad  Ashok |  1256 | Added functionality to renew a subscription,extract
[ LIB 216] add Attributes.getModfied(other) and Attributes.getRemovedOrModified(),extract
Adding selector interpolation   new style.,extract
RF  add method for define PageSize in report,extract
Add methods to Events that accept an existing JSONObject,extract
added support for using primitives with renderText(); added sample os using invoke tag with local variables,extract
Added thread pool to jetty server,extract
PC optimization refactoring (Only unit tests. Missing IT tests refactoring.),extract
more cleanup Issue number: Obtained from: Submitted by: Reviewed by:,extract
OOZIE 1985 support dropping hcat dataset in coord rerun with cleanup option (ryota),extract
Add support for unquoted string values,extract
some refactoring to enable testing,extract
Code Cleanup of Search UI,extract
Added invitation listener and presence listener for xmpp chat room,extract
added channel value to assaynodes for multi channel micro array experiments,extract
Finished adding support for quantifiable results for multiselect,extract
"[SUREFIRE 949] add forkCount parameter  making the inconsitent forkMode parameter deprecated.    All defaulting works as in the previous versions  with the exception of reuseForks (introduced in the last release). It s now true by default.   forkCount supports """"C"""" notation as in  T of maven core ",extract
Add Iterator versions of getAsyncBulk and getBulk  Add the following methods to Memcached/MemcachedIF:   <T> BulkFuture<Map<String  T>> asyncGetBulk(Iterator<String> keys        Iterator<Transcoder<T>> tcs);   <T> BulkFuture<Map<String  T>> asyncGetBulk(Iterator<String> keys        Transcoder<T> tc);   BulkFuture<Map<String  Object>> asyncGetBulk(Iterator<String> keys);   <T> Map<String  T> getBulk(Iterator<String> keys  Transcoder<T> tc);   Map<String  Object> getBulk(Iterator<String> keys);  Some times it is more convenient/memory efficent to pass in an Iterator of keys than it is to have a Collection of them.  Example:  public PrefixAdderIterator implements Iterator<String> {    private final String prefix;   private final Iterator<String> iterator;   public PrefixAdderIterator(String prefix           Iterator<String> iterator) {     this.prefix   prefix;     this.iterator   iterator;   }   ...   public String next() {     return prefix+iterator.next();   }  ... }  rather than   List<String> prefixedKeys   new ArrayList<String>();  for (String key: keys) {   prefixedKeys.add(prefix+key);  }  Change Id: I15821983ea2ebd07fd98feeb968ce9fa578ded0b Reviewed on: http://review.couchbase.org/12283 Reviewed by: Ted Crossman <tedoc2000@gmail.com> Reviewed by: Matt Ingenthron <matt@couchbase.com> Tested by: Matt Ingenthron <matt@couchbase.com>,extract
Removed setters from ResponseDefinition and made corresponding additions to ResponseDefinitionBuilder,extract
Reorganisation of controllers codes. BookingRoomController now uses BookRoomCommand. AddBookingRoomViewParamsController uses static methods from BookRoomCommand. Fixed little bug in JSP. Working fine on Tomcat 7.  git svn id: https://svn.origo.ethz.ch/eeg database/trunk@794 1a751040 f3c7 4aaa 98da 1e85aacc1d30,extract
Refactor to avoid duplicate code.,extract
[NGRINDER 29] add user login plugin module    Fix plugin support error.,extract
refactor Context,extract
Large documents no longer causes exceptions in MongoDocumentIO s cleanup.  Adds a new test file for MongoDocumentIO which does not require a live MongoDB instance.,extract
toIgnore added to CopyDocumentService,extract
Added a proxy configuration processor.,extract
added checkbox for toggling emulation speed,extract
Added documentation feature.,extract
add Writer output to EpubProcessorSupport,extract
added @CollectionTable implementation,extract
Add a checkbox that hide/show non numeric excel headers,extract
added directory popup feature   git svn id: https://pmd.svn.sourceforge.net/svnroot/pmd/trunk@1243 51baf565 9d33 0410 a72c fc3788e3496d,extract
SC QCADOOMES 1352 Added vat number validation.,extract
Added new class writer that is cleaner.,extract
"added support for """"selection"""" binding on AjaxAutocomplete    pretty lame impl  and restricted to just displayString support  but better than nothing  ",extract
Updated Command + UpdateTest2 + refactored,extract
Add support for delay and expires_in,extract
"added """"set"""" option to NBT utility ",extract
Testcase fix and a bit code cleanup  Change Id: Ic55c77dca319d7ca072a3d6e4a4aaf0364e490ed,extract
Fix encoding of Lists being sent in via API requests  As described in  229  we were previously translating lists to a special type of indexed object when sending them into the API via a request. This patch corrects that behavior  adds some significant clean up to the encoding utilities  and adds some additional testing so that we ll have better guarantees that everything works.,extract
Fixed optional protocol dialog Refactored code,extract
add Zone.getRotationAngle()  Fixes  84  Added an example to test also,extract
Code cleanup (patch from Sean Bright),extract
ModelContext.getDefaultLanguage added,extract
SC ESILCO 497 Added damaged products report.,extract
Willie Thean s laf changes. Added ability to specify proxy for http download. Changed default logging to INFO.,extract
Added support for parametrized logging(similar to how SLF4J API).  Signed off by: Manish Kumar <manishk@vmware.com>,extract
Added flipping,extract
Paths are created in a separate function.  This way it can be initialized with Context related stuff  like for example the way transforms are handled.,extract
documentation and refactoring,extract
[HER 1505] Expand BeanshellProcessor/BeanshellDecideRule for every JVM friendly scripting language (Javascript/Jython/Groovy/JRuby) * BeanShellProcessor.java  > ScriptedProcessor.java; BeanShellDecideRule.java  > ScriptedDecideRule.java     update to use any present JSR 223 scripting engine (requested by free text name)      update to allow script to come from inline string or file (just as with seeds) * modules/pom.xml     include groovy and jsr 223 capable JARs * .classpath     add new JARs to classpath * BeanShellProcessorTest.java  > ScriptedProcessorTest.java     rename (empty) test class,extract
only validate queue parameter once when batch enqueueing  Not once per job in the list. Thus  I refactored the validation methods to be smaller. I decided against inlining `validateArguments()` method since I am not sure whether this is in line with the design principle of the author of this library.,extract
add getAllowedLanguages(String spaceName),extract
added an ActionMapper  the plan is to make all actions package protected,extract
JCBC 1164: Add tracing to the subdoc API  This changeset adds span tracing to the subdoc API  alongside related changes in previous commits.  Change Id: I0ab9482445012f74cd2ba86c14a4ec0dafed3547 Reviewed on: http://review.couchbase.org/91593 Tested by: Build Bot <build@couchbase.com> Reviewed by: David Nault <david.nault@couchbase.com>,extract
fix bug 1252447: add check on the mailx and wsdl4j packages for cluster creation,extract
[ LIB 217] add methods to SAXTransformer to pass callback function to setup Transformer,extract
Add /lwc history. Allows the viewing of all history items for a player (or everyone.) Dynamic arguments allow you to use the player name or page name anywhere:   /lwc history  /lwc history Hidendra 2  /lwc history 2 Hidendra  /lwc history 2  and /lwc history Hidendra   are all valid and will work! Later on  will work hand in hand with /lwc details <HistoryId>,extract
Refactor error handling  so that exceptions can be reported to my site without circular class references.  git svn id: svn://svn.jbidwatcher.com/jbidwatcher/trunk@495 b1acfa68 eb39 11db b167 a3a8cd6b847e,extract
Pulled string matching stuff out of Parser ad into TokenQueue  for reuse in selector parser. Added som texts and corrected behaviour of parser.,extract
addressed https://github.com/tomp2p/TomP2P/issues/18,extract
PR:MINSTALL 16   added test case  added tests  removed InstallArtifactStub2.java  git svn id: https://svn.apache.org/repos/asf/maven/plugins/trunk@391554 13f79535 47bb 0310 9956 ffa450edef68,extract
Total refactoring of village so that each type has autonomous subscriptions and inertia.,extract
Updated accurev plugin to remove non recommende advanced settings  include reftree usage  remove workspace usage  use port and name for all calls  add display of depots and streams  clean up ui  allow users to only build if changes in particular directories,extract
Code cleanup activity  472,extract
[NGRINDER 309] add runtime only controller annotation and change scuprtconsole as runtimeonly controller.,extract
Refactored check for hidden into a private method;  preparing to shift to JPA from PortletPreferences,extract
Added support for setting the content id and payload id for the ebXML attachments via JMS,extract
refactored,extract
WELLSFARGO 30 External Ids  Add concept of link transformers to be able to transform the consumerdb notation of external links into parseable lily links,extract
Rules can now use violation specific values in messages  specifically ${variableName}  ${methodName}  ${className}  ${packageName}.  Minor tweak to JavaRuleViolation to report a variable name for ASTVariableDeclarator fields.  Added Java Optimization ruleset Rule RedundantFieldInitializer  submitted by Lucian Ciufudean.   git svn id: https://pmd.svn.sourceforge.net/svnroot/pmd/trunk@6914 51baf565 9d33 0410 a72c fc3788e3496d,extract
Added some additional JavaDoc on the usage;    added methods that can return any other default value than zero when parsing fails;   bumped version to 1.0.2.,extract
Add isPortalInterior(). Hide INTERIOR_MATERIALS.,extract
added test case for bidirectional,extract
Enable better guice error messages for a missing binding.                Created by MOE: https://github.com/google/moe MOE_MIGRATED_REVID 125479432,extract
Simple refactoring so that the code for creating a column isn t duplicated unnecessarily.  git svn id: svn://svn.jbidwatcher.com/jbidwatcher/trunk@599 b1acfa68 eb39 11db b167 a3a8cd6b847e,extract
First huge step at refactoring JBidwatcher to use Guice instead of a wildly connected set of singletons.,extract
srl.http    add a session factory for stateful servers,extract
Add mdr20  not written out as it breaks send to device. Probably needs some or all of the associated 2x sections.   git svn id: http://svn.mkgmap.org.uk/mkgmap/branches/index@1805 25d90789 57f7 4ee0 8453 03a3dfeeeb22,extract
Added the ability for ValidatorResults and ValidatorResult to have an object returned from a validation method be associated with the result status.   git svn id: https://svn.apache.org/repos/asf/jakarta/commons/proper/validator/trunk@139826 13f79535 47bb 0310 9956 ffa450edef68,extract
Huge refactoring to make PrestoResolver.,extract
New feature branch to allow a custom listener to be created for ERXStatisticsStore. Such a listener can be used to notify an external monitoring system (e.g. StatsD/Graphite) if request handling is slow.,extract
Refactor build management and fix Xcode scan build to work alongside Release configurations,extract
Adding API action interfaces.,extract
Merged revisions 345 350 352 366 via svnmerge from  https://svn.parabola.me.uk/svn/mkgmap/branches/lang  ........   r345 | steve | 2007 11 02 00:33:22 +0000 (Fri  02 Nov 2007) | 1 line      allow any charset as a target ........   r350 | steve | 2007 11 03 17:45:54 +0000 (Sat  03 Nov 2007) | 1 line      Allow for making upper casing optional ........   r352 | steve | 2007 11 04 16:49:05 +0000 (Sun  04 Nov 2007) | 2 lines      Make all the transliteration for the acsii only mode to be table driven. ........   r353 | steve | 2007 11 04 19:03:47 +0000 (Sun  04 Nov 2007) | 2 lines      Added missing (blank) character translit maps. ........   r354 | steve | 2007 11 04 20:00:53 +0000 (Sun  04 Nov 2007) | 2 lines      Build changes needed for character tables. ........   r360 | steve | 2007 11 06 23:02:49 +0000 (Tue  06 Nov 2007) | 2 lines      Russian transliteration provided by User:Liosha ........   git svn id: http://svn.mkgmap.org.uk/mkgmap/trunk@367 25d90789 57f7 4ee0 8453 03a3dfeeeb22,extract
[LOGTOOL 124] Create a new @Producer annotation and allow a Function or BiFunction to create the exception that will be returned.,extract
Add unit test and refactor PushCommand,extract
[MODULES 311] Add ability to run a specific class in a given module,extract
Changes to add clarity and fix low zoom rendering.  git svn id: http://svn.mkgmap.org.uk/mkgmap/trunk@101 25d90789 57f7 4ee0 8453 03a3dfeeeb22,extract
Added secondary table support for cassandra ds client,extract
[HAMA 467] Add I/O System to YARN   git svn id: https://svn.apache.org/repos/asf/incubator/hama/trunk@1214138 13f79535 47bb 0310 9956 ffa450edef68,extract
Fix MECLIPSE 587: maven eclipse plugin creates wrong org.eclipse.wst.common.project.facet.core.xml for ear projects when javaee:javaee api is used  git svn id: https://svn.apache.org/repos/asf/maven/plugins/trunk@1154560 13f79535 47bb 0310 9956 ffa450edef68,extract
* refactored out FitFixtureException from RestFixture * fixed bug on handling js expressions,extract
Fixed a window size bug in the download sites editor. Added the ability to download beta modules from Crosswire.,extract
Changed way in which on upgrade works    DbOpenHelper.onUpgrade method is now final. You will now have to override a new method called onUpgradeDatabase.    Updated copyright    Added methods to get the table name and column names (SQLHelper class),extract
support for... [HER 1660] allow adding seeds  recovery journal like URI data at any point in crawl via  action directory   [HER 769] Support case where millions of seeds.  * AbstractFrontier.java     move sourceTagSeeds setting to SeedModule     trigger and schedule seeds via SeedModule s announcements and SeedListener protocols * StatisticsTracker.java     implement SeedListener  use processedSeedRecords as list of all seeds * ProcessorURI.java  DefaultProcessorURI.java     (getURI) convenience accessor for plain URI string * SurtPrefixedDecideRule.java     use seeds as prefixes via SeedListener notifications  rather than separate scan of seeds source text * SeedListener.java     simplify to notifications of new seed  and nonseed text mixed with seeds (as with SURT directives) * SeedModule.java     methods for SeedListener interface  announceSeeds  actOn(File) * TextSeedModule.java     eliminate interators; add methods for announcing seeds and scanning seed text sources (including arbitrary Files) * PrefixSet.java  SurtPrefixSet.java     derive from ConcurrentSkipListSet; eliminate now unneeded extra synchronization and clone()s      offer considerAsDirective() for direct application of directive Strings,extract
added general info fields,extract
"Added """"create ItemDeliveryOptions"""" MVC ",extract
adding more methods needed by the Hudson translation plugin,extract
Refactor code  put current distro manager into default plugin,extract
NXBT 1033: Add method to do a trial registration,extract
OOZIE 1315 Refactor classes from launcher jar into Oozie sharelib (rkanter)  git svn id: https://svn.apache.org/repos/asf/oozie/trunk@1491589 13f79535 47bb 0310 9956 ffa450edef68,extract
refactoring: add PartitioningScheme,extract
Add support for disabling routing on unpaved roads and ferry routes.  By default  ways are considered to be paved and not ferry routes  Adding mkgmap:unpaved yes/true/1 to a way will declare it to be unpaved and such ways will not be routed through if the GPS has been set to avoid unpaved roads.  Similarly  tagging a way with mkgmap:ferry yes/true/1 will cause it to be ignored for routing purposes if the GPS has been set to avoid ferry routes.  git svn id: http://svn.mkgmap.org.uk/mkgmap/trunk@1422 25d90789 57f7 4ee0 8453 03a3dfeeeb22,extract
added removeOOBMessages(),extract
Additional fixes for bug https://bugs.eclipse.org/bugs/show_bug.cgi?id 532205  Added API to AbstractRSAClientService to simplify the creation of providers.  Change Id: I57d69eeaf81de2230eb6ad163c6199f5a780a341,extract
Added some test class for encoder. Some improvements to the ElementUtils class. Many improvements adding setter to the Encoders classes,extract
added supported outputs functionality and some refactor and clean up,extract
TP: moved version checking from handleSingleMessage() and handleMessageBatch() into receive()   TP implements both receive(InputStream) and receive(byte[]) [https://issues.jboss.org/browse/JGRP 2165]   BaseServer discards length bytes if no receiver callback has been installed   TcpConnection now doesn t create intermediate buffer  but passes the input stream directly to the receive() callback   GossipRouter/RouterStub now implement both receive() callbacks   PubClient/PubServer now implement both receive() callbacks   RoundTrip.receive() never used correct offsets to read data,extract
Keep parser in line with wycats/handlebars  Emulate the refactor performed in https://github.com/wycats/handlebars.js/commit/eee2c4d4f29e233280907bc89a32556de66fe783  This will help simplify porting future changes in wycats/handlebars,extract
expands modified flag to entity and aspect nodes. Changes to serializer to take in consideration modified flags for entity and aspect. Cleans serializer code  adds more junit tests to perform network tests  and further tests on existing serialization of trees.,extract
refactoring StatusPrinter,extract
added a few method stubs  some comments,extract
Additional unit tests,extract
PR: MPIR 11  Replaced @requiresDependencyResolution with manual resolution so that a listener can be passed to create the dependency tree.  git svn id: https://svn.apache.org/repos/asf/maven/plugins/trunk@384184 13f79535 47bb 0310 9956 ffa450edef68,extract
Cleaned up examples. Added comments and javadoc. Added some examples.,extract
Added value params support to FieldParamsPostProcessor.,extract
Integrated nREPL; add new REPL view; refactoring of editor/source viewer; simplified launch process,extract
Added documentation to subroutines. Refactored buffer local variables a bit. Refactored subroutines handling strategy.,extract
* IcyCanvas : added a new synchronization view method. * Canvas3D : severals fixes and improvements. * ROI : improved ROI display in Canvas3D. * minors fixes and improvements.,extract
4: Add parameter requestedDate to the create /updateSubscription calls,extract
149 add ATOM support,extract
Removing PrimitiveValueType and merging its functionality with the ValueType. The multivalue and hierarchy flags are removed and ListValueType and PathValueType are created instead. To the ListValueType and PathValueType it is possible to give as extra  typeParams  the ValueType that should be put in the List or Path.    git svn id: svn+ssh://dev.outerthought.org/outerthought/lilyproject/branches/complextypes@5027 b80d95f8 e103 0410 bd55 e03a9dc29394,extract
FacebookClient   move adding app token (and possible appsecret_proof) into its own method; add optional computation of hash pom.xml   add explicit dependency on commons codec (so we can hex encode the hash  which is a byte array),extract
implemented sticky options for PM  implemented sticky options for PM. It allows to have options stick for PM when used across different thread. Previous implementation used ThreadLocal  so options were valid only in the Thread scope. The new implementation gives control when setting options to make them sticky (global scope) or not (thread scope). refactored unit test to centralize the AWS property file.,extract
Added validation for minimum supported tools version (7.7.0) in CoverityPublisher and CheckConfig,extract
Resolves test failures and adds a test for https://jira.duraspace.org/browse/DURACLOUD 1113,extract
Add support for sharing local list and added the disabled binding similar to what wotextfield is doing.,extract
ARTIF-638 support interacting with Artificer through EJB split service logic out of Atom resources,extract
Added support for includes/excludes filters in configuration,extract
Added servicesview extension point to support future support of https://bugs.eclipse.org/bugs/show_bug.cgi?id 483025  Change Id: I42917201cbe317dfaa9a7b753ab2116e25189c6f,extract
Added changes to avoid delete problem.,extract
add CachedThreadStatesGaugeSet,extract
refactoring for Gipps  Krauss and Newell: model parameter dt is now taken directly from the simulation update timestep which is fix for one simulation,extract
Added global Preference Page stubs including WSIL Browser to support SchemaImportDialog. Fixed new file wizard (unable to edit file name),extract
"Version 9 0.4.8 2 fixes: * More appropriate Jangaroo Facet detection: only add facet if packaging type is """"jangaroo"""" or compile goal is called explicitly. Jangaroo facet for war modules that do not contain any Jangaroo code is no longer needed. * Do not copy transitive Jangaroo dependencies if they are already contained in a war overlay.  [git p4: depot paths   """"//coremedia/jangaroo/"""": change   173446] ",extract
[jdbc] Add batching in insertion in JDBC client bindings,extract
Add filter for builds age,extract
Extracted file handling methods from Listener to new FileChooser class. Modularized readers. Added support for plugging in FileView modules. Next revision will modularize the writers  so translators might wish to wait until then to update strings.  git svn id: https://lateralgm.svn.sourceforge.net/svnroot/lateralgm/LateralGM/trunk@525 8f422083 7f27 0410 bc82 93e204be8cd2,extract
working on  62: added a forceMode method to ensure to refresh the PNode and added a dummy PNOde to the layer in putModeLayer  to avoid NPEs when the MappingComponent is not yet listening to the layer,extract
Bit of refactoring  Add depend: Multiverse Core,extract
664   add test to demo bug; ignore bids for zero quantity,extract
Added ability to restrict tests that require provider to support cancel on connect.  The httpclient provider supports this  but the urlconnection provider does not.  To specify whether the filetransfer tests should expect that cancel on connect can be tested  specify the following system property:  org.eclipse.ecf.tests.filetransfer.cancelSupportedOnConnect  e.g.  Dorg.eclipse.ecf.tests.filetransfer.cancelSupportedOnConnect false  will *not* assume cancel on connect is supported.  The default is true (cancel on connect is expected to be supported).,extract
Refactor dialog code,extract
Added mote test for ClientCanvas,extract
add HTTPClientConnection and HTTPServerConnection,extract
Add basic configuration validation UI,extract
Add a unit test that verifies the charset of the multipart is used,extract
Added support for postfix expressions  albeit via the StatementExpression node.   git svn id: https://pmd.svn.sourceforge.net/svnroot/pmd/trunk@2726 51baf565 9d33 0410 a72c fc3788e3496d,extract
Removed unused method Reduced duplicated code by adding loadAAACProblem(String) method which now handles loading all problems rather than 13 methods that were identical save one character  git svn id: https://www.evllabs.com/svn/jgaap/trunk@218 bcaee279 2e94 4b2e be96 a1d7c6f3fc26,extract
" Support for creating """"ordinary"""" indexes. Currently only FrontBase and MySQL are supported.  Use default index name when none is provided in ERXMigrationTable.addIndex/addUniqueIndex   ",extract
added EntityManagerImpl.persist(Collection<Object> objColl)   the main advantage over persist(Object obj) is that   a single batch mutation will be used for performance,extract
Comment and simplift the component painting function; this let me add new features where they needed to go  because the code became more comprehensible.  Add a dotted square box around the thumbnail icon.  (Looks slick IMO!),extract
add tests and implement time limitations,extract
JCBC 1164: Add Tracing to Counter.  Motivation            This changeset adds tracing to the counter operation.  Change Id: I8ff4e4074f9d33a22ac21132981615d88f0185e4 Reviewed on: http://review.couchbase.org/90930 Tested by: Build Bot <build@couchbase.com> Reviewed by: David Nault <david.nault@couchbase.com>,extract
[MINSTALL 93] Add installAtEnd option for multimodule projects   git svn id: https://svn.apache.org/repos/asf/maven/plugins/trunk@1422291 13f79535 47bb 0310 9956 ffa450edef68,extract
added feature to drop entities some refactoring and bug fixes,extract
Cleanup AbstractNode,extract
[MWAR 81] Request enhancement to pattern matching for packagingIncludes/packagingExcludes functionality (regular expressions?) Submitted by: Nicolas Marcotte Reviewed by: Dennis Lundberg  o Minor adjustments to code style o Added a page to the site with examples  git svn id: https://svn.apache.org/repos/asf/maven/plugins/trunk@1203638 13f79535 47bb 0310 9956 ffa450edef68,extract
Initial historics implementation. Added onStatus event. Bumped version to 2.0.0.,extract
fix disk failure step 1   happy path  fix by cloning template node  for each node with failed disks  it will be fixed with step 1 powerOff node  step 2: createReplacementVm  step 3: a chef bootstrap step on the bad node.  Changes include: 1. implement clusterHealService to fix cluster errors  start from disk failure 2. implement disk failure handling job and according steps 3. record system disk in table disk. It s a plus besides the data and swap disk 4. update CreateVmSp to attach existed vmdks  only create and add disks that don t   have vmdk path,extract
QR codes: Fix some GUI  camera and file management related stuff  TakePhotoThread: Add possibility to get latest raw image  avoid stretching of image in scaling because of aspect ratio mismatch FileUtils: Fix logic of temporary file creator  avoid adding temp marker multiple times QR codes: Highlight QR code preview loaded objects in green (red used in some default materials) GUI / QR codes / Webcam: Add support to load QR codes with the webcam GUI / Camera: Ask to reload camera / QR code locations after laser job finish GUI / Camera: Combine deactivating camera with camera ignore  was already a bit confusing in the original version QR codes / GUI: Fix some issues with GUI locking  remove permanent UI elements for camera / projector  they are now automatically turned on / off if it makes sense  still reachable in the View menu QR codes / GUI: Implement edit GUI locking if QR code editing is in progress,extract
tests added for getTranslation/exists,extract
Implement the SRT expansion table.  Letters can be sorted as if they were two or more letters  if this is the case then the sequence is stored in srt5.  Previously there was a hardwired and quite possibly inconsistent table in place.  Add sorting rules for arabic.  git svn id: http://svn.mkgmap.org.uk/mkgmap/trunk@1972 25d90789 57f7 4ee0 8453 03a3dfeeeb22,extract
"BISERVER 4509: Reorganizing the parameter processing of PRD/Report Viewer.  The report viewer no longer processes parameters locally  everything gets passed blindly to the server. The parameter xml is the only source of configuration the GWT application gets.   GWT side: We no longer use raw DOM trees to configure everything. Using DOMs is cumbersome and easy to mess up. A real object model exists now that accepts the new xml structure that is generated by the content generator.   Cleaned out loads of misaligned anonymous inner classes   its never good to use inner classes and then still have to rely on If then else streaks if the same can be achieved with smaller classes.  All parameter names are URL encoded now. Users outside the english language space tend to use their native character set for everything  including URL components.  Instead of hardcoding the error text color  lets use the stylesheet for it.  Server side: Added proper GWT client support by passing all client properties through the parameter system. Output targets are now used instead of output types. Output targets can be redefined by the user by declaring a parameter with the name of """"output target"""". Paginating parameter is no longer treated specially  the pagination mode will be activated if the HTML pageable output target is selected.  Autosubmit  autosubmitui and layout are part of the master report object now. Reports can be hidden.   Split the monolithic ContentGenerator into 4 separate classes  each dealing with exactly one request type. Separation of concerns is cool.  The various inner classes that could have been static are now top level classes.   If no output target is selected  the default for XActions is HTML stream  for content generator it is HTML page.   Staging Handler: The configuration for this can now be done via the master report (in addition to the existing URL or system default settings). If the staging mode is set to memory or temp file  we now disable the ForceBufferedWriting mode of the HTML export. Be aware that staging in the current implementation causes extra memory consumption for output types that could have been streamed to the user (ie all except bufferd HTML).   Open points:  The parameter attributes passed to the client side are not namespace aware yet. The date parameter handling must still be fixed as it is broken for time and timestamp types in Bi Server 3.5.2 and 3.6.0. ",extract
Changed command handling so that we print the command usage string ourselves. Cleaned up plugin.yml so usage help doesn t look awful. Brought back  bad  messages formatted in red which where torn out by Tim. Added warning when console tries to use player only command. Now matching the start of the name of a warzone instead of the exact name  because that s how it worked and how it should continue to work.,extract
add Generator (ztl to scala)  it is not totally completed.,extract
added an implementation of GraphicsConfiguration and GraphicsDevice,extract
Latency measurements added for StormDstTupleStorage  with and without BDB.,extract
Implemented AlternatingBundler and RemoveQueueBundler (https://issues.jboss.org/browse/JGRP 2171)   Added drainTo() methods to RingBuffer   Attributes in JmxAdditionalObjects can now be set  too,extract
"* added unit tests""",extract
Added tests for BuildStepOperation.,extract
[CVE 2012 2098] Integrate fallback sort into the rest  add some more tests and fix bug in bucket boundary calculation  git svn id: https://svn.apache.org/repos/asf/commons/proper/compress/trunk@1340786 13f79535 47bb 0310 9956 ffa450edef68,extract
Added javadoc.,extract
[FIXED HUDSON 7301] adding notifier for perforce labelling upon completion of builds,extract
Refactored statistics recording API,extract
"JCBC 992: DNS SRV workaround when IPv6 nameserver  Motivation:             The Bootstrap class  used to bootstrap the SDK from a DNS SRV record  relies on the default host machine DNS resolution. In the case where the DNS server list configured in the host machine include IPv6 entries  the whole initialization breaks and there s no way of using a different resolution process.  Modifications:                An additional overload for Bootstrap is added that accepts a nameserver IP (should be an IPv4)  to use with the """"dns://"""" prefix for direct name resolution instead of attempting to compile a list of name servers from the OS.  The Bootstrap test has been amended to use this feature and rely on Google s public DNS (""""8.8.8.8"""").  Results:          Bootstrap test pass even on a machine where IPv6 name servers are configured. Such OS configurations can be worked around by providing an explicit name server address  if needed.  Change Id: I690088c090aa11279235c625ed1e81f846d13b1b Reviewed on: http://review.couchbase.org/66290 Reviewed by: Simon Baslé <simon@couchbase.com> Tested by: Simon Baslé <simon@couchbase.com> ",extract
Added mapDisplay.getLocation(x y),extract
Allow request params and options to be overridden on `autoPagingIterator`  We normally pass params and options with the `list` method:      invoices   Invoice.list(params  options).autoPagingIterable()  This patch adds support for them to also be overridden from `autoPagingIterator`:      invoices   Invoice.list().autoPagingIterable(params  options)  The reason for this is to support custom params and options for subcollections  which unfortunately do not inherit options from their parent collections. For example:      lineItems   invoice.getLines().autoPagingIterable(params  options)  There s more context for this in  264  and I tried a more elegant solution (which failed) in  269. This seems like the easiest option for the time being  with the possibility that we could do something more sophisticated later to start consolidating our interfaces.  Fixes  264.,extract
Refactored RDFRelation into a basic ExecutionPlan structure,extract
Fixed bugs in buddy list view.  Added ability to handle iq set events properly.,extract
NXCM 106   create the DocumentRoutingEngineService (add test),extract
Add support for async POST and PUT /content,extract
added diversion option to Gendreau scenario,extract
added an example of configurable FieldPopulators and made it work,extract
experimental and incomplete! add code to collect city names and zip codes. TODO: split interval if zip code or city is not the same for all houses  git svn id: http://svn.mkgmap.org.uk/mkgmap/branches/housenumbers2@3542 25d90789 57f7 4ee0 8453 03a3dfeeeb22,extract
[ARQ 694] Refactored test lifecycle handling using event based approach (with chaining using precedence) instead of single entry point.,extract
fixed major bug with custom events added command to reload config config defaults now applied and saved,extract
Multiple carets support for auto indent and refactoring,extract
Adding intForKeyWithDefault,extract
o Added extraArtifacts  removed souts  simplified getInitalGoals      I know this is 3 things at once  but it does not seem impossible after all,extract
Rework of WampMessage serialization. Added binary message using Message Pack.,extract
Added more statements.,extract
added a trim() that also trims &nbsp;,extract
"Rework TheTVDBProvider into smaller methods.  Break up the jumbo methods in TheTVDBProvider  into more manageable chunks.  Add a utility class for generic XPath parsing.  Add a utility function in StringUtils for turning a String into an integer.  Move some constants into Constants.java  and be more prepared to work in a language that s not English.  Add an ability to prefer """"regular"""" episode numbers to the DVD numbers (though it s not used yet).  Re use objects when it s safe to do so.  Improve error messages.  Have method signatures prefer interfaces (List) to implementations (ArrayList).  Add a comment to Constants.java. ",extract
Cleanup of HTML reports; mostly cosmetics  consistency  and so on;   Minor javadoc updates & code cleanups.,extract
Fix transcripts starting with inaccurate lines.  Refactored pdf generation.  refs  7963,extract
[clearcase plugin] Added option to set the time window when merging change log entries   git svn id: https://hudson.dev.java.net/svn/hudson/trunk/hudson/plugins@6357 71c3de6d 444a 0410 be80 ed276b4c234a,extract
"* splashscreen now dynamically fetch image files. * fixed minors issues in the LUT gui event. * MetaDataUtil:    """"time interval"""" field is automatically calculated from timestamp when possible.    added getPositionX/Y/Z() and getTimePosition() methods. * VTKCanvas: better channel initialization (fix some crashes)",extract
Hopefully the last of the big exceptions refactorings. I went through all of the places we re adding context to our Errors object and made sure we re never doubling up    specifing the same injection point or key multiple times.  The new errors have nice  at  lines for parameters  fields and linked bindings. Hopefully this makes it easier to follow the stacktraces. Additional context (such as the binding s origin in a module) could be added later if desired. Currently we have module specific sources in CreationExceptions  and plain old binding sources elsewhere. The end result is messages that can look like this:  com.google.inject.ProvisionException: Guice provision errors:  1) Error injecting constructor  java.lang.UnsupportedOperationException   at com.google.inject.ProvisionExceptionTest$RealD.<init>(ProvisionExceptionTest.java:284)   at binding for com.google.inject.ProvisionExceptionTest$RealD.class(ProvisionExceptionTest.java:284)   at binding for com.google.inject.ProvisionExceptionTest$D.class(ProvisionExceptionTest.java:1)  1 error  git svn id: https://google guice.googlecode.com/svn/trunk@652 d779f126 a31b 0410 b53b 1d3aecad763e,extract
Added checkstyle extension and rules  started to cleanup/format/document code based on rules,extract
Add support for ssl/tls upgrade of an existing NetSocket,extract
Add parameter  migrated  to the Create Subscription Call,extract
fixed typed properties for relationships  added tests,extract
Fixes  81 HyperLogLog.Builder improvements  We cannot make the constructors for the Builder match HyperLogLog without risking behavior changes downstream  but we also have no default constructor for either (and adding one could be contentious).  Therefore I have added static  with  methods. This somewhat goes against the expected builder pattern  but it s not as though HyperLogLog.Builder was really following it anyway (there is only one setting so it is closer to just being a supplier).  Additionally  it would have been a little silly to also implement non static  with  methods since the code would look exactly the same for both.  Lastly  the builder now performs eager validation of rsd/log2m. This leads to extra validation calls  but I can live with that.,extract
Added text caching in Element and PartialList  so textual content is returned pronto  and added in whitespace handling to Element.java,extract
Added support for class tag in persistence.xml,extract
Run truth subject tests under j2cl.  Changes includes:   Having the ExpectFailure to implement a wrapped interface of TestRule to allow GWT swapping   Add BaseSubjectTestCase class for subjec tests to extend which setup a ExpectFailure in `@Before` and ensure failure caught in `@After`.   Add a small build rule similar to GenTestRules but for j2cl_tests.   Migrate two subject tests as a start to prove the concept  RELNOTES n/a                Created by MOE: https://github.com/google/moe MOE_MIGRATED_REVID 177901707,extract
refactored audio scrobbler class to reduce method length,extract
Additional fixes for URL detection,extract
[JENKINS 44290]   Add small test suite for hudson.remoting.Engine initialization,extract
234 : Add new option  allowDnsReverseLookup   During a restrictor check by default the hostname is determined which might cause a reverse DNS lookup. In order to avoid this (e.g. because there is nor restriction on the hostname)  this configuration property can be set to `false`. For backwards compatibility it is set to `true` but will change to `false` in Jolokia 2.0,extract
Added a watch option to the main program.,extract
add chunked encoding response for http2 server,extract
Z3: added support for multiple ensembles.,extract
add xml returnformat,extract
WIP: add support to unlock notify,extract
[MINVOKER 102] Provide a way to install Extra dependencies  o Added support for relocation of root artifact  git svn id: https://svn.apache.org/repos/asf/maven/plugins/trunk@939868 13f79535 47bb 0310 9956 ffa450edef68,extract
Added nameNextElement feature,extract
added method for reading graphs from streams,extract
Clustering fixes and refactorization.  git svn id: https://bg.upf.edu/svn/gitools/desktop/trunk@1133 1b512f91 3386 4a98 81e7 b8836ddf8916,extract
[refactor]: extract write and send method,extract
Add support for explicit @AccessType on types,extract
started refactoring RoadModels  created SpatialRegistry to encapsulate all positional information related to road users,extract
Add common parameter loading code for both simulation loading methods (from cli args and from db).,extract
Add local variables to stackframes if agent is available. ( 401),extract
Vandang  Ashok  Sush |  1774 | using repositories to delete all couchdb documents instead of the services. added integration test. added log messages.,extract
Refactor of XMPPChatClient for generality and simplicity,extract
rhbz1110627 rhbz1038852   Squashed commit for zanata init command  https://github.com/zanata/zanata client/pull/27  commit 7ab5819cefde4b76a6256cc5ecd5e15435b5df73 Author: Patrick Huang <pahuang@redhat.com> Date:   Thu Aug 21 12:14:46 2014 +1000      rhbz1110627   handle not exist src dir  commit 8dea609e2c52d70bd6c7db501a5d946e3eea7215 Author: Patrick Huang <pahuang@redhat.com> Date:   Thu Aug 21 11:55:58 2014 +1000      rhbz1110627   check server is compatible to init command  commit 61fe130f878e7c29798264c9f8188726730700f4 Author: Patrick Huang <pahuang@redhat.com> Date:   Tue Aug 5 14:57:43 2014 +1000      messages change  commit b493a38bd6c1fc71b4a2a2d61b2c4d586717a96e Author: Patrick Huang <pahuang@redhat.com> Date:   Tue Aug 5 12:25:40 2014 +1000      change message template to match prompt  commit 93173dd4bc829334827a29c759754355889a4584 Author: Patrick Huang <pahuang@redhat.com> Date:   Tue Aug 5 10:25:16 2014 +1000      fix exception type and tests  commit cc4b7d2c62042752e3fc20b58964c28c2ff43e34 Author: Patrick Huang <pahuang@redhat.com> Date:   Tue Jul 29 14:03:11 2014 +1000      change copyright year and a few messages  commit 94ec9adde1e5dbec3d8aa777f4c3736992493d31 Author: Patrick Huang <pahuang@redhat.com> Date:   Tue Jul 29 12:23:29 2014 +1000      improve message  commit f383bd89ab1f3d2e36de8169fee851cbd0533263 Author: Patrick Huang <pahuang@redhat.com> Date:   Tue Jul 29 12:22:04 2014 +1000      remove unique from project id prompt  commit b833d7608cbddc6dbc8e82f5d6a9a07cbf280f79 Author: Patrick Huang <pahuang@redhat.com> Date:   Tue Jul 29 12:15:48 2014 +1000      rhbz1110627   handle when there is no server url in user config  commit cec96f250a5a8ff0ba9588986bb2a65a1d137f9e Author: Patrick Huang <pahuang@redhat.com> Date:   Tue Jul 29 11:51:39 2014 +1000      refactoring  commit 3c4f815f66d48fa539df07606091435a0939d2d5 Author: Patrick Huang <pahuang@redhat.com> Date:   Tue Jul 29 09:15:46 2014 +1000      rhbz1110627   rename method and static import  commit f9e57f8d5fb1de5dd0bdc29f32a5ebc14b64d32c Author: Patrick Huang <pahuang@redhat.com> Date:   Tue Jul 22 08:48:25 2014 +1000      rhbz1110627   refactoring  commit 5909e153ad6fa058e672a994b7b756990b62a628 Author: Patrick Huang <pahuang@redhat.com> Date:   Mon Jul 21 16:03:24 2014 +1000      rhbz1110627   extract methods in UserConfigHandler  commit 04286baa5eab756dc9d025ebbf391046537db253 Author: Patrick Huang <pahuang@redhat.com> Date:   Mon Jul 21 15:58:43 2014 +1000      rhbz1110627   refactor project  source and trans prompt  commit cdf0efc53baeac5192484c7d45548161d539785d Author: Patrick Huang <pahuang@redhat.com> Date:   Mon Jul 21 15:15:39 2014 +1000      add copyright to files  commit d65ed059d8558ab08bca3baa4da21c084110bf98 Author: Patrick Huang <pahuang@redhat.com> Date:   Mon Jul 21 15:10:47 2014 +1000      rhbz1110627   extract methods in ProjectConfigHandler  commit 65a437ddda8afaee24f3880410e53a0982ea7055 Author: Patrick Huang <pahuang@redhat.com> Date:   Mon Jul 21 15:08:35 2014 +1000      rhbz1110627   extract methods in InitCommand  commit c6dbf0b40ef1471ab3b8980d17c8c471561954cc Author: Patrick Huang <pahuang@redhat.com> Date:   Mon Jul 21 14:40:38 2014 +1000      remove UpdateChecker from production code (pending story and RFE)  commit 0fa26af4e5a4068ad5bd5ccbf9c3b92a4c85f4b0 Author: Patrick Huang <pahuang@redhat.com> Date:   Mon Jul 21 14:32:49 2014 +1000      rhbz1110627   missing resource key will log an error  commit 471e5863a49253235892f2f118f4614f7962f0ec Author: Patrick Huang <pahuang@redhat.com> Date:   Mon Jul 21 14:23:40 2014 +1000      rhbz1110627   rename methods in OptionMismatchChecker  commit 19c50ebebd8bc60935deb72469b99268ee973634 Author: Patrick Huang <pahuang@redhat.com> Date:   Mon Jul 21 14:15:25 2014 +1000      rhbz1110627   rename class Mode to DisplayMode  commit ac0cb550bff27c6c647091b8be2815f1299e8c06 Author: Patrick Huang <pahuang@redhat.com> Date:   Mon Jul 21 14:09:07 2014 +1000      rhbz1110627   rename class  commit 8804142bb0c9474bfc4f811da169df2bae7cb204 Author: Patrick Huang <pahuang@redhat.com> Date:   Mon Jul 21 14:07:27 2014 +1000      rhbz1110627   refactor InitCommand: extract method etc  commit 51a6f99f27e55e207cb3f43e0602eb1e9a0553ef Author: Patrick Huang <pahuang@redhat.com> Date:   Mon Jul 21 14:00:19 2014 +1000      rhbz1110627   refactor class that expects user input  commit 9db3a2696f6dcb2e0de58b2276e804d91ade5a09 Author: Patrick Huang <pahuang@redhat.com> Date:   Thu Jul 17 11:55:58 2014 +1000      rhbz1110627   add color output and change some messages  commit 85f9c01a297683251383f7725fc63c831b19ee85 Author: Patrick Huang <pahuang@redhat.com> Date:   Wed Jul 16 09:38:05 2014 +1000      rhbz1110627   able to filter project in long list  commit a8fa92300fee028019a20e2b45acd76aa3d3559f Author: Patrick Huang <pahuang@redhat.com> Date:   Fri Jul 11 13:09:08 2014 +1000      rhbz1110627   check key availability in resource bundle  commit 99a93043201a3ffe34b2596292293de537861576 Author: Patrick Huang <pahuang@redhat.com> Date:   Wed Jul 9 15:51:01 2014 +1000      rhbz1110627   check if there is newer version of client available  commit 5fe89e2a7e90cb6fc15e7fa2906cf53b15c9daf6 Author: Patrick Huang <pahuang@redhat.com> Date:   Thu Jul 3 11:11:12 2014 +1000      rhbz1110627   externalize strings to properties file  commit e57037a32939e0b2629ebfebc56e38b0a9eb289d Author: Patrick Huang <pahuang@redhat.com> Date:   Tue Jul 1 13:36:48 2014 +1000      rhbz1110627   add init to ZanataClient  commit 8c0c01d3b7c8033651b8fa119b04c3add09dcc4f Author: Patrick Huang <pahuang@redhat.com> Date:   Tue Jul 1 13:36:23 2014 +1000      rhbz1110627   fix minor issues and print what s next suggestion to user  commit 60e557a46f9f6682b3054f32cba601f5137f6618 Author: Patrick Huang <pahuang@redhat.com> Date:   Tue Jul 1 11:28:57 2014 +1000      rhbz1110627   refactor and clean up code  commit 549f095f51d81686845c8ced7692b96600d6769a Author: Patrick Huang <pahuang@redhat.com> Date:   Tue Jul 1 10:53:38 2014 +1000      rhbz1110627   refactor to extract project and version prompt to separate classes  commit 769caf5c987988f8b13a3423e0ff7d19bdf9ce14 Author: Patrick Huang <pahuang@redhat.com> Date:   Tue Jul 1 09:32:06 2014 +1000      rhbz1110627   refactor extract project config handling to separate class  commit d001f2be0a906b1f9eb3ed4c228f42fede14edc7 Author: Patrick Huang <pahuang@redhat.com> Date:   Mon Jun 30 16:59:41 2014 +1000      rhbz1110627   refactor extract to separate class  commit 1f11d50717658730f027d1733dc0404e1619cca2 Author: Patrick Huang <pahuang@redhat.com> Date:   Mon Jun 30 16:37:16 2014 +1000      rhbz1110627   refactor test and mock server  commit 11c2d46b65a46d0ec297767e5fc5213644031bdc Author: Patrick Huang <pahuang@redhat.com> Date:   Fri Jun 27 15:59:06 2014 +1000      rhbz1110627   add init mojo as maven goal  commit 531f2cc2769b27ef74f7ba244c8ded383c3359c0 Author: Patrick Huang <pahuang@redhat.com> Date:   Fri Jun 27 15:57:29 2014 +1000      rhbz1110627   prompt user for trans dir  commit 96a86230847a230221a027a54500c9da66d7c41e Author: Patrick Huang <pahuang@redhat.com> Date:   Fri Jun 27 14:40:27 2014 +1000      rhbz1110627   use index number to select project and version  commit 49cb2b632dfc8633baf7d514d275e5b6ae6669dc Author: Patrick Huang <pahuang@redhat.com> Date:   Fri Jun 27 14:08:59 2014 +1000      rhbz1110627   src dir  includes and excludes prompt  commit 9061f89487e2a52cb3e400f2ff7a2982ac3c3fd7 Author: Patrick Huang <pahuang@redhat.com> Date:   Fri Jun 27 12:20:09 2014 +1000      rhbz1110627   refactor ZanataProxyFactory to allow not eager REST version call  commit 508ec9dd508f4e1768682806ddbc85361f24c588 Author: Patrick Huang <pahuang@redhat.com> Date:   Thu Jun 26 14:17:18 2014 +1000      rhbz1110627   add includes and excludes to zanata config  commit c48414a13da6cc787402d28a2ec3c3727b513691 Author: Patrick Huang <pahuang@redhat.com> Date:   Thu Jun 26 10:59:36 2014 +1000      rhbz1110627   pull up includes and excludes to project configuration  commit 2d1a9b34bd110b5b61b1ca419a1535510a60a194 Author: Patrick Huang <pahuang@redhat.com> Date:   Thu Jun 26 10:26:46 2014 +1000      rhbz1110627 rhbz1038852   add src dir and trans dir to zanata config  commit 31319e5ef9629e8b6393658a093c4a4f21661ac8 Author: Patrick Huang <pahuang@redhat.com> Date:   Thu Jun 26 09:13:45 2014 +1000      check for potential wrong src dir in podir project  commit 8e0595017a6d362a9edeb3f8a0d86be6d03cff84 Author: Patrick Huang <pahuang@redhat.com> Date:   Mon Jun 23 09:26:25 2014 +1000      rhbz1110627   create init command  commit c27ebac5da785fd3fc2f31c81212bbecdc9e9709 Author: Patrick Huang <pahuang@redhat.com> Date:   Wed Jun 25 10:17:02 2014 +1000      add friendlier message to inform user server is not up,extract
webUi fixes (JFG 510)  + pixel size of all control elements + css files for sessionPager  sessionDataGrid  + back end time column is sessionDataGrid + remove not used methods of services (cause new conseption of control) + add @Depricated to services and dtos that not used now (not seletes yet) + sort metrics in table as in tree if select all  or link processing,extract
Calculate absolute positions incrementally (prep work for pagination)   Light Cleanup   Fix bug where floats nested in floats could cause the outer float to be positioned in the wrong place,extract
Continued refactoring dels.,extract
newtools: added checks for native methods  support to make method abstract/non abstract,extract
updated flow latency analysis stuff. We now have an explicit report entry element for sampled latency. It is currently added by the component when it is sampling. This is separate from the processing latency. Will need to add it for the connection if the bus is sampling  i.e.  operates periodically. Added capability to generate report for Synchronous and Asynchronous. Synchronous does the reduced sampling latency by rounding up rather than adding the full sampling latnecy. It does so by adding the difference needed to round up.,extract
refactoring,extract
Add checkstyle,extract
Add ability to load default XML config file (with overrides),extract
Introduce field level metadata.  Changes include:  * Added Metadata (immutable) and MetadataBuilder to API. Opted to make these concrete objects (which the other builders are in fact not).  * Record extended with metadata get/set methods  * read/write path support for metadata     * for fields without metadata  storage format stays the same     * 3 bits of the prefix byte are used to indicate the metadata serialization version and at the same time the prescence of metadata (000   no metadata). See new class FieldFlags were it s documented.     * metadata not supported for versioned mutable fields (matter of saving implementation time on something that probably has little value)     * read always decodes the metadata (if this would be a problem  we can make loading metadata optional and/or do the decoding lazily)  * Added metadata to binary record serialization which goes over avro (bumped serialization version number),extract
code cleanup  • remove dead code • remove unnecessary else blocks • use StringBuilder in datePathWithRoot • add lastModifiedDateForFileInFramework variant for localized resources,extract
refactoring replace deprecated TreeNode constructor in TreeNodeServiceTest,extract
ERT.send(): Refactored and bugfixed wrt. return value and badarg argument list.,extract
refactored initial conditions,extract
Added epi report  https://www.pivotaltracker.com/story/show/49668467,extract
Added type conversion for constants. Optimized ReferenceCache.   Removed null check from ContainerImpl.getInstance(). Added Container.hasBindingFor() to provide comparable functionality.  Made Key public.  git svn id: https://google guice.googlecode.com/svn/trunk@5 d779f126 a31b 0410 b53b 1d3aecad763e,extract
Reactoring and pass unit tests.Add a new unit test for heal sessions.,extract
Added basic support for twist coordinates and conversion to their exponential format   fixed autocode,extract
Some refactorings for cleaner code.,extract
VIEW is now handled in up() as well  so fragments are cleared on member leave (https://jira.jboss.org/jira/browse/JGRP 800)   Added managed operations to clear the frag table,extract
And add the new app filter to the grouped activity page,extract
Fixed a bunch of issues.  Added metrics using Yammer metrics.,extract
"menu contains all the menu items from the precusor GUI  add """"Hide most frequent overlay"""" option to the view menu add """"Outlier Handling"""" option to the view menu change JMenuItems into JRadioButtonMenuItems when necessairy for the functionality add ActionListeners to those menu items where they were still missning  plus the skeleton of the """"performer"""" methods. ",extract
Added transient properties to BookMetaData. Method BookMetaData.setProperty allows the setting of a transient property. Merged SwordMetaDataLocator into MetaDataLocator. Moved SwordConstants.DIR_CONF_OVERRIDE to MetaDataLocator. Added missing CaseSensitiveKeys to SwordBookMetaData and ConfigEntryType. Added missing UTF8ArabicPoints to ConfigEntryType.,extract
Improve documentation explaining why decoding is being done when and where it is. Refactor individual logic blocks (fetching the ERAttachment  evaluating if a request is legitimate) into their own methods to make code more digestible and better encapsulated.,extract
Refactor OAuth workflow  Now pass the shared secret through to the REST/SOAP classes from each of the Interfaces. Add the new Auth methods to the AuthInterface class and remove the old methods. Implemented flickr.auth.oauth.checkToken and flickr.auth.oauth.getAccessToken. OAuth tested and working with existing application.,extract
fix for the bug in instance generator when using super interfaces and getting abstract method error.  adding a simple test case for the issue.  fixes  38,extract
add LastChangedServiceTest,extract
Refactor the auction loading code to not construct a new AuctionInfo object every time.,extract
adding response handlers   fixed bug where the workspace configuration processor would not append context paths,extract
Add the ability to specify a path in a cookie,extract
Added visitor,extract
add prettyPrint with Indent option,extract
Add Rules component and dependencies to AS 6 and 7 distributions,extract
Katta  Ashish |  1739 | Refactored SubscriptionService to have separate  methods of separate actions,extract
added several new features  e.g. sub fields  report output  and many more,extract
JCBC 755: implement rest of N1QL tutorial and adapt DSL  Motivation            Continuing work from JCBC 750  implementing rest of the steps from the N1QL tutorial into SelectDslSmokeTest  and adding missing operators or functions in the DSL along the way. Note that 3 steps make use of DML which will be covered later.  Modifications               Added remaining steps from tutorial to smoke tests.  GroupByPath can now directly use identifiers in String form.  Modified KeyPath so that distinction between a String constant key vs an identifier key is more explicit (constant keys: xxxKeysValues methods).  Added sum and distinct functions in AggregateFunctions.  Added DateFunctions (with strToMillis  datePartStr)  NumberFunctions (moved round there from Functions)  StringFunctions (with lower and substr).  In Expression  added x method to convert a statement  sub method to convert a statement as a sub statement between parenthesis  path method to construct a path from Expressions separated with dots. Added arithmetic operators add  subtract  multiply and divide.  Added a Case mini DSL for case and case search expressions (eg. CASE a.id WHEN b.subid THEN 1 ELSE 0 END).  Removed Functions class (all have been moved in xxxFunctions classes in the functions package).  Marked various DSL classes as @Experimental yet @Public.  Results         Except for tutorial steps where DML is used  all steps are covered by the SelectDslSmokeTest.  Change Id: I5a71614c6d8beb6a8de0b94c086d3c68c66bf91b Reviewed on: http://review.couchbase.org/50061 Tested by: Simon Baslé <simon@couchbase.com> Reviewed by: Michael Nitschinger <michael.nitschinger@couchbase.com>,extract
Setting/clearing enctype in invokeAction in addition to appendToResponse (form s appendToResponse will not fire in case we add ERXWOFileUpload via update container inside form).,extract
Improve behavior when connections are errornous. Add JMX counter for that and invalidate connections if they have errors,extract
(from Wonder 2.0) bunch of fixes/cleanups/etc to stream utils  including nio based file copying,extract
TFJ 582 add getRetweetedBy(IDs)(long statusId  Paging paging),extract
120  solving cyclic packaging dependencies  Moved Context (as inner class) to ConversionContext in model.common  corrected BuildIn to BuiltIn  all requested built in methods added,extract
Made reconnection more reliable and allowed changing back off time in case of JMS exceptions in JMSStreamDataProvider. Added test for JMSStreamDataProvider. Added dependency on Mockito.,extract
[NGRINDER 52] develop test report page  including server side and UI   add agent monitor chart,extract
new attributes added into schema: Value (with unit ) and observation date added into VmlObservation Generic observation element added  into ObservationTarget  JAXB implementation improved. JSON   XML roundtrip tested,extract
Added date information to change log lines.,extract
refactor LispMinibuffer,extract
Removed FieldData.valueTypes and createTypes. Added Link.links.,extract
Added API to prevent replacement of existing files during a copy,extract
Adding basic targeted pet functionality to spawnmonster,extract
added accessor for building shard dir,extract
added method that allows request parameters,extract
Enhanced tool palette composition functionality. Added Morph Activity/Gateway features.,extract
added overloaded remove for user specified timestamps,extract
Completes https://jira.duraspace.org/browse/DURACHRON 104: Add run to completion option to SyncTool UI,extract
Create generic insertion operation and unit tests,extract
Extract helper methods to separate classes.  Refactored towards Composed Method.,extract
Added basic support for mixin argument expansion   elipsis  288,extract
add unit test and fix resolveParentRef,extract
fredsa had some cleanup advice for the unpack goal in bug  8,extract
Implemented refresh tokens and additional validation for entities using the validation framework,extract
METRICS 2996: Add configurable obfuscation of JMS headers  attributes and/or properties,extract
Added URI parameters beyond those expected by the extension will be added to the bindings  146,extract
"Added the ability to set a message on every reward.  This message is only sent if the specific reward is non zero. In addition  fixed the following bugs:    ItemFactory didn t implement hashCode() and equals()  causing    the message system to not properly """"merge"""" similar actions.",extract
* Add sorting of calendar.txt and calendar_dates.txt entries by service id when writing to output   * Add additional manipulation methods to ServiceDate   * Initial entry for GenericMutableDaoWrapper   * Initial entry for GtfsEntityTransformStrategy   * Support in gtfs transformer for the new entity tranformation strategy,extract
(nobug)   Add compilation argument import support for  mfcu option     (enh)   During compilation argument import  add support for executing   the commands being intercepted by the compiler wrappers. Sometimes a   compilation failure causes the entire process to terminate early.,extract
easy way to generate link contract addresses in a graph,extract
* If number of substitutions of candidate type is zero  then this type is not removed as it seems to be a root type (fixes  12). * Conversion to plural form now features better property customisation check. * Fixed broken argument processing. * XML marshaller in Unit tests is now schema enabled. Added more XMLs. Added case for xsd:anyType. Improved line and branch coverage. * Updates README with respect to future release.,extract
Rewrote consumerLoop() a bit.  * Narrowed scope of try/catch around poll()  * Split off the dispatching into method processEvent  * ACK is now returned only if event was flushed  * rudimentary exception handling to deal with possibility of   handlers throwing exceptions.  currently we just log this   and continue on our merry way.  we re postponing figuring out   what to do if this happens until we have a concrete case   that can help inform our design decisions.,extract
Add tile copying and fix rendering tiles that are transparent,extract
Nearly everything should be functioning now! + Split the BlockGenerator into component parts for clarity. + Changed the behavior from using lists of helpers to reference holders.,extract
cleanup  locking  key paths now work as expected,extract
484359 Refactor marker resolutions and quick fixes  Change Id: Ibdcc4cf75cfbb4fd49c27ba3ce187cfb932c47cb Signed off by: Anton Tanasenko <atg.sleepless@gmail.com>,extract
Adding a debug setting to stage configs  Now you can store a stage configuration in a debug mode. This means that it won t be picked up and started by Hydra Core  but can still be read by RemotePipeline.getProperties(). This allows you to start the stage in your IDE with the settings configured in the repository.,extract
Minor additions to LZFDecoder (to allow passing offsets); additional sanity checks,extract
add support for short syntax with two type definitions   make sure that rules inside an if / else block have at least a dummy expression like () so that we know where a new rule starts   A 1 & B 1 [0x1 resolution 24][0x10801 resolution 18]   short form for   A 1 & B 1 [0x1 resolution 24 continue]   A 1 & B 1 [0x10801 resolution 18]  This no longer works: if (expression) then   {name ...}    [0x1 resolution] end as it was not clear if this means one ot two rules You can use if (expreession) then   () {name ...}    [0x1 resolution] end if one rule was meant or  if (expression) then   () {name ...}    () [0x1 resolution] end for two rules. Of course this makes only sense if expression is a very complex term.  git svn id: http://svn.mkgmap.org.uk/mkgmap/branches/if then@3850 25d90789 57f7 4ee0 8453 03a3dfeeeb22,extract
Base64 decoding after changes in step editor. Some minor refactoring with filters.,extract
"Rewrite substitution resolver  use explicit immutable ResolveSource  The immediate motivation here was to fix  177  which this does  but in this commit a couple of existing test cases are broken in a way which seems to relate to order of resolution and resolve memoization. So we need to layer on to this commit better solutions for caching and cycle detection to get rid of yet more mutable state.  The previous setup used a side effect based lookup table of """"replacement"""" values to conceptually modify the tree without actually modifying it. Unfortunately that setup was hacky and hard to reason about and  apparently  broken in cases such as  177.  This new setup actually creates a modified tree and passes it around explicitly instead of inside ResolveContext.  In this commit  ResolveContext still unfortunately has a mutable cache and a mutable table of """"cycle markers."""" Both of those in theory could also be replaced by simply modifying the tree.  The main downside to this commit   and to cleaning up the remaining mutable state   is that we re using Java collections which have to be copied wholesale for every mutation (they are not persistent functional data structures). This will have an unknown performance impact  though in a sane world Config.resolve() is not a bottleneck in anyone s production app.  Some other details of this commit:   * resolve concerns removed from peekPath in AbstractConfigObject    and relocated into ResolveSource  * recursive resolution removed from lookupSubst and moved to    ConfigReference  * new hasDescendant() method used only in debug tracing     it is grossly inefficient to ever call this full tree    traversal  * new replaceChild() method is inefficient due to Java    collections but could in theory be made efficient  * most complexity relates to always knowing the parent of    a node that we might have to replace  so we can walk    up replacing it in its ancestor chain  TODO in subsequent commits:   * fix failing test cases  * we cannot replaceChild if we are a descendant of ConfigConcatenation     but we probably (?) need to be able to; consider / fix this  * instead of memoizing resolve results in a hash table  just    continuously modify the ResolveSource to have the most recent    results  * instead of using the """"cycle markers"""" table  change the    ConfigReference to a cycle detector value ",extract
Added quote provider that extracts quotes from HTML tables  The feed provider tries to detect a table in the HTML loaded from the feed URL. Based on the column headers it determines the types to extract values from the table.  Issue:  114,extract
added uncast and array methods,extract
Added function executions element to gfe data namespace plus more cleanup,extract
refactored mouse clicks,extract
addLibraryToClassPath,extract
RecordBuilder: add special support for filling RECORD and LIST<RECORD> fields.   git svn id: svn+ssh://dev.outerthought.org/outerthought/lilyproject/trunk@5110 b80d95f8 e103 0410 bd55 e03a9dc29394,extract
OOZIE 3407 [tests] Cleanup TestPurgeXCommand (asalamon74 via andras.piros),extract
fixes and cleanups  some work on rent system,extract
TokenPerPagePrecreate for creating tokens in advance. Fixed NPE and trim() issues with protected methods property parsing.  TokenPerPagePrecreate allows use of per page token on first access  rather then using session token on first access. It only works in conjunction with JSTL tags and is designed mainly for better back button support. Default value is false(off).,extract
o code refactoring o changed error message to debug o improved error messages  git svn id: https://svn.apache.org/repos/asf/maven/archetype/trunk@925746 13f79535 47bb 0310 9956 ffa450edef68,extract
"  Added support for removing cursors;   Some UI related fixes  row labels were not always directly shown and   scrolled sometimes;   First approach for """"rainbow"""" colors on channels;   cleanups. ",extract
Added IRemoteEnvironmentinfo service and removed concat service.,extract
adding an automatic JSON endpoint for the READ verbs.   git svn id: https://svn.codehaus.org/enunciate/trunk/enunciate@166 c2b6a248 b21b 0410 9d80 82131e002806,extract
minor changes  TreeNode fixed bug in computing leftw & rightw  TreeNode rewritten drawTree()  UnionFindFind started working on Shiny things (TM)  UnionFindFind rewritten find methods  UnionFind* refactored/renamed some variables & enum types  UnionFindButtons disabled buttons during an algorithm s run  what to do: The term from TEA tomorrow!  Signed off by: Viktor Tomkovič <viktor.tomkovic@gmail.com>,extract
rsa additions,extract
Working on fixing the WizardSplitDockStation,extract
merged refactor to make cover cache use cache interface (fixes  101),extract
Add Secondary index to search by parents  Improve hadoop fs  ls by adding another secondary index to associate a parent path to a file path.,extract
Various bug fixes and test additions,extract
[core  client] Fix record count property default value in CoreWorkload  also refactor throttle method in client.,extract
"exploit new  sourcepath option   removed all """"guessing"""": no more guessing of members  classes and type casts (removed the corresponding compiler options too). The """"downside"""" is that all imports must be accessible and  parseable at compile time. This means that we will also need something like a  classpath before we can use this inside our maven plugin to resolve dependencies on Jangaroo libraries. The upside: jooc warnings should be taken seriously now! Splitted analyze() phase into scope() and analyze() changed parser to parse dotted identifier sequences as QalifiedIde and increased priority of new operator to be higher than dot: new a.b.c().d is now correctly parsed as dot(new(ideexpr(qide(""""a.b.c""""))) """"d"""") handled all code generation for qualified and unqualified ide expressions in Ide and QualifiedIde generateCodeAsExpr()   no more tree rewriting in DotExpr and elsewhere (i think we can remove the parent node slot in AstNodes and change the return type of analyze() to void code generation now adds the package prefix for imported identifiers and the $$private prefix for private static members. This should be more efficient (and less magical) than the access via  with . We should be able to remove the with statements now. renamed MethodDeclaration to FunctionDeclaration as it is used for both. added AST node for as expressions  [git p4: depot paths   """"//coremedia/jangaroo/"""": change   177049] ",extract
MCHECKSTYLE 193: add a complete set of control options for processing resources.   git svn id: https://svn.apache.org/repos/asf/maven/plugins/trunk@1540550 13f79535 47bb 0310 9956 ffa450edef68,extract
Wee! warnings cleanup,extract
Bring back the   noAdditions  option. This is useful for running constrained crawls  where the complete list of URLs is known in advance.   git svn id: https://svn.apache.org/repos/asf/lucene/nutch/trunk@450799 13f79535 47bb 0310 9956 ffa450edef68,extract
added second line of defense for invalid index,extract
CF 1034: clean up  refactor,extract
Add a @ProvidesInto{Set Map Optional} & MultibindingsScanner that allow users to annotate methods in a Module as elements that can contribute to a Multibinder  MapBinder  or OptionalBinder.               Created by MOE: http://code.google.com/p/moe java MOE_MIGRATED_REVID 86801706,extract
Refactor RasterProfile rendering code  Now the preview matches what is actually sent to the lasercutter. Before  the preview was calculated differently: The preview engraving was calculated with antialiasing off  while the actual lasercutter engraving was calculated with antialias on  which seemed to have no effect because RGB and not ARGB was used (???).,extract
Adds MultiPolygon GeoJson (de)serialization,extract
updated core tests that use DataSourceProcessor to use DataSourceAttribute.  One of the changes required was to change CreateMapPages to provide DatasourceAttribute as output instead of Iterable<Values>,extract
Refactor common logic. Don t write stdOut and stdErr xml attributes if empty  git svn id: https://svn.apache.org/repos/asf/maven/surefire/trunk@350029 13f79535 47bb 0310 9956 ffa450edef68,extract
refactoring for notifications,extract
Fixups of some DRY violations when parsing command line arguments  * Created StageCommandLineArguments class for parsing String[] args * Moved logic for stage creation from AbstractStage into a StageFactory * Other misc. refactoring + additional comments,extract
Split resolveLocation into multiple methods,extract
"Added """"reset users"""" action ",extract
added confirmation dialog for unsafed changes,extract
refactored dictionaries portlet to use wrappers instead of model,extract
Refactoring,extract
SC QCADOOMES 740 Refactored production balance  moved calculations from production records to production balance  included tpz and additional time in calculations.,extract
Created a fully working HandleSetter for eclipse  and refactored HandleGetter a little mostly to stuff common code into PKG.,extract
Splitting record scanner rest tests up into different test methods. Forgot to upgrade guava version  git svn id: svn+ssh://dev.outerthought.org/outerthought/lilyproject/branches/scanners@5456 b80d95f8 e103 0410 bd55 e03a9dc29394,extract
Implement missing byte[] extraction from ddb data.  Add test (and necessary updates to other packages) to confirm. Add @SafeVarargs to methods in DynamoDBQueryModelDAO. Other minor cleanup.,extract
Bug 226048  Add progress monitor to long runing secure storage operations,extract
Added PGP enhancements,extract
Added ability to set JMX attrs via probe.sh (https://issues.jboss.org/browse/JGRP 1390),extract
Update pom to use Joda 2.1  Draft of time zone parsing  Map between time zone names and UTC offsets  support for time zone parsing.  Only time zones in timezone.properties are supported  Tests for timezone parsing  cleanup imports,extract
init content was added,extract
add more consistency in the API,extract
MANT 14: Generate a build user.xml à la Eclipse  o Added an overwrite parameter in the mojo to overwrite the build.xml o Updated AntBuildWriter to generate build.xml (could be overwrite or not)  maven build.xml and maven build.properties o Using import task of Ant in build.xml so target could be override o Updated test case  git svn id: https://svn.apache.org/repos/asf/maven/plugins/trunk@449404 13f79535 47bb 0310 9956 ffa450edef68,extract
Lots of refactoring    Moved unit tests around    Added support for object expansion    Additional code clean up,extract
Added icons and startup screens; landscape ipad startup does not work; bookmark icon does not work,extract
Refactor ThreadLocalCleanUp and extract WarningThreadLocalCleanUp subclass.  44,extract
"Add timing metrics just around the HTable flush.  This is the corresponding patch to the """"tighter_hbase_timing_0.7"""" branch which added the same functionality to the stable 0.7 release. ",extract
"refactor output format of """"cluster list"""" ",extract
Added eval with InputStream,extract
[JBIDE 13531] added tests for EmbeddedCartridgeResource getUrl,extract
added methods,extract
adding colour coding to grammar line,extract
[shadowloader] added caching for jarfile content lookups.,extract
JSDK 110 As a SDK user I would like to avoid double posting manual journal entries via API added new public method supporting POSTing of GL journal entries with transactionID,extract
Adds ability to listen for activity on a retrieval operation using the RetrievalWorker.  Currently only chunk retrieval events are reported.  In partial resolution of http://jira.duraspace.org/browse/DURACHRON 168 (Ensure that bridge database connection stays alive during long data transfers),extract
"Cotinued item author view:  * Added """"view item state"""" to rendering * Removed separate allowSource/allowResult from DeliverySettings ",extract
[TEST] Add Unit Test for DSWDatasourceServiceImpl,extract
DF QCADOOMES 1963 QCADOOMES 1902 Refactored operational tasks and operational tasks for orders plugin  fixed NPE and problem with missing operation name.,extract
CheckPluginCommand refactoring,extract
OOZIE 1297 Add chgrp in FS action (ryota via virag)  git svn id: https://svn.apache.org/repos/asf/oozie/trunk@1477823 13f79535 47bb 0310 9956 ffa450edef68,extract
added all elements to ParameterEnum and associated stub classes,extract
PR: PLX 185  Check for all kinds of line endings so the manifest entries will not get corrupted.  Rewrote the writeValue method to use a StringTokenizer which improves readability and robustness.  Added testcase for mixed line endings.,extract
add possibility to add none cfml source file to a archive https://issues.jboss.org/browse/RAILO 2401,extract
Further updates to the Upload Tool. This splits the display into 4 panels that are displayed in succession  the first to accept connection info  the second to select content to upload  the third to show status  and the fourth to indicate process completion.  git svn id: https://svn.duraspace.org/duracloud/trunk@662 1005ed41 97cd 4a8f 848c be5b5fe45bcb,extract
Refactor CodeGenerator to facilitate the addition of backend jvstm common,extract
Refactored CrawlDbMerger. It should handle DB_UNFETCHED merges better,extract
added remove command to NBT utility,extract
"add optional parameter `source` to Get Table Cell Value Keyword  When source is set to """"model""""  text extractor won t try to get text from cell s component firsts and will get it directly from table model. When source is set to """"auto"""" (default) old strategy is used  i.e. extractor will first try to extract text from cell s component and then if this fails it will get it from table model. ",extract
Fixes paging numbers  padding on empty private group  and other minor items,extract
Synchronised check for adding submission to Submissions being processed set,extract
Add support for `readValues()` as well.,extract
Adds Polygon GeoJson (de)serialization,extract
Added test for views support  and fixed bug,extract
* Updated PreviewPanel * Improved open computer dialog * Added SchemaEditorDialog for future improvement of AddEditArchDialog,extract
Refactor HeatmapColoredLabelsDrawer and header   Paint selected and lead after cell painting in a single place   Fix MatrixLayers sort order on load from file   some sort improvements,extract
Code handled search config settings differently in different places. Refactored to use a single static method on SearchCommandParser instead. Also some javadoc.,extract
Changed  make  factory methods (e.g. IDFactory.getDefault().makeID) to  create  methods (e.g. IDFactory.getDefault().createID().,extract
Add GCM buffer (incl. test),extract
Applied refactoring of DiscoverableServer and Activator to HEAD,extract
SGF 593   Refactor failing client/server integration tests due to static port allocation.  (cherry picked from commit 6290d1ee0ccc29d5abda08f06de719343e1201f9) Signed off by: John Blum <jblum@pivotal.io>,extract
add initial support for debug logs,extract
Added support for extracting JSON objects and arrays from request bodies via helpers,extract
CandSession launch now handles bad assessments  * AOManSvc now stores nulls if the (Item|Test)ProcMap can t be initialised * CandSessionStarter sets new  exploded  property on CandSession if session can t be initialized * Added support for rendering an exploded session.,extract
Even more performance issues fixed. I do not guarantee there are no bugs in this build ;). Status of what else needs to be done will be assessed later on. What has changed:  1. If EVERY protection is inside of the cache  it is safe to assume that any block NOT in the cache  IS NOT in the database.    We leverage this fact heavily in this build to give a significant boost to performance. 2. Caches. Cache ALL the computations. Numerous caches have been added in various places where specific points of bad performance    was located at. These caches generally only store computationally expensive calls; overall this is also significant after the    caches are nice and toasty. 3. Modules   before  LWC s own module system would broadcast events to every registered module. This added a overhead of about    1k nanoseconds per module  if they didn t override the method. This has been changed to detect at runtime what methods    they have overrided and then ONLY send events to modules that have them overridden. We could have modules register what    events they use but this would break backwards compatibility with plugins that hook into LWC. This uses reflection but    is all done on startup so the overhead is minimal. The gains is fairly large and worthwhile.  There is still a potential to shave off even more precious cpu cycles but this will be assessed further once initial results are in.  For scope  here is some example values for events: timing is in nanoseconds   Event  |Before | After| Redstone |  22k  |  3k  | Interact | 100k  | 46k  |,extract
Make adding metadata fields in SearchResult optional,extract
Refactor to make use of Java NIO.2  also we now buffer I/O to improve performance,extract
https://bugs.eclipse.org/bugs/show_bug.cgi?id 370871   added LabelFeature functionality to all BPMN elements that have labels,extract
* preliminary undo support. * fixed minor bug in viewer focus change. * improved ImageUtil.scaleQuality(..) method (better icon quality). * fixed a minor bug with ROI polygon interaction (removing point while dragging). * added Sequence.calculateSize(..) method to help in calculating a distance / surface from a specified number of pixel. * search result producer are now sorted.,extract
"https://bugs.eclipse.org/bugs/show_bug.cgi?id 378265   added support for multiple <modelEnablement> profiles in plugin.xml and added jBPM """"full"""" and """"brms"""" profiles",extract
Refactored how server requests were built.  Now  requests may contain other requests  but the parameter mapping is only done in the main request and may  optionally  be ignored in sub requests.,extract
packers added to the netstream protocol,extract
JENKINS 31164: Configurable issue priorityId  typeId and actionIdOnSuccess  Motivation:  When Jenkins creates a JIRA ticket the priority and type ids are hardcoded and may break ticket creation as noted in JENKINS 31164.  Modifications:  Allow the admin to configure issue priority id and type id from the Jenkins job configuration. Allow the admin to configure actionId on success which allows the plugin to automatically resolve or close tickets.  Result:  Support for JIRA where the type ids are different and greater flexibility when setting up workflows.,extract
add more tests  update TestUtil,extract
Added Spout notifications for battle and match end as well as monument captures (and tweaked the flag capture ones). Turns out ChatColors work great OOTB with GenericLabel   yay. The War message feed at top left + notifications look awesome.,extract
For issues  adding multiple attachments and removing them works  partially resolving Issue:85 and Issue:86. Pressing add button does not retain the previously selected files in the ListView. Not working for documents.,extract
Simplified the DAO interface and added tests,extract
added nlp and imgur modules. rewrote major parts of the bot. can t remember it all  sorry.,extract
Code cleanups  reordering  and refactoring.,extract
Added new StatsDTelegrafWriter to support JMX attributes as tags,extract
"Support for """"file"""" clause when specifying entity type in """"add"""" operation.",extract
Added ProcessingQueue   Made ProcessingQueue.process() protected (should not be called from outside the class)   Added PUNCH_HOLE and CLOSE_HOLE events   Serializing state requests at the state provider (https://issues.jboss.org/browse/JGRP 1742)   Added hole punching to BARRIER   Correctly setting TCPPING.initial_hosts in unit tests   Added support for GET_CURRENT_VIEW after a state transfer has completed (called by the state requester)   JChannel.getState() now throws an exception if there s a timeout   Added tests for blocked threads to BARRIERTest   Punching hole for state requester/provider   Handling exception on CLOSE_BARRIER (https://issues.jboss.org/browse/JGRP 1742)   Discarding messages when BARRIER is closed (storing only last message); re delivering those messages when BARRIER is closed( https://issues.jboss.org/browse/JGRP 1742)   Not skipping BLOCKED or WAITING threads   Timeout on CLOSE_BARRIER if threads cannot be flushed   StateTransferTest now tests all (3) state transfer protocols   Fixed another bug in BlockingInputStream (also backported to 3.4.2)   BARRIER lets messages (unicast or multicast) with a SKIP_BARRIER flag pass   Added SKIP_BARRIER flag to Message   Removed barrier_closed: this is handled by BARRIER directly,extract
"Added the """"Delete Account"""" buton Sorted the listview Load database on startup ",extract
Add a retrieve() signature with params to all resources,extract
Add parameters when calling `pay` on an invoice,extract
added setPattern(),extract
lots of stuff added and lots of stuff changed. take care :),extract
Remove old bob format support. Add default directory s and files.,extract
improved overall code quality and added further tests,extract
Reworked access tag handling.  Should now do the right thing for combinations of access tags.  Also  removed built in handling of footway  cycleway  etc. and now relies on style file adding appropriate tags.  git svn id: http://svn.mkgmap.org.uk/mkgmap/trunk@939 25d90789 57f7 4ee0 8453 03a3dfeeeb22,extract
This makes the hover listener be added to the xhtml panel by default. Also improves the box searching code by testing if the parent of the deepest box is hoverable in the case where the deepest box is not.   Issue number: Obtained from: Submitted by: Reviewed by:,extract
Add MarshallingException,extract
Add executeMoveRunnerTest sub method,extract
Luka |  9 | Added smoke test to change password and verify all validation cases.,extract
"Release the database connection on suspend and acquire it again on resume of a transaction.  If on resume  the transaction is no longer valid  then the resume will fail.  Otherwise  the transaction is """"upgraded"""" to the current state of the world.  Add support for automatically initializing a root domain object on the first run of an application.  ",extract
[https://issues.jboss.org/browse/JBIDE 12620] added application name check back in again since we need to lazy load the list of applications anyhow.,extract
1657 Add Mappers.getMapperClass for getting the class of a Mapper,extract
Ability to customise reduction added to Hyperview,extract
Added support for version command to upload to gist.github.com,extract
Additions to remote service admin endpoint listener notification via ECF discovery,extract
More Task cmdline fun + JDBCTest fun + cleanup,extract
Added functionality to remove and repeal law documents,extract
added all stream,extract
Add package definition,extract
BVAL 90 added some more tests and made the code work with arrays  git svn id: https://svn.jboss.org/repos/hibernate/validator/trunk@15901 1b8cb986 b30d 0410 93ca fae66ebed9b2,extract
Improvements to assessmentResult generation:  * Items now generate a full assessmentResult * Added support for recording context/sessionIdentifier,extract
added get usage json for witness and set,extract
" Begun work towards better database schema 	 Added permissions tables for users and groups 	 Added members tables for groups  Started moving major SQL queries into JAR file resources",extract
mv class Code to package org.dcm4che.data dcm4che jboss sample: remove Startup flag for DicomConfiguration Singleton EJB DeviceService: add templates parameter,extract
Added support for multiple OAuth Services. Disabled the @Setted Producer for ServiceHandler It should be build thru a CDI extension to avoid creating useless beans.,extract
SOLDER 46 Add ability to get only writable properties to PropertyQuery,extract
minor internal refactoring,extract
Biome managing in World + addition in PluginLoader  Added a BiomeGenBase wrapper  we might not need it after all  it s not implemented in NMS yet at any rate.  PluginLoader will now try to look up Plugins from disk  when enabling the  to allow enabling of newly added Plugins.  World now contains setBiometype and getBiometype. Generally the whole biome data array can still be obtained from Chunk,extract
adding metadata links,extract
Added unit test to codewax s patch and fine tuned patch.,extract
Refactored the ArchiveBucketTest.  All tests are now green and they make sure that the directories created are removed.,extract
add unit tests,extract
Split Cache Analysis: Start with some experiments on Method Cache Persistence Regions  and some cleanup / documentation,extract
Cleanup ExpandableField  keep Charge.getReview  Charge.setReview backwards compatible,extract
add proxy pac support,extract
Sharvani Aravind |  1842 | Added functionality to check status of obd schedulers.,extract
Address Issue  52 (2 stage optimization) and Issue  53 (multi start too slow when run single stage). Made all NAF objective functions single stage. Refactored ObjectiveFunctionOptimizer for readability; changed all multi start optimization runs to first find a good startPoint array by running a DIRECT/BOBYQA optimization.,extract
Improvements to manager actions:  * Added explicit reimport / update for sample categories * Added resetUser() to DataDeletionService,extract
Add filesystem support to libvirt functionality    allow mapping of KVM host filesystem into the guest domain   refactor various Libvirt XML functions,extract
bug fix and cleanup,extract
Add metric filters.,extract
"Gave EXML its own Facet. This allows resolving component suite namespace URIs on import  and improves handling of EXML source files and generated artifacts. Not yet complete  but already usable. Also added an icon and the corresponding IconProvider for EXML files.  [git p4: depot paths   """"//coremedia/jangaroo/"""": change   171815] ",extract
"add """"super"""" keyword and main function generator ",extract
Add safe jdk flag for safer JRockit support,extract
Admins should be able to create accounts based on existing patients (https://www.pivotaltracker.com/story/show/62294396),extract
Added some more unit tests and trying to make relative paths work as needed for  50,extract
added async prop,extract
rest of the views added,extract
updated to new IOOS Milestone 1.0 template for TimeSeries  test cleanup/adjustment  updated template; code cleanup/commenting  adding new updated version of sensorML for describe sensor (just for TimeSeries right now)  attempting to fix observation insertion issue  updated describe sensor output for stations  adding base describer to allow for hook in writing missing/invalid values reports  added support for a reporting mechanism to report missing/invalid values  fixed issues caused by new describe platform output.  added support for trajectory  profile  and timeSeriesProfile data in the new describe sensor output  bug fix  various fixes and updates to integrate into tds,extract
Add populateGeneralTab method  Create separate method to create the controls for the general tab  leaving other setup in the existing createGeneralTab method.  Make destDirButton an instance variable so it can be created in one method and referred to in the other.,extract
Add Subject.isInstanceOf(Class) and .isNotInstanceOf(Class).               Created by MOE: http://code.google.com/p/moe java MOE_MIGRATED_REVID 73926833,extract
Fixes for ISPN 2836  This commit adds support for the new timeout API added in Infinispan 5.3  and adds error handling for exceptions thrown from MapReduceCapable.executeMapReduceTask(),extract
CDE 243   Adding unit tests,extract
o Refactored code to reduce complexity  git svn id: https://svn.apache.org/repos/asf/maven/plugins/trunk@684058 13f79535 47bb 0310 9956 ffa450edef68,extract
"SWITCHYARD 85: add notion of """"parent"""" to Configuration / Model hierarchies ",extract
fixed bug in the history manager added cursor support to the link listener   Issue number: Obtained from: Submitted by: Reviewed by:,extract
fixes  14: files are named after JTL results file again. Major internal refactoring of Writer structure  added separate tests,extract
PR: MNG 978  979  964 Submitted by: Johnny R. Ruiz III Reviewed by:  Brett Porter added parameters printSummary  reportFormat  and useFile to configure the reporting format.   git svn id: https://svn.apache.org/repos/asf/maven/components/trunk/maven plugins@293194 13f79535 47bb 0310 9956 ffa450edef68,extract
Fix bug 1514050: Make cluster list faster in large scale environment by: 1. Not to retrieve nodes list while cluster list without   detail. 2. Create indexes for foreign keys on table node  node_group  disk  nic.,extract
fix NPE in XClassRegexRule and added configuration celements.validation.xClassRegex.ignoreInvalidKey,extract
[ 2853632 ] Finish costing variances https://sourceforge.net/tracker/index.php?func detail&aid 2853632&group_id 176962&atid 934929   * Cost Variances are calculated only on order close. MO reevaluation on the end of the period needs to be done. All new code will work ONLY if AD_Client.IsUseBetaFunctions is activated. * refactored Doc_CostCollector and broke createFacts in much more small methods * CostDimension   introduces S_Resource_ID property   git svn id: https://adempiere.svn.sourceforge.net/svnroot/adempiere/branches/libero@10124 f8025ce2 341d 0410 ac50 9b82273f5115,extract
Add delayed option to insert,extract
finished replication refactoring,extract
JCBC 1164: Add tracing to remove.  Motivation            This changeset refactors remove to include support for tracing and spans.  Change Id: I5cc8cb1a491e139a382d2d824d7185a6bb2b7b7e Reviewed on: http://review.couchbase.org/90045 Reviewed by: David Nault <david.nault@couchbase.com> Reviewed by: Subhashni Balakrishnan <b.subhashni@gmail.com> Tested by: Michael Nitschinger <michael@nitschinger.at>,extract
added createMonitor() method  so it can be overridden in subclasses,extract
Refactored broadcast to allow for node selection.,extract
IsmAvatar Commit 1.6.0.1.2 (Alpha)  Updated CustomFileFilter to handle files without extensions >Does not use a for loop Fixed IndexButtonGroup.setValue for non cumulative values >Changed from MapTable to array (stable  but non variable size) Updated SoundFrame >Load and Save buttons now load/save sound data (untested) >Layout  GUI  etc (merged filename label and value) >>addGap method added   maybe extract to ResourceFrame? >Appended space to messages.properties SoundFrame.FILE value Updated LGM to display the working filename >Updated Listener >>Removed some Listener debugger code for JFileChooser (default folder) >Added Quadduc to credits in LGM >Upgraded MarkO from a hole to jerk : )  git svn id: https://lateralgm.svn.sourceforge.net/svnroot/lateralgm@43 8f422083 7f27 0410 bc82 93e204be8cd2,extract
wcet/IPET: Use presolver (good speedup)  add support for solving the relaxed problem,extract
refactor: deprecated MavenPluginActivator getPlexusContainer  Signed off by: Igor Fedorenko <igor@ifedorenko.com>,extract
Added Vob paths to manually enter paths to the VOBs Added Dynamic view support for using existing dynamic views Added Dynamic and Snapshot clear tool instances   git svn id: https://svn.dev.java.net/svn/hudson/trunk/hudson/plugins/clearcase@5852 71c3de6d 444a 0410 be80 ed276b4c234a,extract
Add flags to the TSQuery class to show stats  summaries and the original query with results. Also modify it to use the new TsdbQuery compilation method,extract
Added test for case where only an area of interest is defined.,extract
checkpointing work in progress... need to add migration and strip out old api cruft,extract
Added implementation for PluralAttribute.,extract
Many modifications to code base to make some things a bit cleaner. Added ability to identify protocol refs on mapping via their type  so now the user will see Protocol REF (sample collection) for example. This means that the Protocol REF mapping can also be saved for the next time as well. Closes  124 Added ability to generate the protocols automatically on doing a mapping  including automatic addition of the protocol name  type & Parameter Values. Closes  53  Tested all and appear to be working fine. Further testing required before release of version 1.6.,extract
"Rework status widget to use styling  be smaller.  Use a custom widget extending from CLabel to allow styling to kick in while keeping the ability to do custom text shortening (Eclipse by default replaces the middle of the label with an ellipsis).  The old widget was also using a fixed width layout to stop the """"recording"""" text from being shortened / hidden  but this has the result that other status items might be squeezed. We now use 3 widgets: a seperator  the mode widget and the """"recording"""" widget  of which the last one is not always added to the status bar.  Fixes  499  alternative fix for  322 and possible workaround for  357. ",extract
Logging added,extract
38: Added atLeast support. Implemented concept of different await strategies. Added basic tests for atLeast method.,extract
SC QCADOO 175 add restrictions  paging and orders to GridComponent,extract
SC QCADOO59 add views for pdf,extract
Extension and cleanup in KillBillHttpClient: * Remove deprecated methods (simplifies code) * Add ability to stream results into an OutputStream    streaming apis,extract
"Application             * entirely reworked the """"Sequence / Image operation"""" band :     new sequence resize feature.     new C/Z/T operations.     new color conversion feature.     general improvements. * better plugin error report. * better colormap preservation when switching from 2D to 3D canvas. * better Icy to ImageJ ROI conversion. * minors improvements here and there. * modified ROI2DPoint so it now intersects point and do not contains it (more consistent with other ROI). * fixed a minor bug in ROI.getBooleanMask() method. * fixed a minor bug in ROI2D.contains() and ROI2D.intersects() methods. * others bugs fixes.   Developer           * Loader :     added methods to hide the progress bar.     added  getMetaData(File file)  method to retrieve the metadata of an image file.     added  loadImage(File file  int z  int t)  method to load a single image from multi image file. * added IcyBufferedImage.copyData(src  int srcChannel  int dstChannel) to only copy data for a specified channel. * added ExcelTable component to display excel type table. * added abstract method  getViewComponent()  to IcyCanvas so we can always retrieve the display component in a Canvas. * improvements on  SequencePreviewPanel  and  SequenceRangePreviewPanel  components. * added IcyBufferedImageUtil class (general IcyBufferedImage tools). * added methods to SequenceUtil class. * fixed cursor preservation on Canvas2D. * added MainInterface.getSequences(String name) to retrieve sequence by name. * fixed a bug in ImageDataIterator. * added a command line option to remove splash screen. * lot of refactoring and source reorganisation (check deprecations).",extract
Code refactoring  calculate super hash with bytes array,extract
Improve javadoc  remove empty tags. Add new addAnimation method.,extract
frame parameters  tests set up changed  buffer refactored a bit  removed my NotImplementedException,extract
added first draft of multi tap recognizer,extract
extract code to additional function,extract
HAMA 946: Refactor graph package  git svn id: https://svn.apache.org/repos/asf/hama/trunk@1674779 13f79535 47bb 0310 9956 ffa450edef68,extract
CAP 59 Updating AJAX controller to output JSON formatted events separated by date.  This change introduces support for displaying events across multiple days  as well as adds Fluid based rendering of the event list.  git svn id: https://source.jasig.org/portlets/CalendarPortlet/trunk@22784 f5dbab47 78f9 eb45 b975 e544023573eb,extract
sync optimize: reverts back to using SyncConfigParser for params to ensure that all defaults get set correctly (+1 squashed commits)  Squashed commits:  [6d7f746] sync optimize: captures transfer rate in the SyncTestEvent  and provides a toString to print status (+1 squashed commits)  Squashed commits:  [10cf96e] sync optimize: Adds test for SyncTester,extract
NUTCH 2589 HTML redirections are not followed when using parse tika   extract meta refresh redirects from DOM tree normalized by Tika   add unit test to check whether meta refresh redirects are   extracted and parse status holds the redirect target,extract
Refactor long method createArchitecture(),extract
[AESH 492] Added double dash as a marker to signal all values after it are argument values,extract
ModelAccess.getFieldValue with BaseObject added,extract
A major change. Added support for multi level query plans with measuring time in any of the following modes: None  Storm throttling  Send and Wait and Manual Batch.,extract
https://sourceforge.net/tracker/?func detail&aid 2863947&group_id 176962&atid 934929 Refactor to create Manufacturing Order based in Make To  git svn id: https://adempiere.svn.sourceforge.net/svnroot/adempiere/branches/libero@10307 f8025ce2 341d 0410 ac50 9b82273f5115,extract
LispSubroutine: evaluate refactored; all tests pass now,extract
add 100 continue support for http2 server and client,extract
Added intercept() to ContainerBuilder. Hid ConstructionProxy  ProxyFactory  etc. Removed intercept package. Added query package. Started Struts 2 plugin and example.  git svn id: https://google guice.googlecode.com/svn/trunk@111 d779f126 a31b 0410 b53b 1d3aecad763e,extract
"Refactoring: extracted reusable OutputSinkItem helper class to collect and refresh all compilation results.  [git p4: depot paths   """"//coremedia/jangaroo/"""": change   177610] ",extract
Proper recursion limiter  and code cleanup,extract
Renamed OsgifyDependenciesPackager  > Repackager; Added RepackagerTest,extract
Add TLS support,extract
ENUNCIATE 161: add option to override subcontext  git svn id: https://svn.codehaus.org/enunciate/trunk/enunciate@407 c2b6a248 b21b 0410 9d80 82131e002806,extract
Add a simple server for the JBTool  that can respond to simple requests.  So far the only two requests that are understood are to retrieve an item number s XML  and to shut down  but more is straightforward to build.   git svn id: svn://svn.jbidwatcher.com/jbidwatcher/trunk@671 b1acfa68 eb39 11db b167 a3a8cd6b847e,extract
Some refactoring in MultiValue Object Editor; start of ioSpecification custom property editor   simplify!,extract
implemented DefaultAttributeBuilder.addAttribute,extract
"Straightforward translation of FileMover to use java.nio.file.Path.  For the most part  just replace everything related to the moving of files  to use the nio equivalent.  This mostly applies to FileMover and FileUtilities.  Java makes it very easy to go back and forth  so for now  UIStarter and FileEpisode are still kind of """"based"""" on java.io.File  and just use File.toPath() and Path.toFile() to go back and forth.  Other changes:   try to clean up the progress label no matter what happens; previously it would sometimes be left behind as a gray blotch   change areSameDisk method to use FileStores; add javadoc comment about Paths needing to exist   FileUtilities.moveFile no longer happily overwrites its destination     It s true that we already checked that the destination file does not exist in UIStarter  when we re building the list of moves to do.  But things may have changed by the time moveFile gets around to running  especially if we have two files in the source location that map to the same destination file  creating a race condition.     I still don t think we can truly guarantee that no race condition can cause file loss  but it s far less likely now   use our logger in moveFile  rather than the gjt logger   use try with resources instead of IOUtilities.closeQuietly   eliminate canStop argument to moveFile  since we always passed in true ",extract
Adds the initial implementation of durareport storage reporting. More tests need to be added  but it is functional. After initialization  it will start a storage report and store it in the x duracloud admin space. Once the first report is complete  it will be available at http://host:port/durareport/storagereport (until there is a report  that URL will respond with a 404). While waiting for the report  you can GET http://host:port/durareport/storagereport/info for status. No scheduling is currently in place  but new reports can be kicked off with a POST to the first URL.  git svn id: https://svn.duraspace.org/duracloud/trunk@413 1005ed41 97cd 4a8f 848c be5b5fe45bcb,extract
Added more command line options for Stic.,extract
Added check for logged user. Added behavior for storing data during tab change for repeatable fields and autocompletable fields. Weather and temperature fields must be enhanced as well.,extract
Code cleanup,extract
refactor menu creation,extract
Refactor construction of BeansXmlImpl,extract
Bugfixes  additional actions  git svn id: http://svn.javaforge.com/svn/DockingFrames/trunk@303 3428d308 0d2e 0410 b3d4 94d0fefcacdf,extract
Add JRebirth Thread (to improve),extract
Added support for perspectives in Common for toolbars  added tutorial as well.,extract
minor refactor,extract
handle redirect correct. create all gems for the dependency hull,extract
Added instant submission feedback (written in DB),extract
Addition of ability to shutdown vms added to nimbus admin,extract
add support for dragging files into the viewer,extract
Bug: 473928   ClientState.checkForActivity() does not attach callback to IMqttToken before it is placed on event queue  Created ClientComms.checkForActivity(IMqttActionListener pingCallback) to pass the callbacks through to ClientState.checkForActivity which then attaches them to the token before it is added to the tokenStore. Also modified AlarmPingSender.onReceive to create the callbacks before requesting the token from ClientComms.checkForActivity.  Signed off by: James Sutton <james.sutton@uk.ibm.com> Change Id: I1a6a4e3cfe6bd58880e3e760d6809a80e67d45ce,extract
Extract generic octal formatting method to simplify code and eliminate array copies Change leading padding to zeroes as that is more compatible (and required for Posix)  git svn id: https://svn.apache.org/repos/asf/commons/proper/compress/trunk@760737 13f79535 47bb 0310 9956 ffa450edef68,extract
add support for signed commits   add support for required number of reviews,extract
NXP 9290: refactor route import tests to have an exploded zip in the sources  fix tests,extract
[2840048]   Apply ABP to VHRActionNotice   use M classes instead of X_   use cached get() instead of new()   fix wrong comments   refactor duplicated code  git svn id: https://adempiere.svn.sourceforge.net/svnroot/adempiere/branches/libero@9959 f8025ce2 341d 0410 ac50 9b82273f5115,extract
splitting up building the hits list,extract
"Added a """"compact"""" option to the GraphSONUtility #278",extract
added list of imported theories in Prolog output. Does not seem to work yet.,extract
Make line address parsing generic (utility method) so I can reuse it when parsing destination address for copy/move lines.  This is a further enhancement on  188.,move
removed usage of the deprecated method Collection.keys(),move
327 Move MethodRetrievalProcessor allEnclosingElementsIncludeSuper to Executables getAllEnclosingExecutableElements and replace any Elements getAllMembers calls with it (to create a fixed order of property mappings),move
Move send/receive code from SMTPSession to TextProtocolTester  This moves the protocol independent send/receive code from SMTPSession test to TextProtocolTester reducing some of the duplication. This also removes the final QUIT command and the check for the connection teardown etc. because TextProtocolTester can't handle that at the moment.,move
HH-77165 move DataSourceFactory to nab-datasource,move
BalajiN | #584 | Moving provider alert requests to seperate class,move
Correct interpretation of optDivide_oneSide  and move long-side calculation into RectangleValue  for future use there.,move
Remove FailureStrategyTest  as FailureStrategy is now a fully-abstract class with no behavior to test. Moved the singular test in that class to a more logical location.  ------------- Created by MOE: https://github.com/google/moe MOE_MIGRATED_REVID=158783832,move
Reorganize TermApi and further move list functions to PrologLists.,move
SC#QCADOOMES-468 samples properties moved to mes-application/conf/,move
Massive refactors. This list isn't complete  but should give you an idea:  A) many things in lombok.eclipse moved to lombok.core to enable reuse with lombok.javac.  B) lombok.javac works now similarly to eclipse's model: We first make big ASTs that are bidirectionally traversable  then we walk through that for annotations.  C) Instead of getting an annotation instance  you now get an object that is more flexible and can e.g. give you class values in an enum as a string instead of a Class object  which may fail if that class isn't on the classpath of lombok.  D) sources to the internal sun classes for javac added to /contrib.,move
HV-461 Moving TestUtil assertion methods into a new class named ConstraintViolationAssert.,move
Blank signs bug fix  doesn't compress chunks that are not in active chunks  replaced worlds onLoad  uses player move events to track player location  created ReflectUtil to handle field transfers,move
Enable Direct I/O parallel roll-forward.  * `com.asakusafw.directio.<ID>.threads.commit=<N>`   * max number of threads for moving files in roll-forward operation   * default: `1` (single-threaded),move
- moving lotsa stuff from ERXUtilities->ERXXXXUtlitities - added and fixed the accompaniying deprecations,move
Easier dynamic post-processing of static assets by moving inner class' serve method up to AbstractResourceHandler.serve so it can be overridden more easily.,move
#684 - [WIP] Integration tests moved to separate module with Junit 5 (#688),move
#327 Move MethodRetrievalProcessor#allEnclosingElementsIncludeSuper to Executables#getAllEnclosingExecutableElements and replace any Elements#getAllMembers calls with it (to create a fixed order of property mappings),move
Renamed HttpAsyncClientWithFuture to FutureRequestExecutionService; moved implementation classes to o.a.h.impl.client package  git-svn-id: https://svn.apache.org/repos/asf/httpcomponents/httpclient/trunk@1463471 13f79535-47bb-0310-9956-ffa450edef68,move
introduce UserProperites class and add / move tests,move
MDEP-59: updated dependencies to get the new unarchiver for rar. Had to move around the tests to avoid new heap size issues.  git-svn-id: https://svn.apache.org/repos/asf/maven/plugins/trunk@547483 13f79535-47bb-0310-9956-ffa450edef68,move
fixed checkpoint logic  moved checkpoint creation condition to history,move
Fixes  clean-ups  and getting tests that were moved here to run. Eclipse launch working. Tests pass and app exits.,move
- TP: moved version checking from handleSingleMessage() and handleMessageBatch() into receive() - TP implements both receive(InputStream) and receive(byte[]) [https://issues.jboss.org/browse/JGRP-2165] - BaseServer discards length bytes if no receiver callback has been installed - TcpConnection now doesn't create intermediate buffer  but passes the input stream directly to the receive() callback - GossipRouter/RouterStub now implement both receive() callbacks - PubClient/PubServer now implement both receive() callbacks - RoundTrip.receive() never used correct offsets to read data,move
Display in view columns and tables from the query  In the view display columns and table ectract from the query. - add an sql parser - model modifications    - move Columns reference from AbstractTable to Table    - add new class ViewElement    - in View add references: columns and tables,move
o Extracted BooterSerializer from SurefireBooter  Extracted an interface for directory scanner. Minor refactorings with no functional change.  All this is initial footwork to get SUREFIRE-141 moving. It looks like it's going to be quite a journey  git-svn-id: https://svn.apache.org/repos/asf/maven/surefire/trunk@1035052 13f79535-47bb-0310-9956-ffa450edef68,move
Updated lib and Action code in GmObjectFrame and TimelineFrame  * Moved getLibTabs to GmObject (Timeline calls it from there)  * renamed getLibTabs to makeLibTabs  * Created addActionPane in GmObject (timeline calls it from there)  git-svn-id: https://lateralgm.svn.sourceforge.net/svnroot/lateralgm@98 8f422083-7f27-0410-bc82-93e204be8cd2,move
"its own module""",move
New files  or files moved from other locations,move
#310: Moved filtering into helper class PropertiesFilterer with test.,move
Refactored ClientFactory and OpenSampleHandler  - Separated interceptor chain within ClientFactory into a ClientPersister   and the plain XmlSerialization - Removed factory method for ProgressMonitorInputStream in ClientFactory;   used alternative constructor instead - Added tags to ignore non-translated strings - Moved TokenReplacingReader to name.abuchen.portfolio.util package - Added paragraph to about.html with TokenReplacingReader - Added mwhesse to contributors in AboutDialog - Formatted translation files with resource bundle editor  Issue: #224,move
Updated project to reflect the move of some classes to an external MLCL library,move
Improved loading of metadata packages * Listing of packages moved into XML file (packages.xml) * All metadata files moved into a subfolder in resources * Unit test for metadata package loading working with its own test package,move
- correction:  don't convert to degrees twice in bearingToOnGreatCircle() - remove debug code - move common code to calculate shortestDistToLineSegment into Coord - improve unit tests  git-svn-id: http://svn.mkgmap.org.uk/mkgmap/branches/rhumbline@3323 25d90789-57f7-4ee0-8453-03a3dfeeeb22,move
[PAXWICKET-144] Start extraction by moving injection factories into own namespace  Signed-off-by: Andreas Pieber <anpieber@gmail.com>,move
Created AjaxSeleniumProxy for obtaining AjaxSelenium thread local context; moved unsupported Selenium API methods from TypedSelenium to UnsupportedTypedSelenium,move
o Refactoring: move adapter methods from the XML parser class to its own class.  git-svn-id: https://svn.apache.org/repos/asf/maven/plugins/trunk@1053970 13f79535-47bb-0310-9956-ffa450edef68,move
Refactored lazy creation of securities during import,move
SC#QCADOOMES-740 Refactored production balance  moved calculations from production records to production balance  included tpz and additional time in calculations.,move
NXP-13326: move WebDAV files around,move
Continuing refactoring for #130. It is moved to new system and tests are passing. No new tests have been created yet and it is still messy.,move
o Refactoring: move the downloading of tickets from Trac to its own class.  git-svn-id: https://svn.apache.org/repos/asf/maven/plugins/trunk@1054097 13f79535-47bb-0310-9956-ffa450edef68,move
pull methods getRecorder() and makeCrawlURI(String) into ModuleTestBase  and move ModuleTestBase into heritrix-modules so that CrawlURI is available,move
wcet: move some utilities to MiscUtils  fix minor bug in report generation,move
#215 : moving joda code from the oracle extension to the oracle-joda-time extension,move
Big Refactoring: * Added IoProcessor - a thin layer which is similar to the reactor pattern * Renamed AbstractIoFilterChain to DefaultIoFilterChain because of the abstract methods of AbstractIoFilterChain are now moved to IoProcessor interface * Moved common parts of various IoFilterChain implementations to DefaultIoFilterChain * Removed other unnecessary IoFilterChain implementations * Added IoSession.getProcessor() so that DefaultIoFilterChain can access the associated IoProcessor * Extracted interface from SerialSession  and all the implementation goes to SerialSessionImpl    git-svn-id: https://svn.apache.org/repos/asf/mina/trunk@576070 13f79535-47bb-0310-9956-ffa450edef68,move
B-59299 - Refactoring Categories  - Added PrefixColumnMap  Delimiter & AsCategorySet parameters to JdbcFeedSource & JdbcFeedPublisher to we can configure our categories through spring - Moved category refactoring code into atom-hopper project (no more cloudfeeds-atomhopper),move
Indexer: handle record delete. Move the create/update handle code into a separate method.   git-svn-id: svn+ssh://dev.outerthought.org/outerthought/lilyproject/projects/lily/trunk@4011 b80d95f8-e103-0410-bd55-e03a9dc29394,move
refactoring  introduce constants for elements  move some methods to PomHelper,move
Docs and reorg for bean utilities  * javadoc * refdoc * rename classes to accurately reflect purpose * move injectable method to reflection * flesh out the builders * package-info,move
Optimized user/search and user/read.  Restructured the user in both the database and the code. Optimized user/search and user/read by reducing their load on the database. Created a new database query that should be more efficient than the multiple queries being performed before.  Closes #201 Closes #203  Squashed commit of the following:  commit 15b7ec65280e25e59082224fd46285ac81b3f63d Author: John Jenkins <jojenki@cens.ucla.edu> Date:   Fri Mar 9 12:35:50 2012 -0800      Moved UserPersonal into UserInformation.      UserPersonal recorded the personal information about a user which was intimately tied to how users exist in our system. For that reason  UserPersonal is defined in UserInformation instead of being its own class. The overall structure has not changed.  commit 46e498a5634f35001e83c51b881fefa88f61c514 Author: John Jenkins <jojenki@cens.ucla.edu> Date:   Fri Mar 9 12:33:28 2012 -0800      Reworked and optimized user/search and user/read.      Restructured the code to correspond with the changes to the user and user_personal tables. Then  created a new way to query the information from the database. Finally  reworked how user/search and user/read validate and aggregate their data to reduce the database load.,move
Move calculateVisualOffsets method to StringUtils.  Also move test code  this doesn't really belong together with the block code.,move
* Moved screen capture code to separate class. * Created adapter for HttpCommandProcessor to deal with HTTP status codes.,move
Attached is a patch that does the following:  1) improves performance of commit/rollback by reducing number of round trips to the server 2) uses 7.1 functionality for setting the transaction isolation level 3) backs out a patch from 11 days ago because that code failed to compile under jdk1.1  Details:  1)  The old code was doing the following for each commit:    commit    begin    set transaction isolation level xxx thus a call to commit was performing three round trips to the database.   The new code does this in one round trip as:    commit; begin; set transaction isolation level xxx  In a simple test program that performs 1000 transactions (where each transaction does one simple select inside that transaction) has the following before and after timings:  Client and Server on same machine  old         new ---         --- 1.877sec    1.405sec   25.1% improvement  Client and Server on different machines old         new ---         --- 4.184sec    2.927sec   34.3% improvement  (all timings are an average of four different runs)   2)  The driver was using 'set transaction isolation level xxx' at the begining of each transaction  instead of using the new 7.1 syntax of 'set session characteristics as transaction isolation level xxx' which only needs to be done once instead of for each transaction.  This is done conditionally (i.e. if server is 7.0 or older do the old behaviour  else do the new behaviour) to not break backward compatibility.  This also required the movement of some code to check/test database version numbers from the DatabaseMetaData object to the Connection object.  3) Finally while testing  I discovered that the code that was checked in   11 days ago actually didn't compile.  The code in the patch for Connection.setCatalog() used Properties.setProperty() which only exists in JDK1.2 or higher.  Thus compiling the JDBC1 driver failed as this method doesn't exist.  Thus I backed out that patch.   Barry Lind,move
removed the enum and moved to a different way  may need to evolve this more but it seems to be ok for now..,move
rtweaver - move ClassVisitor functionality to an inner Visitor class,move
Renamed ProtocolContext to ProtocolTools to better reflect its purpose. Fixed remaining test failures by moving validation from the projection rules (where the model may not yet be complete enough) to a validation rule that is triggered on the projected local model,move
[HER-1605] Refactor parameterizable policies out of frontier * defaults.xml     update bundled profile for new chains refactoring * CrawlController.java     move to three processor-chains rather than one * Frontier.java     (loadSeeds) removed * ToeThread.java     delegate most processing-loop to FetchChain and DispositionChain * AbstractFrontier.java  WorkQueueFrontier.java     move policies/calculation out to processors * CandidatesProcessor.java     new processor for DispositionChain that runs every outlink through CandidateChain * CrawlStateUpdater.java -> DispositionProcessor.java     rename  expand to prep CrawlURI for frontier * FrontierScheduler.java     deleted; use CandidatesProcessor/CandidateChain * LinksScoper.java     deprecated; use CandidatesProcessor/CandidateChain/CandidateScoper     (only temporarily retained for ease of comparison) * CandidateScoper.java     simple single-URI scope-testing for CandidateChain * FrontierPreparer.java     precalculate all frontier-policies in CandidateChain  before scheduling * PreconditionEnforcer.java     ProcessorURI->CrawlURI; take on some prerequisite preparation previously deferred to elsewhere * ProcessorsReport.java     update for 3-chains of Processors * SheetOverlaysManager.java     (applyOverridesTo) moved here for broader use * CandidateChain.java  FetchChain.java  DispositionChain.java     role-specific subclasses of ProcessorChain (suitable for type-based autowiring) * CrawlURI.java     new fields/accessors of use to new chains/frontier * PostProcessor.java     deleted; skip-to-'postprocessing' is now skip-to-end-of-chain * ProcessorChain.java     take-on control loop formerly in ToeThread * ProcessResult.java     absorb ProcessStatus     eliminate problematic STUCK result,move
Various further tidying up changes  mostly to tests.  Includes updated versions of test Derby database and test data as formats are now stored in the template and not added and deleted with each test.  This is mandated by the move away from Hibernate coupled with the way existing vs new profiles are handled in the existing code.,move
- Half-finished preferences pane - displays but doesn't save back yet - Moved handling of xml preferences file from UIStarter to UserPreferences - Made the logger only print class name insead of whole package - Tidied AboutMessageDialog - Other insignificant changes,move
new_if_actor: Restored the old If actor in org.dawb.passerelle.actors.flow. Moved the new dynamic port If actor to org.dawb.passerelle.actors.ifdynaport.,move
o Refactoring: Move shared code to helper class.  git-svn-id: https://svn.apache.org/repos/asf/maven/plugins/trunk@1054791 13f79535-47bb-0310-9956-ffa450edef68,move
Structural link bendpoints  Finished implementation of source and target movements.,move
<Sri> #148 | 1) Moved field patientType from Patient to Treatment. 2) TreatmentStartCriteria now makes the check on current treatment to find patientType. 3) Removed superfluous latestProvidedTreatment method on Patient - replacing it with getter for already present field.,move
Remove circular dependency between DocumentLoader and JsonUtils  The public API for DocumentLoader is unchanged  but the protected static API for DocumentLoader has been modified to move all of the implementation methods and fields into JsonUtils,move
newtools: some cleanup on OptionGroup passing  added option to avoid removal of const fields  moved actual code remover into own optimizer class,move
Bump to 0.7.0-SNAPSHOT.  * Reintroduce shake detection as its own module. * Move YAFFS-specific directory sync to its own module. * Focus HTTP and I/O modules. * Queue module for `QueueFile` and future queue-related stuff.,move
Delete ListTest (ListSubject is long gone) and move the tests to IterableSubject. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=95326140,move
Safer Date / DateTime Parsing  All Date and DateTime parsing moved to the safeDateTimeConvert() and safeDateConvert() functions.  These handle errors by returning null.,move
removing redundant functions in ExtGraph (duplicated by sesame's GraphUtil).  movign implementations of util methods to Graphs.  ExtGraph now an interface  ExtGraphImpl the implementation  calls are jsut delegated to Graphs.  Adding two new Graph extensions  which ExtGraph implements IOGraph for RIO util methods and FunctionalGraph for supporting Guava functional classes.  Renaming StatementFunctions to Statements  adding additional functional utility methods on there.  Adding TestGraphs for testing the main Graphs funcionality. generally cleaning up ExtGraph/ExtGraphImpl,move
Fix ant tests - PMDTaskTest is moved partly to java  javascript and xml,move
Importer Plugins are r/w from settings.xml => just add classes to path and names to xml for new File Format DefaultPreferences moved to PreferencesManager => Lasercutter etc are saved in XML by default.,move
Non-deterministic mode switching moved to DEECo-independent library.,move
da: CotentWriter > ContentReader  move isolation support to Reader  selectWithRetry,move
Add SnapshotAcceptanceTest  mostly with tests moved from SnapshotTaskTest  These tests ended up uncovering a few bugs  which I've fixed.,move
REFACTOR moved image utility methods to own class,move
FACES-1898 Develop alloy:dialog  alloy:outputTooltip  and alloy:popover components (Added abstract tags in the components-ext.xml to avoid unnecessary copy/paste. Moved headerText and autoHide from hidden attributes to generated code by specifying <yui>true</yui> and a <yuiName> for both of them. In OutputTooltip changed the cssClass attribute to be the yuiName of the styleClass attribute. Overrode encodeCssClass() to utilize encodeNonEscapedString().),move
refactoring: move private method linesCutEachOther from MultiPolygonRelation into Utils  no functional change  git-svn-id: http://svn.mkgmap.org.uk/mkgmap/branches/split-shape@3787 25d90789-57f7-4ee0-8453-03a3dfeeeb22,move
- FRAG3: https://issues.jboss.org/browse/JGRP-2154 - Using FragTest to test both FRAG2 and FRAG3 - FRAG3: moved locking into FragEntry,move
HV-369: Moved collection of failing constraints to ConstraintTree,move
* Postgres impl is complete * added QueryOptionPostgresqlSearch to represent Postgres search option such as language * moved some function from JdbcDBUtils to JdbcPersistenceManager in order to be able to override them in PostgresqlPersistenceManager,move
observer/observable pattern for UI view; interfaces Moveable and MoveableContainer; refactoring (mega commit due to problems with remote branching),move
Blank signs bug fix  doesn't compress chunks that are not in active chunks  replaced worlds onLoad  uses player move events to track player location  created ReflectUtil to handle field transfers,move
HV-441: Moving createAnnotationProxy() to ConfiguredConstraint,move
Many changes / improvement on Image Loader (grouped importer  stitching..)  * AbstractImageProvider: replaced getImageByTile(..) by getPixelsByTile(..) and the method now support region loading. * Array1DUtil: added copyRect(...) method for easier 'rectangular' copy * ClassUtil: added getJarPath(Class) method * IcyColorMap: minor fix on copyFrom(..) method * IcyExceptionHandler: Error report now use the WebInterface method * ImageUtil: added getTileList(Rectangle region  ...) method * Loader:  - reworked getSequenceFileImporters(..) methods to be more generic  - moved file grouping in separate class  - reworked Sequence loading/building from multiple file.  - minor tweak on preview panel * LociImporterPlugin:  - added automatic Stitching if needed  - added Metadata level selection using 'flags' in open(..) method  - reverted 'groupFiles' property back to true by default  - implemented getPixelsByTile(..) method with region loading support  - added region loading support to getImageByTile(..) method  - added sub resolution support to getImage(IFormatReader  ...) method  - added sub resolution support to getPixelsInternal(IFormatReader  ...) methods  - added sub resolution support to getImageInternal(IFormatReader  ...) methods * Sequence:  - tweaked getOverlays(Class) method  - added getSelectedROISet(Class) method  - added getSelectedROIs(Class roiClass  sorted  wantReadOnly) method * SeriesSelectionDialog: now use SequenceIdImporter instead of SequenceFileImporter importer. * SystemUtil: getJavaVersionAsNumber() now returns JAVA version as major numbers (6.0xx  7.0xx  8.0xx  9.0xx  ...) * LUT: minor fix on setAlphaToOpaque(..) method * OMEUtil: added getNonNegativeInteger(int) method * PluginDescriptor: better information recovering for bundled plugin. * Documentation fixes,move
Add new deletion / upload endpoints  to allow deletion or upload of single pieces of content to youview. Also move youview feeds endpoints to processing rather than app servers.,move
Split QTIXMLReader up into a more general class and moved things around a bit,move
Added preferences and move support.   - Added initial preferences system. Currently stores move destination and season prefix string. Is backed by XML file persisted using Xstream. File is settings.xml located in the launch dir of tv-renamer. UI is needed to configure preferences.  - Added move support. Files are moved to directory set in preferences automatically. UI is also needed for this to show progress of move (when crossing boundaries) as well as showing source and destination directories.  - Bumped version to 0.5b2.,move
Fix #110 moving UtilityContext into separate contexts,move
TestInfoDTO was expanded with endTime and moved to FetchUtil,move
Bit of refactoring of the calculation classes: * KenyaEmrCalculation becomes BaseKenyaEmrCalculation * Methods of KenyaEmrCalculation that had to be public  moved to CalculationUtils * ART specific calculations moved into .art sub package,move
MapSubject.containsKey() now shows type names when toString()s are equal.  Note: Some static methods were moved from IterableSubject to SubjectUtils. These are completely unchanged.  ------------- Created by MOE: https://github.com/google/moe MOE_MIGRATED_REVID=156197978,move
[BACKLOG-16058] Changes UtilHtmlSanitizer function params and moves name sanitization from ConnectionService to ConnectionServiceImpl,move
Increased stability in the assertCurrentActivity methods as well as in pressSpinnerItem. Also moved waitForActivity to the Waiter class and some other minor refactoring,move
* support for plist and json responses  which (when used with default registration) can be accessed by using a .plist or .json extension * collapsed ERXAbstractXmlRestResponseWriter and ERXXmlRestResponseWriter by just moving the overriden methods to be the defaults in ERXAbsrtactRestResponseWriter * it APPEARS that i can cheat and not add a billion commons- jars for the purposes of serializaing maps and arrays -- so I'm just using jsonlib + ezmorph for now,move
Further minor refactor of LTI/OAuth stuff  I've moved most of the key stuff into a single utility class to make it easier to test/debug things.,move
Enables condensed naming. This required moving some of the name generation methods to the AbstractGenerator to provide them access to the GeneratorContext. This had the side effect of cleaning up the way the main classes and interfaces are retrieved.,move
changed inheritance and moved stuff to ERXComponent,move
get rid of shell test target  move rest tests to slow-tests since they don't need hadoop,move
HV-313: moving ConstraintAnnotationVisitor#reportError() to new class MessagerAdapter  moving ConstraintAnnotationVisitor#initDiagnosticKind() to ConstraintValidationProcessor  git-svn-id: https://svn.jboss.org/repos/hibernate/validator/trunk@19289 1b8cb986-b30d-0410-93ca-fae66ebed9b2,move
o Moved the SslContext field to the TcpClient/Server classes (UDP does not support SSL) o Added some missing Javadoc o Added a initSecured(session) method to initialize the SL layer if needed.  git-svn-id: https://svn.apache.org/repos/asf/mina/trunk@1333259 13f79535-47bb-0310-9956-ffa450edef68,move
Updated to support Mambu 3.9 API changes  1. MBU-7336   Create Group APIs 1a also  included code for MBU-7337 -Edit Groups API. NOTE: MBU-7337 will be now supported by Mambu in 3.10 only. Added TODOs to test when ready ClientService 2. MBU-7351 - Get Group Roles  and Get Details for Group Role APIs ClientService 3.MBU-7061 - Get Client Types API (for Clients and for Groups) API ClientService 4. MBU-7312  MBU-7313 - Client Profile Picture and Signature: APIs to Store  Retrieve and Delete ClientService  DocumentService ServiceHelper notes: moved  makeParamsForDocumentJson() to ServiceHelper DemoUtil: moved the encodeFileIntoBase64String() to DemoUtil from DemoTestDocuments 5. MBU-6789  MBU-7676-  Get Repayments Schedule preview for a loan product API LoanService  ServiceHelper 6. MBU-7758 - Patch loan account terms API LoanService  ServiceHelper 7. MBU-6813 - Update loan account repayments API RepaymentsService 8. MBU-7189 - Undo loan account disbursement API LoanService 9.   MBU-7034 - Custom Fields - refactoring to support client types. Updated demo programs DemoTestOrganizationService  10. MBU-7467 -  Updated comments only: allow username  key to id to be used in place of username for getting Tasks       MBU-6908 - Updated comments only: allow user key and id for updating custom fields for the user  11. Enhanced DemoUtil to provide more helper methods for testing and runs automation - created helpers to run API tests for specific accounts and products - created helpers to create new accounts to be consistent with the tested product type - created helpers to create custom fields for new accounts to be valid for tested product and client role - rearranged some test cases to allow for higher probability of the successful end-to-end runs  12. Updated Demo programs to test new APIs. Used new generic helper methods and re-arranged test calls to allow for better test automation and less test data dependency.  Miscellaneous: 13. Updated pom file to use 3.9 model  jar and to build Mambu-Java-3.9-bin.jar 14. Added missing wrapper for Delete Document API (available since 3.3  see MBU-3526 ) DocumentsService 15. Updated ApiDefinition and ServiceExecutor to support new APIs Added new definitions: GET_OWNED_ENTITY  PATCH_OWNED_ENTITIES.  PATCH_JSON 16. Removed unused class util/APIExceptionData.java. This class was never used and is not needed.  Mambu’s ReturnCode enum class can be used instead. Removed an unused constructor in MambuApiResponseMessage referencing this class. 17. Deprecated ACCOUNT_TYPE enum in APIData class.  Mambu’s existent Account.Type class (from the model) should be used instead. Updated Savings Service to use Mambu’s Account.Type.  Deprecated original methods using ACCOUNT_TYPE. ApiData  SavingsService 18. TaskSerice  correction: renamed getTasks() to getTask() 19. RequestExecutorImpl.java - updated logging JSON data to better handle encoded content for profile picture/signature API 20. Updated RAEDME file,move
Cleaned up StackImpl and LocalsImpl by moving logic into TypeUtils,move
Shruthi  Dev | #21 | Moved treatment card specific views to TreatmentCardController,move
complete got rid of code generating code in AST classes  all code moved to JsCodeGenerator,move
o Moved reporter construction logic further into ReporterManagerFactory  git-svn-id: https://svn.apache.org/repos/asf/maven/surefire/trunk@1098246 13f79535-47bb-0310-9956-ffa450edef68,move
common jcopter wcet: moved various dump options into own subgroup,move
Katta | Moved all call details including inbox to KilkariCallDetailsService,move
Started to separate QueryHandler stuff from actual FastPath query planning and execution. The latter part moved into the new fastpath package.,move
NOJIRA Moving portlet to AJAX rendering and adding answered and deleted message flag information.  git-svn-id: https://source.jasig.org/sandbox/email-preview/trunk@20521 f5dbab47-78f9-eb45-b975-e544023573eb,move
Misc improvements to (hbase|lily|solr)-test-fw:  - CleanupUtils: added a clone of HBaseAdmin.flush() method because it was leaking connections (chd3u  trunk is fixed).  - LilyLauncher: protect resetLilyState() method from concurrent execution  clean HBase connection used by CleanupUtil.  - Delete obsolete LilyTestUtility & LilyTestUtilityTest  - HBaseConnectionDisposer: removed lily.hbase.deleteConnections system property  we can delete the connections associated with just one Configuration object.  - LilyProxy/HBaseProxy/SolrProxy/LilyServerProxy: embedded mode: improve temp dir creation/assignment  - SolrLauncherService: remove obsolete lily.solrlauncher.war property  - Upgrade to newer Kauri snapshot that stops the FilesystemAlterationMonitor  otherwise we have an increasing number of these threads after repeatidly stopping/starting KauriRuntime in the same VM.  - Give names to some more threads  especially those created by executors. Mainly used for Netty  and Netty actually renames threads itself  so does not do much right now  though this behavior can be changed so left this in.  - SolrProxy/LilyProxy: make variant of start() method without schemaLocation arg (uses default solr schema).  - SolrProxy: close http connection manager on stop()  - SolrProxy: added method to change Solr schema after startup (writes schema + restarts Solr)  - LilyServerProxy: move methods to add index to there  and manage lifecycle of IndexerModel/ZooKeeper/LilyClient.   git-svn-id: svn+ssh://dev.outerthought.org/outerthought/lilyproject/trunk@4949 b80d95f8-e103-0410-bd55-e03a9dc29394,move
"Created new """"Synchronization"""" object  moving all real work out of SynchronizeService. Refactored property peers to be more similar to application property peers  in preparation for their demise.   ",move
Refactoring  fix cursor close  use OPLOG_REPLAY  - Move MongoClientOptions in MongoDBRiverDefinition - Close cursor and Mongo when river is deleted or stopped - Use QUERYOPTION_OPLOGREPLAY to improve performance,move
HV-1239 Moving shared code up to CascadableConstraintMappingContextImplBase,move
Benchmark stages now separated into their own namespaces  * removed all the separate symlinks to XSD files; replaced by single symlink to schema directory * moved radargun-3.0.xsd to radargun-benchmark-3.0.xsd (fits better to the urn:radargun:benchmark:3.0 namespace) * moved radargunScenario-3.0.xsd to radargun-scenario-3.0.xsd and changed the namespace to urn:radargun:scenario:3.0 * core stages are now in radargun-core-3.0.xsd * reduced code dependency on Directories.LIB_DIR; AnnotatedHelper renamed to ClasspathScanner  now scanning whole classpath,move
V2  Ashok | #1745 | Moved valid call delivery failure record processing to service from handler,move
wcet08: - Added UppAalTranslation executable - Added ExecHelper for reusable parts in analyzer executables - Initial Import: UppAal translation (wcet08.uppaal.translation) - Initial Import: UppAal XML model (wcet08.uppaal.model) - Add getIterationBranchEdges() to LoopColoring - Move some utilities from ControlFlowGraph to LoopColoring - Create graphutils.FlowGraph (directed graph with entry and exit) and move   FlowGraph* -> CFG*,move
refactor move AppScript services to new AppScriptService in appScript package,move
Refactored QueryStage - most of the functionality moved to reusable classes,move
438922 moved cli workspace resolver to a separate git repo  Signed-off-by: Igor Fedorenko <igor@ifedorenko.com>,move
Further background package refactoring * Introduce checking for failed transactions and delayed removes * Handling false stale reads on the same key updated within a single transaction * Moved a part of logic into dedicated FailureHolder & StressorRecordNotifier classes * Fixed faulty node indices * Renaming,move
Introduce call  call adapters  and the response type.  * `Call` is the mechanism for request execution. It encapsulates a single request action either synchronously or asynchronously  and can support canceling. * `CallAdapter` is a means of supporting a method return type other than `Call` (like RxJava's `Observable`) by adapting the `Call` instance into another instance. This change moves RxJava support into a sibling module which uses an adapter for supporting `Observable` types. * `Response` represents the HTTP response along side the deserialized body. It allows access to both the converted body and lower-level items such as the header  response code  and underlying OkHttp request and response objects.,move
"Create FileMover without observer.  To further reinforce the idea that a FileMover does not require an observer  remove it from the constructor.  Add a separate method to add the observer.  There's no great reason to do this given our current usages  but it makes things more flexible going forward.  I think we still are doing too much """"control"""" inside a """"view"""" class.  We could imagine an implementation in the future where the files to move are decided within the controller  and it then might notify interested clients  who would then add observers for the files they were interested in.  This setup allows for that. ",move
"Added most missing functionality to GmObjectFrame  fixed and improved some file loading code.  ResNode  * encapsulated res field  GmFileReader  * Fixed a bug when loading gm5 files with empty sounds  * Changed readSprites and readBackgrounds to use the readImage method  * Made events being loaded get added to start of the list  meaning they are in ascending order  GmStreamDecoder  * Modified readImage to allow an accurate estimate for inital buffer size  * Added initialSize argument to decompress  Listener  * added inner class MListener  to get rid of the unwanted MouseListener methods  * made various methods static  * exposed the putNode method for use in GmObjectFrame  Event  * Added copy method to return a duplicate  GmObject  * modified copy to utilise Event.copy  Ref  * Added a node field  to allow a Resource to access it's corresponding node  which in turn allows it to access its frame  EventFrame  * Replaced the """"replace mode"""" checkbox with a radio group  * Added the ability to duplicate events  * Changed layout slightly  so that extra side components only appear when needed  GameSettingFrame  * Exposed some convenience methods  added suggestion to move them to Util  GmObjectFrame  * Implemented most missing functionality:    * New sprite    * Edit sprite    * sprite preview updates when selection changes (still needs to update when sprite changes - see TODO comment)    * prevents looping inheritance    * Delete event    * changed EventNodeTransferHandler to handle duplicating  git-svn-id: https://lateralgm.svn.sourceforge.net/svnroot/lateralgm@199 8f422083-7f27-0410-bc82-93e204be8cd2 ",move
Trial of ProjectionPlotter moved to different class.,move
Extracted the tests conserning moving buckets to MovesBucketsTest. #18,move
#34 moved clientUid directive back to FileUploadParameterBuilder,move
[HER-1764] H3 needs in-UI quit/shutdown option  * EngineResource.java     add 'exit' control area at bottom of page     allow JVM-exit if confirm-box checked and either no jobs built/running or extra confirm boxes for each built job checked * Flash.java     fix to allow multiple flashes per page load * JobResource.java  CrawlJob.java     move useful status string method to CrawlJob,move
getMidnightDate() moved to CalendarService and Calendar.getStartTimestamp() implemented,move
NOTIFPLT-91:  Move the notion of JPA contains() from JpaNotificationService to JpaServices,move
- Added AdditionalJmxObjects interface - Removed Protocol.printStats() - Moved a number of stats-related attributes from TP to MsgStats (https://issues.jboss.org/browse/JGRP-2119),move
- Added ByteArrayDataInputStream (implementing DataInput) and ByteArrayDataOutputStream (implementing DataOutput). Both read and write directly from/to byte[] buffers (https://issues.jboss.org/browse/JGRP-1771) - Added methods in Bits which encode/decode various types (not yet done) - Removed unused methods from Util - Moved some methods from Util --> Bits - Added limit to ByteArrayDataInputStream - Replaced ExposedXXX classes for sending and receiving of messages with ByteArrayData{Input Output}Stream classes (https://issues.jboss.org/browse/JGRP-1771) - Removed the ExposedXXX classes - Replaced ExposedXXX classes with ByteArrayData{Input Output}Stream equivalents,move
OPEN - issue FLEXMOJOS-140: Move test runner into a separated component  https://issues.sonatype.org/browse/FLEXMOJOS-140,move
<Dev> #5 | common web account service methods are moved to UserService class from ProviderService adding resetPassword method to UserService,move
Sampling moved to UtilitySampler,move
First major move with Generics. Filter get Generified  and all the core JDOM classes get fixed as the errors/warnings come up.  org.jdom is warning-free in eclipse.,move
336555 moved core ui code to a separate bundle  Signed-off-by: Igor Fedorenko <igor@ifedorenko.com>,move
#100 moved config keys and new rest types to cids-server-rest-types,move
ETS fixes based on test suite:   - Make heir option work   - implement ets:setopts/2 - Order elements of bag like beam does it. - fix EPattern / EMatchSpec to sort $N variables and allow   that $N values are not contiguous from $0 ... $X. - Fix pattern/match_spec so that {$1  $1} works. - move ets:info/1 and ets:info/2 impl into ETable class.  - implement ets:match/2 for bag / duplicate_bag.,move
* Refactored indexes generation that was in the abstract CodeGenerator and moved them to the IndexesCodeGenerator.,move
Added one more class to move the charting logic there. This is the kind of code where you have to wonder if Java is really helping or getting in the way.,move
Turned Utils static methods into Presto methods. Moved TypeUtils into Presto.,move
"Fix #258: Added command to move to column 0 and beginning of line.  The command resets sticky column to the current position to """"unstick"""" it on empty lines. ",move
* The way IERXRestDelegates are implemented is totally crazy. Get rid of that and move to a model where the delegate is always looked up.     * Introduce an ERXRestContext that can go all the way down to the JSON formatters so you can configure date formats per-request.     * Write some test cases -- it's used by several apps now and really should have coverage.     * Fix a bunch of weird edge cases that have come up,move
Refactoring: move methods that are not directly related to announcements to a utility class.  git-svn-id: https://svn.apache.org/repos/asf/maven/plugins/trunk@1050189 13f79535-47bb-0310-9956-ffa450edef68,move
"First step towards a new settings system  Summary ======= Got rid of the settings enum  and replaced it by contants. This allows for type safety. Settings are now responsible for reading and writing their values  instead of tons of overloaded methods in ConfigFile. Added a few tests.  The Setting class ================= Each setting type now extends Setting<T>. The type parameter T is the type of the value of the setting  like String  Integer  Boolean  List<String> or even SurfaceGenerator. Each setting implements the methods """"T read(String)"""" and """"String write(T)"""". There's also a method called """"T getDefaultValue()"""".  ConfigFile changes ================== There are now two method left that read settings: """"<T> T readSettings(Setting<T> setting)"""" and another one that allows to override the default value from Setting.getDefaultValue: """"<T> T readSettings(Settings<T> setting  T defaultValue)"""". This is used by BiomeConfigs.  There is only one method left that writes settings: """"<T> void writeValue(Setting<T> setting  T value)"""". It simply calls the write method on the setting  and writes the result to a file.  The Settings factory class ========================== """"Settings"""" acts as a factory for creating settings. WorldStandardValues  BiomeStandardValues  etc. now extend this class  instead of implementing MultiTypedSetting  that has been removed. The classes are no longer an enum. Enums force all values to have the same type. Now the settings type are much more explicit.  The reason for creating factory methods instead of calling the constructor is that we may want to keep track of all settings in the future. The old settings enum provided this functionality  and the factory methods allow us to do so too.  Variable names ============== Constants are now UPPERCASE_LIKE_THIS  variables are now camelCase. In the settings file you will still see SettingsLikeThis. This can be done now that variable names and setting names have been split. Value enums (like TerrainMode) haven't been split yet  so they keep their variable names LikeThis for now.  Next steps ========== - Move the file reading/writing logic out of ConfigFile  so that settings can be read from different sources  like Mojang's new settings format used in the Customized world type. (http://minecraft.gamepedia.com/Customized) - Remove all unused settings. This includes all structure settings of BO2 (support removed in TC 2.3  replaced with BO3 structures in TC 2.4) and the two color settings from the WorldConfig (support removed in TC 2.2  now handled by biomes) ",move
PLFED-64: move the reading and writing of STSType to WSTrustUtil  git-svn-id: https://svn.jboss.org/repos/picketlink/federation/trunk@223 cbddccc4-e45a-42eb-be77-0d76e4b45d38,move
Remove the window argument from the method signature and move configuration to a separate class.,move
* The way IERXRestDelegates are implemented is totally crazy. Get rid of that and move to a model where the delegate is always looked up.     * Introduce an ERXRestContext that can go all the way down to the JSON formatters so you can configure date formats per-request.     * Write some test cases -- it's used by several apps now and really should have coverage.     * Fix a bunch of weird edge cases that have come up,move
"* Canvas:  - mouse canvas position moved in base IcyCanvas class.  - 2D mouse image position moved in IcyCanvas2D class. * IcyTextField : removed the consumeCharKeyPressEvent property. * IcyFrame: added getInputMap(..) and getActionMap() methods. * ROI:  - general performance improvement on draw and mouse events.  - removed useless mouse position information. * fixed shift combination shortcuts accidently enabled on text fields. * better headless support. * fixed wrong """"null sequence"""" report. * limited maximum memory to 1024 MB for 32 bits JVM to reduce the """"cannot create native thread"""" error. * minors others fixes.",move
"Moves Encoding functions to their own class  This moves functions used for encoding the outputted URL segments into their own class. This also removes a bunch of calls to the deprecated """"of"""" method  replacing them with calls to the UrlBuilder's constructor. ",move
"fixed issue 108:	@TestName JUnit rule doesn't respect unrolled method names  - added properties reportIterations and iterationNameProvider to FeatureInfo - all IterationInfo's now have a name and description - moved all @Unroll logic into an extension - changed MethodRule and TestRule integration to respect iteration name ",move
[java] Moving rules into correct packages according to the new category - Part,move
Removed AbstractWarzoneCommand and moved methods into War,move
refactor CelMailScriptService with move methods to IMailSenderRole,move
* Moved AsyncWeb HTTP codec to mina-filter-codec-http * Rewrote the existing HTTP client codec * ProtocolCodecFactory.getEncoder/getDecoder() now are provided with an IoSession parameter.    git-svn-id: https://svn.apache.org/repos/asf/mina/trunk@596187 13f79535-47bb-0310-9956-ffa450edef68,move
"#365 Moving """"spi"""" package into processor module; Simplifying AccessorNamingStrategy contract ",move
minor refactorings,move
FACES-2317 Move method com.liferay.faces.util.component.ComponentUtil.getClientVarName(FacesContext ClientComponent) to liferay-faces-alloy.jar,move
Move interfaces of the v2 api to package me.prettyprint.hector.api. 1. Create a ColumnQuery interface 2. Create two types of implementations: ThriftColumnQuery and AvroColumnQuery (not implemented yet) 3. Split HFactory to two parts  on is the external parts used by the API users and move to me.prettyprint.api.factory.HFactory 4. The other part of HFactory is the internal methods used by the model package  so they were moved to me.prettyprint.cassandra.model.ThriftFactory (and an AvroFactory is due) 5. Fix all required imports due to the above changes,move
Ashok  Ashish | #1961 | Moved validation utils in services  refactored obd succesful call request to web and domain requests.,move
IDataComposer initialization dropped from InitListener and moved to ValidatorFilter to avoid problems with premature request initialization. Fix (https://github.com/hdiv/hdiv/issues/21).  JSF requires ValidatorFilter for GET request validation and IDataComposer initialization,move
IMAP: Move search tests to new file,move
HV-1245 Move the extraction of the value to validate to MetaConstraint  It simplifies ValidatorImpl and paves the way for the next steps.,move
1. Added several new shell commands.   2. Moved the command output writer into the commands (no more     using System.out). 3. Moved the BRMS code into a shell command.,move
PatternLayoutBase.setContextForConverters method moved to ConverterUtil. Minor edits.,move
[MECLIPSE-504] Add a new mojo eclipse:remove-cache - Moved delete(File) from EclipseCleanMojo into IdeUtils.java - Added RemoveCacheMojo - Added IT tests for RemoveCacheMojo - added commons-io:commons-io:1.4 as a dependency  git-svn-id: https://svn.apache.org/repos/asf/maven/plugins/trunk@726621 13f79535-47bb-0310-9956-ffa450edef68,move
pipeline stuff moved to separate repository,move
Icons moved  drag and drop interface updated  Dockables can now be dropped left or right of a single tab  git-svn-id: http://svn.javaforge.com/svn/DockingFrames/trunk@736 3428d308-0d2e-0410-b3d4-94d0fefcacdf,move
Implements New Font Editor  The new font editor allows for multiple character ranges  pretty thoroughly tested. The next goal is to move glyph calculation and everything into LGM in a common interface that both the plugin driver  EGM  and GMX can all utilize.,move
Fixed Help Content in Eclipse / ecj support.  - Moved Completion proposal code to the PatchExtensionMethodCompletionProposal class - Moved out error reporting from EclipseAST. - Fixed error reporting of the portals.,move
Refactoring: move to a helper method that has nothing to do with the report generation to a helper class.  git-svn-id: https://svn.apache.org/repos/asf/maven/plugins/trunk@1053977 13f79535-47bb-0310-9956-ffa450edef68,move
disassociate Credential type from commons-httpclient library by moving populate() method into utility class,move
Remove knowledge of XmlUnitProperties from Diff. Moved knowledge of NodeMatcher from DiffBuilder to DifferenceEngineFactory.,move
- added several methods on EOGenericRecordClazz to support EC arguments - moved a lot of stuff in ERXXXUtilities so the EC comes as first argument  removed the XXXEditingContext from the method name. This is so the names are more like the ones in EOUtilities - added EOControlUtils.clearSnapshotForRelationshipNamed() - added EOControlUtils.clearSnapshotForRelationshipNamed() - added and fixed PK<->String generation  very useful for URLs and DAs with non-trivial PKs - added _stringForPrimaryKey() helper to prevent duplication  but PK generation is still a mess - added  ERXEOAccessUtilities.modelGroup(ec)  supporting null for ec - added  ERXEOAccessUtilities.entityNamed(ec  name)  supporting null for ec - (hopefully) all EOModelGroup.defaultGroup()  EOUtilities.entityNamed() etc have been converted to ERXEOAccessUtilities.modelGroup(ec) and entityNamed()  so most of the FIXMEs in that direction have been fixed.  I have not tested *anything* so far! So please check if something broke on the way.  One thing might be the reordering of arguments  I didn't want to deprecate them as they were pretty new anyway and shouldn't be used a lot outside of ERX,move
Move showMessageBox into UIStarter  Change the inner class in AboutDialog to nonstatic so that it can access the ui instance variable.  Move a number of imports from UIUtils to UIStarter  as well.  Now we no longer need to pass a reference to the Shell to UIUtils.,move
JenaConnects: Moved truncate() implementation to JenaConnect since all were the same (also  now activates listeners >.>),move
"First cut of caching/perf work on candidate svc  * Integrated OutputStreamer idea for showing source/files * Source/file streams now include length & better content types * Moved package-related code from ServiceUtilities to new AssessmentPackageFileService. * CP import modified to handle QTI vs """"safe"""" files better. ",move
Simplification/generalization of code and addition of activemq product.  Also moved product configuration files to products directory,move
dry: UpdateStylesheetsMojo/WatchMojo -> execute script moved to super method executeSassScript,move
Updates to the CodeGenerator and Atomic handling    * new TransactionManager.withTransaction(Callable  Atomic).  This allows for     the Atomic configuration to be passed to the backend-specific     implementation of the transactional workflow.    * Add new BackEndId.getAtomicContextFactoryClass() to enable configuration     of the Atomic Context Factory by the backend.    * CodeGenerator is now an abstract class instead of an interface.  Move the     common code from AbstractCodeGenerator to CodeGenerator.    * Rename AbstractCodeGenerator to DefaultCodeGenerator  which makes more     sense (the class is not abstract).    * Eliminate the need to call generateBackEndId().  Now it is only required     to call generateCode()  as was previously.,move
reuse toString method between OAuth1 and OAuth2 and move getLocaleFromString helper method,move
- Moved UUID.cache into NameCache - Changed UUID.get() -> NameCache.get() in Byteman scripts,move
refactoring move Calendar classes to new calendar class collection,move
Some refactorings in the translator  moved duplicated code to super class,move
* finalized Sync/Async GAE implementation with Query/Batch (lots of code re-organized) * finalized Sync JDBC implementation with Query/Batch (lots of code re-organized * moved all static functions in static class containers * JDBC Async is not yet implemented * some batch functions (update) are not yet implemented * added lots of unit tests,move
First step in updating the instrument comparison: refactored the Action activation (it was originally activated when Tuning was enabled). Moved most of the validation for the pair of Instrument data models into the activation logic.,move
* fixing warning messages * moving sesame jar to correct location * updating guava * repackaging * bumping rev,move
<Dev> #5 | logout method returns login page now; loginAsAdmin and loginAsProvider are moved to LoginPage; use get***Page in Page class to get corresponding *** 5Page instance,move
* Rewrite GUI of TerminalWindow * Move gui package to terminal.gui * Added ConfigDialog and a possibility to save settings * Reorganize sources (optimize),move
Fixed SubImagePreview  cleaned up some Ref code.  RoomEditor  * I realise this is WIP  but I noticed a couple of changes that could be made  * Added a null background check  * Moved graphics settings outside two loops  SubimagePreview  * Fixed the origin preview so that it draws a straight line  * Fixed the bounding box preview to draw the rectangle correctly (a union of rectangles cannot be used in this case)  ICOReader  * Removed a FIXME comment - meaningless to us  and just clutters the task list more  Event  * removed the hashCode method  Ref  * Added a static convenience method  deRef  which makes dealing with nulls a bit cleaner (though the static import does take away from the convenience a bit)  * Updated all occurences of getRes that were checking twice against null to use deRef instead.  git-svn-id: https://lateralgm.svn.sourceforge.net/svnroot/lateralgm@164 8f422083-7f27-0410-bc82-93e204be8cd2,move
Interface segregation :-) Write methods moved from IUsusModel to IUsusModelWriteAccess. Next step: Restrict visibility of write access interface??,move
Minor refactoring of service layer:  AssessmentManagementService now focused specifically on assessment management. Other functionality has been moved to AssessmentCandidateSerivce  and a new bottom layer service called EntityGraphService.,move
Fixed remaining references to report builders vs managers and moved excel template loading into ReportBuilder base class,move
more moving logic out of the main enunciate mechanism over to the modules   git-svn-id: https://svn.codehaus.org/enunciate/trunk/enunciate@69 c2b6a248-b21b-0410-9d80-82131e002806,move
Java  typeres: move method typeresolution methods into a helper class,move
newtools: moved callgraph dump methods to common  added target-method callgraph dump option to wcet tool  bugfixes for bytecode size calculation,move
Remove Synopses/Descriptions object  move short/medium/long descriptions to the top level,move
TwitterUpdate 리펙토링 - move method  git-svn-id: svn://okjsp.pe.kr/okjsp/trunk/okjsp2007@123 1400446e-9ab3-46cc-91c4-886daca6c3f0,move
final select tests moved,move
Move SharedLogLogic-specific getCheckedOperations from superclass  move operation resolving to AbstractLogLogic,move
SGF-569 - Move Off-Heap  Redis Adapter and Security Annotation config from apache-geode to SDG 2.0.x.,move
Another step in https://jira.duraspace.org/browse/DURACLOUD-525  updates the Bit Integrity Handler to retrieve the space manifest and perform a comparison to the generated item listing. Also moves some constant values to ExecConstants.  git-svn-id: https://svn.duraspace.org/duracloud/trunk@879 1005ed41-97cd-4a8f-848c-be5b5fe45bcb,move
o Moved towards a single wrapper for all properties wrapping needs,move
Bug 249613 - [aspects] Deadlock when using equinox aspects and spring dm extender  parsing of aspect definitions moved to bundle resolve event,move
Remove old MATSimSimulation and move the functionality into the plugin,move
count cache moved from EventsManager to AbstractCalendarEngine,move
all static methods removed from GremlinEvaluator. ScriptEngine implemented + console and script exector moved to ScriptEngine. all libraries are in the com.tinkerpop.gremlin.compiler.context package now.,move
Toby: Moving addition accumulators into their own class and adding multiplication accumulators along with product methods.,move
getNavigationDetails() and getPagingNavigation moved to own CalendarNavigationService,move
Major refactoring and moving jelly scripts around,move
getMidnightDate() moved from CalendarEngineHQL to Calendar,move
A tremendous patch from Wouter to move lots of things over to the new rule XML test format   git-svn-id: https://pmd.svn.sourceforge.net/svnroot/pmd/trunk@4793 51baf565-9d33-0410-a72c-fc3788e3496d,move
Using a new 'type' of deobfuscating which makes updating go 10 times faster. (using jarjar with rule file to rename class files and then deobfuscate)  Changes:  - moved to new 'type' of deobfuscating.  - changed the jar requirement from minecraft_server.jar to minecraft_servero.jar  - removed all code related to reserve list(was unused anyway).  - cleaned up some other stuff.  - updated minecraft.sql to match latest needed sql.  - removed reserve list from update1.sql,move
common: moved inner classes stuff into own class  some more docs  code to rebuild InnerClasses attribute,move
Alex|Ian|Roy: Removed IncomingPaymentProcessor  and moved DAO access from TabController to PluginController.,move
feature #193: move getVMArguments to ConfigurationHelper.getJvmArgs(),move
json serialization/deserialization methods are moved to separate JsonCodec class,move
renamed class Objects to ObjectUtil (for consistency with other util classes)  - ditched existing ObjectUtil class  moving its only method to TextUtil,move
Extract persister for triggers and jobs.  Also move most of locking to LocksDao.,move
resolveEntityReference made private and moved from WebUtilsService to TreeNodeService,move
Bug 463205 - Manhattan routing is extremely inefficient and slows down editor response https://bugzilla.redhat.com/show_bug.cgi?id=1181215 -  Arrows are changed unexpectedly when Node is moved on the canvas,move
moved delete vComponent to utilities  todo - move edit and delete to VComponent,move
refactor - moved WebClientProperties from DataBaseService,move
[refactor]: move interval flush method to FileLog,move
Chunk change logic is now good enough. Moving it to the MainListener.,move
added decoder exception  moved from primitive to object primitive for geo record,move
FACES-1890 Move faces-config processing from liferay-faces-bridge-impl to liferay-faces-util,move
BIG UPDATE: moving emphasis to book  and updaing GUI,move
Add the new provision exception API.  Guice currently has an Exception called ErrorsException that is used to signal certain kinds of errors.  The general strategy is either to * call Errors.addError if you come across an error but can keep going * call throw Errors.addError(...).toException() to report an error when you can't keep going  The second option throws an ErrorsException.  Which is then caught at various api boundaries.  The idea in this cl is to introduce a parallel API called InternalProvisionException which can take over the analogous usecases for provisioning time errors and ErrorsException will be preserved for configuration time errors. ErrorsException will be renamed to InternalConfigurationException after InternalProvisionException is fully integrated.  This also refactors Errors.java to move a bunch of static utilities for dealing with Message objects to a new class Messages  ------------- Created by MOE: https://github.com/google/moe MOE_MIGRATED_REVID=177714992,move
Major refactor to bring all YouView publisher codebases up to the latest granular/task-based pattern.  - LoveFilm/Unbox code is now using the Granular interfaces  - All code moved across to Task/granular tasks and generators  - Old (non-granular) generator code removed  - non-task-based scheduled tasks removed,move
Refactored: removed old unused author synonym filters; moved the author synonym dumping into batch; finished test for it; removed writeability from the author collector,move
Rework FileMover.  This is pretty much a rewrite of UIStarter.renameFiles() and everything beneath it.  Introduce a new class  MoveRunner  to be the driver of individual file moves in the class FileMover. The UIStarter prepares a list of FileMovers  and creates the MoveRunner with that list of FileMovers.  The MoveRunner then executes the FileMovers.  Note that now  UIStarter no longer makes any reference to Files  Path  Paths  Callable  ExecutorService  Executors  or Future.  I think this is good.  Those classes were not part of the view.  Move copyAndDelete into FileMover.java  and make it a private instance method.  Now that it's private  it doesn't have to be so defensive about all the checking; it assumes its callers have verified everything is ready to go.,move
"- refactoring towards moving DB engine specific bits into a subclass hierarchy - replace """"CONCAT"""" with """"||"""" operator for Postgres ",move
Refactored Infinispan cache wrapper hieararchy * All wrappers should from now on keep linear hierarchy according to Infinispan versions (one wrapper per plugin) * Each feature should be implemented by separate object - wrapper and feature can be enriched separately * Code from the core wrapper moved to Lifecycle and BasicOperations (these are not features) - wrapper should only hold the caches and orchestrate features * InfinispanWrapper now can work as multi-cache wrapper as well (see StressTest.useBuckets),move
"Fixed automatic updates in several places  using the `UpdateSource` system.  * Converted `ResNode` to using `UpdateSource` and made it listen to its own resource  propagating any events from the resource both up the resource tree  and to the node's listeners.  * Moved some of `ResNode`'s update handling from resource frames into `ResNode`.  * Replaced `ResourceMenu`'s complicated listener system with `UpdateSource`.  * Removed the `setListen` method in `RoomEditor.RoomComponent`  since the weak references used in `UpdateSource` makes this unnecessary.  * Added new method `invokeOnceLater` in `Util`  which does the same as `SwingUtilities.invokeLater`  except that the `Runnable` is only enqueued if not already in the queue.  * Made several fields in different resources private to let them generate events when set.  * Made a new class for `Sprite` subimages  `ImageList`  which calls the `Sprite`'s `fireUpdate` when modified.  * Added some event """"propagation paths"""" to simplify listener handling  especially in the room editor components:   * `Sprite` → `GmObject` → `Instance`   * `Background` → `Tile`  * Fixed updating of the subimage list in `SpriteFrame` e.g. when loading a new image.  git-svn-id: https://lateralgm.svn.sourceforge.net/svnroot/lateralgm@305 8f422083-7f27-0410-bc82-93e204be8cd2 ",move
More fixes - some tests simply moved to java module,move
Implemented some Tabs in GameSettingFrame  fixed loading of resources from jar  added event replace  + ColorSelect  * Basic colour choose panel  IndexButtonGroup  * made it possible to have decimal indexed groups  rather than bitwise  * Added basic ActionListener functionality  Listener  * Added a line to the save as code to commit the changes of LGM.gameSet if it is open  Gm6File  * Corrected default icon code to work from within a jar  * Changed colorOutsideRoom to Color rather than int  Gm6FileReader/Writer  * modified to read/write colorOutsideRoom correctly  GmStreamDecoder  * Added some alternate constructors  GmStreamEncoder  * Added some alternate constructors  * renamed writei to write4  * added write2 and writeStr1 functions  Prefs  * Added String[] defaultLibs for use when in a jar (dynamic detection is planned for 1.7)  Util  * Modified getValidImage() to display error messages so that the method doesn't throw Exceptions  * moved the addDim method to here and removed the convenience version to make it thread safe  Constant  * overrode equals and hashCode (hashCode is just because of CheckStyle)  * made Comparable for sorting  * Added a copy function  LibManager  * Corrected autoLoad to work from within a jar  BackgroundFrame  * modified to use the new version of addDim  * removed try-catch in image loading code  EventFrame  * modified to use the new version of addDim  * small correction to linked frame selector (frame is now selected as well as being put on top)  GameSettingFrame  * Implemented Resolution  Loading  and Constants  tabs - All fully functional  * Modified Other tab to use IndexButtonGroup  * Modified Graphics tab  * * Added scale factor field  * * Changed the background colour selector to a ColorSelect component  GmObjectFrame  * Implemented DnD event replacing  ResourceFrame  * Removed the addDim method  SpriteFrame  * modified to use the new version of addDim  * removed try-catch in image loading code  TimelineFrame  * made FRAME_ICON final  checkstyle.xml  * changed to ignore lines with trailing line comments  git-svn-id: https://lateralgm.svn.sourceforge.net/svnroot/lateralgm@122 8f422083-7f27-0410-bc82-93e204be8cd2,move
Renames methods on Encoder  This also moves the encodeQueryParameters method to the Encoder class.,move
Staring background tasks moved back into EDT (created specialized util method for that) Using intellij methods for thread management around UI Fixed deprecated method call,move
FACES-2309 Move constants and most methods from com.liferay.faces.util.render.RendererUtil to liferay-faces-alloy.jar,move
Add webstart entry point for browser with no URL or File/open option. Move Zoom to menu entry  add warning on first zoom. Move preview to menu entry. Reorganize launch method a little to allow for multiple entry points.,move
Refactored some Backend-specific methods in the Consistency Predicate module as abstract methods in ConsistencyPredicateSupport.   * Moved the implementation of the methods to the JVSTM/OJB implementation     of ConsistencyPredicateSupport.,move
"PAXRUNNER-240 * Improved daemon shutdown * File creations moved to """"pax home"""" * Added scripts for jdk-1.4 * Improved synchronize blocks in stop and waitForExit - Pending issues with """"--stop"""" operation (in Windows)  git-svn-id: https://scm.ops4j.org/repos/ops4j/projects/pax/runner@15134 9b982a3c-3ae5-0310-a4bc-d9a3335569bd ",move
- Changes in the NIO implementation and re-implementation of GossipRouter/RouterStub - Added PubServer and PubClient - Added send(null) to send to all - Added GossipRouterNio - Added static creator methods for NioServer and TcpServer - Added code to create client servers - TCPGOSSIP and TUNNEL can now choose between blocking and non-blocking connections to GossipRouter (use_nio) - Request and response types between RouterStubs and GossipRouters are now in a separate enum GossipType - Removed GossipRouterNio: non-blocking IO will be implemented in GossipRouter itself using NioServer/TcpServer - Added Util.bufferToArray() - Moved ConnectionListener out of BaseServer - Removed Server - Added List<PingData> to GossipData - ReceiverAdapter now uses Util.bufferToArray() - TCPGOSSIP now implements RouterStub.MembersNotification callback - RouterStub now uses BaseServer to connect to GosipRouter - GossipRouter now uses BaseServer to implement connection management - Added TcpClient and NioClient - Moved all client-server related classes to org.jgroups.blocks.cs - Added TcpClient and NioClient - Moved all client-server related classes to org.jgroups.blocks.cs - De-genericized BaseServer et al - Moved to package org.jgroups.blocks.cs - Reconnects in RouterStubManager now work - Use peer connections to make unit tests pass - Added suspect handling in GossipRouter: when a connection to P is closed  then a SUSPECT(P) will be sent to all members of that group - Made marshallinf of GossipData for type=MESSAGE more efficient - Removed copying of messages in GossipRouter - Setting parameters in sockets/channels before connecting them - TcpConnection.isOpen() now returns true when the socket has been created - Rewrote ServerUnitTest to get rid of issues with @DataProvider - Upgraded TestNG dep to 6.9.x,move
Rewrite RealOptionalBinder to use the InternalFactory interfaces and avoid the overheads of normal ProviderInstanceBindings + Providers.  A couple of notes on the implementation * all the mutable state (besides Binder) has been moved into a new helper object 'BindingSelection'.  I think by moving things into a helper object the interactions are a bit clearer.  This also allows us to make all the factories static. * calculating the keys + optional binder 'name' have been delayed until configure() time or until setDefault()/setBinding() is called.  I would assume that most optionalbinders are deduped or that setDefault()/setBinding() is not called  so we can avoid work in the common cases. * None of the factories need circular deps resolution because they simply delegate to other factories. (in this way they are much like the ProxyFactory used for LinkedKeyBindings  we just wrap the result in Optional) * I performed a minor refactoring the the java.util.Optional reflection helpers  Benchmark results: timeOptionalBinderInjection measures how long to inject an object that depends on other OptionalBinders in every configuration timeProvidesInjection times how long it takes to inject an @Provides method timeOptionalBinderSetBinding times how long it takes to directly inject an OptionalBinder.setBinding() binding that delegates to the same bindings as 'timeProvidesInjection'.  So we should be able to see the overhead of OptionalBinder to fetch the same object.  ------------- Created by MOE: https://github.com/google/moe MOE_MIGRATED_REVID=130648042,move
#157 refactoring: moving all mapping method resolving stuff to class with own responsibility,move
"its own module""",move
Assert moved to FailUtil,move
Post release refactor. I moved almost everything that was package-private in com.google.inject to the internal package. The motivation is to simplify things - the previous setup was extremely awkward because c.g.i could call into internal  but not the reverse. Similarly for the SPI package.  This refactoring reduces the visibility of many symbols in internal  and makes some other code hygeine changes.  Once this is checked in  it should be much easier to add the toConstructor() binding type. That was previously difficult because the ConstructorBindingImpl class was package private and intertwined with that package.  git-svn-id: https://google-guice.googlecode.com/svn/trunk@1002 d779f126-a31b-0410-b53b-1d3aecad763e,move
"* ROI:  - added .canSetPosition() and .setPosition5D() methods.  - added .canSetBounds() and .setBounds5D(..) methods.  - added .contains(ROI) and .intersects(ROI) methods. * added ROI4DArea and ROI5DArea. * IcyCanvas and Canvas2D implements the new 5D support from ROI/Overlay. * reworked the ROI panel for better 5D support (not yet completed) * SequenceDataIterator and ImageDataIterator implements the new 5D support from ROI. * BooleanMask<X>D: added .contains(BooleanMask<X>D) and .intersects(BooleanMask<X>D) methods. * ROI are now implemented as Plugin (ROI classes moved). * """"fill sequence"""" operation now use the ROI properties to get the region to fill. * Rectangle<X>D: fixed union and intersection operation with Infinite dimension. * added Dimension<X>D classes. ",move
HV-441: Moving retrieval of class-level constraints to annotation meta data provider,move
Refactored base class for calculations moving some functionality into kenyacore,move
FACES-2052 Remove InputDateTimeUtil and move methods to InputDateTime,move
removing BillCleaner  moving functionality to relevant classes,move
"Changes based on Keith's review.  A few tweaks to EdgeSet to help tracking edge removal  	modified:   src/edu/ucla/sspace/common/Similarity.java  - Updated to use VectorMath.dotProduct for the Tanimoto coefficient  	deleted:    src/edu/ucla/sspace/common/WordComparator.java  - Moved to SimpleNearestNeighborFinder  	modified:   src/edu/ucla/sspace/dependency/SimpleDependencyPath.java  - Removed println  	modified:   src/edu/ucla/sspace/graph/AbstractGraph.java  - Added missing implementation to Subgraph class so now all the unit tests pass  	modified:   src/edu/ucla/sspace/graph/DirectedMultigraph.java  - Added missing implementation to Subgraph class so now all the unit tests pass  - Fixed bug for reporting the correct edge types after removal  - Removed dead code  	modified:   src/edu/ucla/sspace/graph/EdgeSet.java  - Updated so that disconnect() now returns the number of edges that were removed  	modified:   src/edu/ucla/sspace/graph/GenericEdgeSet.java 	modified:   src/edu/ucla/sspace/graph/SparseDirectedEdgeSet.java 	modified:   src/edu/ucla/sspace/graph/SparseDirectedTypedEdgeSet.java 	modified:   src/edu/ucla/sspace/graph/SparseTypedEdgeSet.java 	modified:   src/edu/ucla/sspace/graph/SparseUndirectedEdgeSet.java 	modified:   src/edu/ucla/sspace/graph/SparseWeightedEdgeSet.java  - Updated to support EdgeSet interface change  	deleted:    src/edu/ucla/sspace/graph/GraphRandomizer.java  - Removed dead class (functionality is in Graphs.java)  	modified:   src/edu/ucla/sspace/graph/SimpleWeightedEdge.java  - Fixed hashCode()  	deleted:    src/edu/ucla/sspace/graph/SparseSymmetricEdgeSet.java  - Removed dead class  	modified:   src/edu/ucla/sspace/graph/UndirectedMultigraph.java  - Added missing implementation to Subgraph class so now all the unit tests pass  - Fixed bug for reporting the correct edge types after removal  - Removed dead code  	modified:   src/edu/ucla/sspace/mains/FixedDurationTemporalRandomIndexingMain.java  - Updated to replace WordComparator with SimpleNearestNeighborFinder  	modified:   src/edu/ucla/sspace/mains/LexSubWordsiMain.java  - Updated to replace WordComparator with SimpleNearestNeighborFinder  	modified:   src/edu/ucla/sspace/text/LabeledParsedStringDocument.java  - Updated for new ParsedDocument interface  	modified:   src/edu/ucla/sspace/text/ParsedDocument.java  - Updated to specify the format of text() as the tokens with white space delimiters.  - Added a new prettyPrintText() which is the attempt to nicely format the tokens   as they would have been originally.  	modified:   src/edu/ucla/sspace/text/PukWaCDocumentIterator.java  - Fixed javadoc  	modified:   src/edu/ucla/sspace/text/UkWaCDocumentIterator.java  - Added more class javadoc  	modified:   src/edu/ucla/sspace/tools/NearestNeighborFinderTool.java  - Updated to use the class instances instead of the interface  	modified:   src/edu/ucla/sspace/tools/SemanticSpaceExplorer.java  - Updated to replace WordComparator with PartitioningNearestNeighborFinder  	modified:   src/edu/ucla/sspace/tools/SimilarityListGenerator.java  - Updated to replace WordComparator with PartitioningNearestNeighborFinder  	modified:   src/edu/ucla/sspace/util/HashIndexer.java  - Fixed javadoc  	modified:   src/edu/ucla/sspace/util/PairCounter.java  - Fixed javadoc  	renamed:    src/edu/ucla/sspace/util/NearestNeighborFinder.java -> src/edu/ucla/sspace/util/PartitioningNearestNeighborFinder.java  - Moved so that NearestNeighborFinder can be an interface  	modified:   src/edu/ucla/sspace/util/ReflectionUtil.java  - Removed dead code  	modified:   src/edu/ucla/sspace/util/primitive/IntIntHashMultiMap.java  - Added javadoc  	modified:   src/edu/ucla/sspace/util/primitive/IntIntMultiMap.java  - Added javadoc  	modified:   test/edu/ucla/sspace/graph/DirectedMultigraphTests.java  - Uncommented out unit tests  	modified:   test/edu/ucla/sspace/dependency/BreadthFirstPathIteratorTest.java 	modified:   test/edu/ucla/sspace/dependency/CoNLLDependencyExtractorTest.java 	modified:   test/edu/ucla/sspace/dependency/WaCKyDependencyExtractorTest.java 	modified:   test/edu/ucla/sspace/text/corpora/PukWacDependencyCorpusReaderTest.java 	modified:   test/edu/ucla/sspace/wordsi/DependencyContextExtractorTest.java 	modified:   test/edu/ucla/sspace/wordsi/OccurrenceDependencyContextGeneratorTest.java 	modified:   test/edu/ucla/sspace/wordsi/OrderingDependencyContextGeneratorTest.java 	modified:   test/edu/ucla/sspace/wordsi/PartOfSpeechDependencyContextGeneratorTest.java 	modified:   test/edu/ucla/sspace/wordsi/psd/PseudoWordDependencyContextExtractorTest.java 	modified:   test/edu/ucla/sspace/wordsi/semeval/SemEvalDependencyContextExtractorTest.java  - Fixed unit tests to support proper tab-delimiting of the CoNLL format ",move
creating result iterable search  moving longsearch to senateobjectsearch which relies on resultsearch,move
refactor to move mime-type and file checking to one location (fixes #87),move
"Eliminate inner class from ShowName  QueryString previously was a static inner class in ShowName.  Move its functionality up to ShowName.  I guess the whole distinction was kind of a dumb idea.  Here's the dumb idea:  If we get two files like:   """"The Office S05E07.mp4""""   """"the.office.s06e20.mkv""""  ... I was thinking we should have separate ShowName objects for each  because the substrings we extract as the found show names are not identical:   """"The Office""""   """"the.office""""  However  their """"query strings"""" ARE identical.  So that's what the previous setup did: had them have separate ShowName objects while sharing a QueryString object.  I realized that was pretty pointless.  I do still think it's important to retain the actual found show; if something goes wrong with """"The Office S05E07.mp4""""  we don't want to say we had a problem parsing """"the.office""""  because that string does not even appear in the filename!  So  we do maintain the original  untouched string.  But  we maintain it in FileEpisode.  For the work we're doing here  we don't need to retain it.  Especially since  as I was reminded in a recent commit  the whole point is to NOT process both ShowNames.  Since they have the same query string  we only need to process one of them; that's why we had the query string in the first place.  So  to say either """"The Office"""" or """"the.office"""" failed is wrong  anyway.  It's really the query string that failed.  If we do mention one or the other  it's only as an *example* of a filename that gave us this problem.  So  we do still keep an """"example"""" found name along with the query string.  But we don't need separate show names  which means we'd have a 1-to-1 mapping between ShowNames and QueryStrings  which means they can just be the same object. ",move
"HV-371: Moving check for illegal parameter constraints from BeanMetaDataImpl to AggregatedMethodMetaData  Conflicts:  	hibernate-validator/src/main/java/org/hibernate/validator/metadata/BeanMetaDataImpl.java ",move
- Added MessageBatch and unit test - Changed message list marshalling: write/read length of message list first - Added up(MessageBatch) to Protocol (default impl) - Added enable_batching to TP - All protocols up to and including NAKACK2 and UNICAST2 now implement - this method - Message bundling: we're only passing the cluster name *once* - Moved unmarshalling code into TP.receive() - JIRA: https://issues.jboss.org/browse/JGRP-1564,move
Constraints used to create table moved to own utility class.,move
path compilation issues tests moved to proper location,move
"BalajiN | #0 | Not using UpdateScope in the contract between PatientWebService and PatientService  	1. Moving TreatmentCategories to refdata 	2. Removing patient as a dependency in validation and mapping ",move
verification method moved to util class,move
CLOSED - task 79: Improve Object  Process and State figures  https://github.com/vainolo/Object-Process-Programming/issues/issue/79  * Moved direct handling of direct text edit to external delegate * Set antialiasing to shapes * Improved location and size of internal label in all figures to minimize margins but still make it look nice,move
Tidied up the HEAD~2 commit slightly.  I've moved the creation of the exception resolver to the WebApplicationConfiguration so that it can be shared with other beans.,move
https://bugs.eclipse.org/bugs/show_bug.cgi?id=355672 https://bugs.eclipse.org/bugs/show_bug.cgi?id=355673 https://bugs.eclipse.org/bugs/show_bug.cgi?id=355675 https://bugs.eclipse.org/bugs/show_bug.cgi?id=355676 Had to move some property sheet base classes to avoid circular plugin dependencies between core and ui. This also adds configuration popup dialog framework - default implementation is to display a subset of tabbed property sheets in a popup dialog. Extension plugins can override this behavior.,move
Move checkDestinationDirectory from UIStarter to ResultsTable  Now we call it when the UIStarter calls the ready() method of ResultsTable.  Also make the method synchronized.  It was probably a mistake that it didn't move to ResultsTable when we first broke out ResultsTable into its own file.  This was the only reason UIStarter had anything to do with UserPreferences  or in fact  anything to do with the model.  Now that we've moved this code  UIStarter doesn't depend on model at all (besides for Constants)  and is very generic.  With a few small changes  it could be used as a startup file for any graphic application.  Also  I plan to use the results of checkDestinationDirectory specifically to change the results table  but that's still to be done.,move
Try to get rid of the janitor and moved the day by day logic inside the importer  This is a multi-step refactor. I need to simplify the code a bit because i am now lost. The short term goal is to get back the helper on only one to be more central and that the fast-import stream can stay the same as long as possible. The documentation state that fast-import can live up very long  so let take advantage of this as most as possible.,move
Toby: Moving slice helper methods into a private innter SliceHelper class so that it is clear they are only used by slice.,move
working on #62: moved the layer creation from the ActiveLayerModel to a new CidsLayerFactory to allow recursive definition in the new ModeLayer,move
CAP-26 Refactoring admin controllers and views for annotation-based controller usage.  Also refactoring css includes and moving session initialization to an initialization service.  git-svn-id: https://source.jasig.org/portlets/CalendarPortlet/trunk@19646 f5dbab47-78f9-eb45-b975-e544023573eb,move
Refactor to move the VertxHandler#handleMessage to ConnectionBase#handleMessage,move
Refactoring load and create BW instance tests,move
Resolved issue: DIRMINA-417 (Move idleTime and writeTimeout property to IoSessionConfig (from IoSession).) * Moved idleTime and writeTimeout property to IoSessionConfig * Added IoSessionConfig.setAll() and added its default implementation to AbstractIoSessionConfig * Removed SerialSessionConfig.timeout because it can be replaced with IoService.connectTimeout    git-svn-id: https://svn.apache.org/repos/asf/mina/trunk@567208 13f79535-47bb-0310-9956-ffa450edef68,move
Sweeping changes to clean up the AuctionEntry class  and move some of it's responsibilities out to other classes.,move
many doc updates - move most docs from JavaDoc to html,move
- MOVEMEs from ERDirectToWeb->ERD2WFactory - adding myCheckRules - fixing bad EOModelGroup,move
Vishal  Vishnu  #497 moved aggregation of smear and weight results to Patient,move
Refactor and Modularize the JsonOpenlegBill test  The JsonOpenlegBillSpotCheck was previously named the JsonOpenlegDevTests. This is misleading for a variety of reasons and is now clearer. Additionally two methods used in processing of the bills have been moved to the JsonOpenlegDaoUtils. This removes duplicated code when another Openleg spot check is created.,move
- Moved methods to read and write a cache from FILE_PING --> Discovery - Provided managed operations (https://issues.jboss.org/browse/JGRP-1857),move
More intelligent way of getting the join relationships for a join entity  will want to move that stuff down to ERX once we have worked the kinks out of the notion of a sorted relationship  potentially integrating in with the database context subclass that handles sorting automatically.,move
Added Unit-Test  move class name checks into a central place.,move
Removed AdditionalCheck  whose functionality has been replaced by the SyntaxCheck system. Also moved the one @AdditionalCheck we did have (lone try) into a new class.,move
Major refactor to start process of eventually moving content manager classes into separate module. For now they are moved to a different subpackage but remain in the KenyaEMR module until all dependencies on KenyaEMR are removed.,move
[riak] Added a workaround to allow strong-consistent scan transactions. [riak] Moved the utility function createResultHashMap() to the utility class RiakUtils.java. [riak] Added riak.strong_consistent_scans_bucket_type property to riak.properties file to set the fake bucket-type name. [riak] Updated README.md with a guide on how to allow strong-consistent scan transactions.,move
Relocate method: classFor(asmType) to Types  Because of single responsibility and code reusability  moved method classFor(asmType) to an internal util class Types,move
Replaced Ref with WeakReference  fixed group deletion  WeakReference is given special treatment by the garbage collector  which makes it less prone memory leaks and easier to use. It also has a few other advantages. Had I known about this class at the time of creating Ref  I would have used it!  ResourceMenu  * removed the getSelectedRef and setRefSelected methods  and made get/set Selected take WeakReferences as argument  Listener  * corrected deleteResource to properly delete all children of a group  Util  * added some static utility methods for WeakReference - deRef and refsAreEqual  Resource  * moved the node field from Ref to here  git-svn-id: https://lateralgm.svn.sourceforge.net/svnroot/lateralgm@218 8f422083-7f27-0410-bc82-93e204be8cd2,move
A bug fix which caused improper termination fixed. DataSourceComponents do not anymore need to have schema information - all of these are moved to SQL generator part.,move
- Added support to keep cursors across multiple captures; - API cleanup (mostly in the tools); - moved properties to (anonymous) project.  ToDo: - somehow tools are getting incorrect parent frames (null). This causes their properties to be destroyed.,move
deprecated MavenRuntimeManager and friends  At very least this API was misplaced  it should have been exposed from o.e.m2e.launch bundle  not from the core. More realistically  all maven launch support should be moved to o.e.m2e.launch implementation and exposed as API when we get at least few real consumers.  Change-Id: I6250d5c8d1a05801ca7dbdc2e628906c809b3441 Signed-off-by: Igor Fedorenko <igor@ifedorenko.com>,move
All code that parses SQL expressions moved into its own class,move
"- Moved Bundler and impls out of TP into org.jgroups.protocols - TP.bundler(string type) allows to change the bunder at runtime  e.g. probe.sh op=UDP.bundler[""""sender-sends""""] (https://issues.jboss.org/browse/JGRP-2058) - Changed NoBundler to not use a pool of output streams ",move
Vishal #618 moved display logic out of Patient class,move
- Replaced Java serialization with streamable in NAKACK2  UNICAST3    FlowControl  Locking  ExtendedUUID/SiteUUID  (https://issues.jboss.org/browse/JGRP-2033) - Moved RpcDispatcher$Marshaller into its own interface - Marshaller now (de-)serializes only RPC args and return values (incl exceptions),move
Add ConnectionContext  Used to track per-connection data  as opposed to RequestContext which is per request. Also move getRemoteAddress() from RequestContext to ConnectionContext (API breaking change).,move
[java] Moving rules into correct packages according to the new category - Part 2,move
newtools: moved some more code from Project to WCETTool,move
improved debugging of AST; moved SELF_TYPE self() method up to ast.Node; cleanup,move
Katta | Moved handling of successfulobd call details to KilkariCallDetailsService,move
Polish logs and move tests into dedicated classes,move
"*** Again  4 files were not checked out in p4 due to IDEA offline mode. Hrmpf. On the fly  moved EXML namespace URI constant where it fits better. Refactorings: * Got rid of ComponentSuiteResolver  because the ComponentSuiteRegistry has to be filled in advance  anyway  and this is what the IDEA plugin now also does. Simplified ComponentSuiteRegistry accordingly. * Split XmlToJsonHandler used for all EXML parsing into two handlers  one for the metadata (ExmlToMetadataHandler) and one for the Ext-component-JSON (ExmlToJsonHandler). The metadata is needed to (re)build the XSD  the JSON is needed when generating the AS3 class. Opened API to generate a single class. * Removed some too exhaustive logging and a few souts.  [git-p4: depot-paths = """"//coremedia/jangaroo/"""": change = 165881] ",move
[HER-1783] BloomFilter64bit bit-length bug prevents full bitfield from being used; premature saturation * BloomFilter64bit.java     include the split-to-subarrays (for larger bitfields) and round-up-to-power-of-2 (for performance) options previously in largely-redundant classes     fit a number of problems with int/long overflow and bitwise ops     add methods for reporting/testing * BloomFilter.java     add methods for reporting/testing * BloomFilterTest.java  BloomFilter64bitTest.java     more extensive tests  including two lengthy tests of default/oversized blooms usually disabled by renaming * BloomFilter32bit.java  BloomFilter32bitSplit.java  BloomFilter32bp2.java  BloomFilter32bp2Split.java     deleted as buggy or redundant * BenchmarkBlooms.java     move to test source dir * BloomUriUniqFilter.java     change to accept filter instance (rather than parameters) for added configuration flexibility     fix comments * BloomUriUniqFilterTest.java     supply filter not paramters,move
First work on introducing Lily record scanners: similar to hbase scanners but then to run over lily records. The lily record scanners connect directly to HBase  thus also from within LilyClient. Scanning thus bypasses the lily-server process  and hence also the avro interface. Changes include:  - moved code for decoding HBase Result objects into records to a class RecordDecoder  - publish hbase props to ZK as /lily/hbaseConfig as client needs it (will replace blob hbase access with that too). The pure (HBase|Remote)Repository implementations don't rely on ZooKeeper.   git-svn-id: svn+ssh://dev.outerthought.org/outerthought/lilyproject/branches/scanners@5391 b80d95f8-e103-0410-bd55-e03a9dc29394,move
[MPMD-162] PMD/CPD report does not take into account pmd.excludeFromFailureFile Refactoring - move the code into Exclude{Violations Duplications}FromFile helper classes  git-svn-id: https://svn.apache.org/repos/asf/maven/plugins/trunk@1762989 13f79535-47bb-0310-9956-ffa450edef68,move
Moved Duration to root and moved callTo to Awaitility,move
<Sri  Banka> #38 | Moved switch case logic for treatment update from patient service to polymorphic classes.,move
o Moved common code to common module  git-svn-id: https://svn.apache.org/repos/asf/maven/surefire/trunk@1062048 13f79535-47bb-0310-9956-ffa450edef68,move
refactoring: move xml code to EpubProcessor  move epub cleaner code to EpubCleaner,move
HTTPCLIENT-714: computation of original route moved to director  git-svn-id: https://svn.apache.org/repos/asf/jakarta/httpcomponents/httpclient/trunk@603965 13f79535-47bb-0310-9956-ffa450edef68,move
Update Console tests to use BaseConsoleTest.invokeTestConsole  invokeTestConsole handles:  * Creation of Pipes * Creation of Console * CountDownLatch setup * Verification Exceptions  invokeTestConsole comes in 3 different varieties:  * Setup  Verify * CallbackCount  Setup  Verify * CallbackCount  Setup  Verify  SettingsBuilder  CallbackCount is the CoundDownLatch number to use. How many callbacks should we wait for before moving on.,move
BVAL-77 move metadata methods to BeanValidation  git-svn-id: https://svn.jboss.org/repos/hibernate/validator/trunk@15632 1b8cb986-b30d-0410-93ca-fae66ebed9b2,move
HV-274 Moved privileged actions into own package  git-svn-id: https://svn.jboss.org/repos/hibernate/validator/trunk@19566 1b8cb986-b30d-0410-93ca-fae66ebed9b2,move
[clearcase-plugin] Moved the change log entry creation into the factory   git-svn-id: https://svn.dev.java.net/svn/hudson/trunk/hudson/plugins/clearcase@6366 71c3de6d-444a-0410-be80-ed276b4c234a,move
XSD generation has been moved to an extra mojo; allow to also skip the test compilation (not recommended),move
HV-1363 Move getter detection logic to separate class and allow users to configure it,move
HV-1577 Move from JAXB to Stax for XML mappings,move
count cache moved from EventsManager to AbstractCalendarEngine,move
Minor refactoring to move some noise out of PMD.java; cleaned up imports   git-svn-id: https://pmd.svn.sourceforge.net/svnroot/pmd/trunk@2848 51baf565-9d33-0410-a72c-fc3788e3496d,move
Per-World Permissions and groups API and more ...  This API will make CanaryMod act as if everything is global by default. A plugin is required to change this behaviour to something else.  Groups can now have a world assigned (null if global) and permissions can be saved into separate tables (each world has a table) to determine which permission belong to what world. Additionally the global permissions are stored in permission table.  You can always access global settings by passing null as world. Otherwise the fully qualified world name is required which you can get from a world  by calling World.getFqName();  Also moved UnknownWorldException from implementation to Lib.  DataAccess now defines a getInstance() method  which needs to return a new instance of the current DataAccess. So if your DataAccess it MyDataAccess then getInstance() must return new MyDataAccess(). This is required to incorporate multiple tables per DataAccess (custom table names).  Changed the groupCreate command but it's still wip.,move
Move javax.usb and native stuff into their own packages.  The libusb wrapper of usb4java is now considered to be the central main part of usb4java and the usb4java project itself only contains the Java code of this library. The javax.usb stuff is moved into the usb4java-javax project and the native JNI code is moved into the libusb4java project. Binary files are no longer present as Java resources. Instead they are (hopefully) automatically generated and published as separate JAR files (And Maven Dependencies) so they can be easily and selectively included into a project.,move
refactoring: move code to cut multipolygons into class MultiPolygonCutter    git-svn-id: http://svn.mkgmap.org.uk/mkgmap/branches/split-shape@3775 25d90789-57f7-4ee0-8453-03a3dfeeeb22,move
#14 Moved raise exception logic  moved parsing response logic.,move
common: moved LoopBound getter/setter to MethodCode,move
Toby: moving the tuple literals into the Literals class.,move
refactor: move bundle dependency lookup to a helper class  Signed-off-by: Igor Fedorenko <igor@ifedorenko.com>,move
Updated concepts version to 20130604 * Also moved functionality related to concepts version in Dictionary class,move
- moved createServerSocket from ConnectionMap --> Util - using new method in ConnectionMap and FD_SOCK (https://issues.jboss.org/browse/JGRP-1288),move
Simplified assessment name/title properties  Nobody was ever changing these  so I'm removed from the MVC layer  removed the name property completely  and moved title to AssessmentPackage.,move
[java] Deprecated CommentUtil  move parts to AST Comment  fix FormalComment,move
Started Purge Cmd. Moved Queued cmds to CmdMgr,move
Fixed ResourceMenu  lots of other minor fixes  ResNode  * Added an icon field to allow listening for icon changes (also means scaled image is cached)  * Added tree structure change listening code  * Added a contains method to recursively look for a node with a given id  MDIFrame  * Added a copyright notice  ColorSelect  * Added getter and setter for selected colour  * Changed constructor for convenience  GmMenu  * Copied copyright notice from GmMenuBar to here (GmMenu was an inner class in an earlier revision)  GmTreeGraphics  * Moved to the top level of the components package (it is in fact a Component)  * Modified to use the icon field in ResNode  ResourceMenu  * Modified to update on changes  * * ResourceMenuItem listens on its individual node for text and icon changes  * * Menu listens for structure changes and rebuilds itself (not the most efficient method)  JEdit package DNC  LGM  * Externalised the frame title String  Listener  * Modified to use the externalised title String  Argument  * Modified to use ColorSelect for colour arguments  Sprite  * made subImages public  removed unecessary methods  * removed a dependency on a non-existant external image  SoundFrame  * Fixed the arguments to the constructor of IndexButtonGroup   checkstyle.xml  * Disabled the switch statement default clause check  git-svn-id: https://lateralgm.svn.sourceforge.net/svnroot/lateralgm@137 8f422083-7f27-0410-bc82-93e204be8cd2,move
moved phase five back to phase four  - removed existing phase four classes (orthology) - moved phase five classes (kam) back to phase four - updated bel compiler scripts,move
Merged duplicate Solver and Abstract Solver class (our repo moving / git merging screwed up the renaming some commits earlier),move
SC#QCADOOMESCLS-358 delete ParameterHookPC from basic plugin and move method to ParametersHookPC into Production Counting plugin,move
FACES-2173 Move implementation of BridgeContext.dispatch(String) to ExternalContext,move
make the core.ui plugin free of model.edit references  move the remaining method to the refactoring plugin which still needs it,move
- simplify RoadMerger - add static to methods were possible - move evaluation of routeFlags to ConvertedWay - rename Element.getEntrySetIterator() -> Element.getTagEntryIterator()   git-svn-id: http://svn.mkgmap.org.uk/mkgmap/branches/refactoring@3219 25d90789-57f7-4ee0-8453-03a3dfeeeb22,move
"* add better support for keypath visibility properties * convert """"no details"""" eo's to id = """"pk"""" format instead of >pk< format * attempt to load rest delegate names from properties (ERXRest.<EntityName>.delegate) * attempt to load default rest delegate names - <EntityName>RestEntityDelegate to make registration easier * Put request handler session fixes from Ajax's JSONRequestHandler into RestRequestHandler * Added some convenience registration methods to ERXRestRequestHandler * Added some misc javadoc * 1.5ified * moved some generic rendering methods up higher to support generating alternative output formats   ",move
- Create unit test LeaveTest (https://issues.jboss.org/browse/JGRP-2293) - Replaced base64 conversion via javax.xml.bind with Base64 methods - Moved GmsImpl.leaving and GmsServerImpl.leave_promise to GMS - Added setXmitInterval() to UNICAST3 - Fixed CCME in FD_SOCK  changed suspected_mbrs to concurrent set - Added single-test target to build.xml - Removed -bind_addr from ViewDemo and Draw - Removed setting of system properties external_port and bind_addr in tests - Changed log formatting of message exchanges in NAKACK2 (https://issues.jboss.org/browse/JGRP-2326) - Changed log formatting of message exchanges in UNICAST3 (https://issues.jboss.org/browse/JGRP-2325),move
#34 moved adding user agent header to httpUtils class,move
#644 Basically reverting changes made for #127  with a fix for handling super-bounds in JDK (failed after wrapping Types in TypesDecorator). Moved most of the logic of Types.getTypeBounds() to TypeFactory.,move
This should be the last big refactoring before Guice 2 final...  - Restored Bob's binding interfaces - LinkedBinding  InstanceBinding  etc. - Moved Binding implementation classes to internal/ so the implementations could  be shared by both Injector bindings and Module bindings - Added HasDependencies interface  implemented it for ProviderMethods - Cleaned up our internal model of scopes to use the 'Scoping' class  which is like scope annotation/instance + eager/lazy.  git-svn-id: https://google-guice.googlecode.com/svn/trunk@739 d779f126-a31b-0410-b53b-1d3aecad763e,move
#310 Moved properties replacement into PropertiesReplacer.,move
Made signal height and alignment configurable per channel. Also moved some properties to the UIManager for easier configuration of them.,move
Update to 3.2  Probably gonna move to github permanently now,move
Move method from CalendarService to JsonDaoUtils  The AddObservation method was previously in the OpenlegCalendarReportService. This method was moved to the JsonOpenlegDaoUtils because it can / will be resused by the OpenlegAgendaReportService  eliminating duplicating code.,move
refactoring: moved ExmlToModelParser#getLineNumber() to PreserveLineNumberHandler.getLineNumber() This encapsulates the way the line number is stored as user data in PreserveLineNumberHandler. On the fly  made getLineNumber() robust against user data not being available.,move
RF-9309: Move panels to CDK,move
409732 : Split lifecycle mapping analysis from project import  The Lifecycle Mapping analysis is now only run after projects are imported  making selection of projects to import much much faster (< 1 sec vs 1-2 min for the wildfly codebase and its 130 projects)  After import  lifecycle mapping error markers are collected on imported projects and the discovery service is invoked to find proposals fixing these errors.  Caveats : - no proposals are shown anymore in case projects import without errors  making discovery of new/other applicable connectors less obvious.  As part of the refactoring the following notable architectural changes were performed : - LM Analysis and Discovery proposals UI are moved to a dedicated Wizard. - LifecycleMappingConfiguration was deprecated in favor of   LifecycleMappingDiscoveryRequest   -Lifecycle Mapping discovery is now based on a collection of   ILifecycleMappingRequirement  Signed-off-by: Fred Bricon <fbricon@gmail.com>,move
A fix to an unfortunate  rare concurrency problem. During injector creation  it's possbile that an @Inject method will start a thread  and attempt to access injected members while the injector is still being created. The IdentityHashSet of members to inject is currently accessed  and everything blows up. Terrible!  The fix is somewhat involved so I moved it all to a new class  CreationTimeMemberInjector. It takes care of preventing other threads from accessing injected members until all such members have been injected.  git-svn-id: https://google-guice.googlecode.com/svn/trunk@555 d779f126-a31b-0410-b53b-1d3aecad763e,move
LookAndFeel support moved into common-project  git-svn-id: http://svn.javaforge.com/svn/DockingFrames/trunk@220 3428d308-0d2e-0410-b3d4-94d0fefcacdf,move
Massive changes to support multiple subdivisions.  Many methods moved around into more logical classes  so the code just looks better anyway.  Program still works in spite of all the changes.  git-svn-id: http://svn.mkgmap.org.uk/mkgmap/trunk@127 25d90789-57f7-4ee0-8453-03a3dfeeeb22,move
Nishi  Abhi #632 Moved Patient Details show page action to PatientDetailsController.  Signed-off-by: Abhishek <asharma@thoughtworks.com>,move
Refactored SamplePatientOrder to move stuff out of the heap and added TableIdService,move
Vandana Ashish - Moved the pack completion logic to subscription class and added some logging statements,move
ARTIF-693 Move query paging into the query itself,move
Update to Probably gonna move to github permanently now,move
SC#QCADOOMES-626 mainly StateChangeViewClient improvements  move OrderState enum to proper package,move
LBCLASSIC-67  Not not all PatternLayout instances need to have a ThrowableInformationConverter added at the end of the converter chain by the postCompileProcessing() method.  With this commit  post compile processing code has been moved to an interface. By default  PatternLayouts that ship with logback have a default post compile processor. However  it is now very easy to set processor to null.  We now test SMTPAppender using GreenMail. Problem described in LBCLASSIC-67 is reproduced in tests but not yet fixed.,move
check method's parameters  move CompilationUnit to ContainerManager,move
"Several changes to the action frame  the action list and related stuff  * Moved toolbar methods from `ScriptFrame` to `GMLTextArea`  * Added modification checking in `DocumentUndoManager` and made it work with script frame and code action editor  * Added `equals` method in `ResId`; fixes a bug in the action list  * Restored color button functionality in `Argument`; this was removed in r133 by mistake  * Changed default value string in `ResourceMenu` instances made in `Argument` from """"<none>"""" to """"<no sprite>""""  """"<no sound>"""" etc.  * Added ''code'' and ''arrows'' interfaces to `ActionFrame` (arrow icons not yet added)  * Gave new layout to `ActionFrame`; no more absolute positioning  * Changed layout manager in `ResourceMenu` to make it work better with the new layouts used in `ResourceFrame`  * Implemented ''applies'' and ''not'' checkboxes in `ActionFrame`  * Changed the mouse listener in the action list to select the existing `ActionFrame` for the selected action if there is a frame for it already  * Added indentation to action list; ''if''  ''else'' and ''repeat'' actions indent the next action or block  git-svn-id: https://lateralgm.svn.sourceforge.net/svnroot/lateralgm@135 8f422083-7f27-0410-bc82-93e204be8cd2 ",move
SC QCADOOMES-2326 delivery location field moved from deliveriesToMaterialFlow plugin to deliveries plugin  deliveries required materialFlow plugin now.,move
Added lifting scheme wavelet implementation by Ian Kaplan. Moved Generalized Goertzel test to test directory  small changel all around.,move
o Refactored slightly to split InProcess/Forked creation. Also tried to move reporting further out of the fork.  This area of the code still needs a lot more work  git-svn-id: https://svn.apache.org/repos/asf/maven/surefire/trunk@1204285 13f79535-47bb-0310-9956-ffa450edef68,move
"pmd: refactor PMD main class (no functional change)  This refactor is focused on reducing the amount of responsibilities of the PMD class. Therefore all thread manbo-jambo has been moved to separate subpackage  and the algorithms associated to the mono threaded or multithreaded strategy were also moved into two separate classes. As they share a common signature and some code  an abstract class was also added.  A large amount of code were moved out of PMD class to a RulesetsFactory utility class  here again to reduce coupling and scope of responsibility. At last  PMD class now has two fields  the Configuration object  as before  and a new object called SourceCodeProcessor  which is in charge of ... processing source code !  Anyway  those changes are pure inner refactoring and should be harmless to project  such as PMDEclipse or the Maven plugin - however  as any good plan tends to go """"boum"""" the minute you state """"I love when I a plan come together""""  please let me know if you run into any issue with theses changes  I'll do my best to support you...  git-svn-id: https://pmd.svn.sourceforge.net/svnroot/pmd/trunk@7465 51baf565-9d33-0410-a72c-fc3788e3496d ",move
Rewrite Multibinder to use the InternalFactory interfaces and avoid the overhead of normal ProviderInstanceBindings + ProviderLookups  This implementation follows the same pattern as OptionalBinder  notably * All the mutable state is moved into a new inner class named BindingSelection * Calculating keys + set names is delayed until configure()/initialization time * None of the factories need circular deps resolution   I did my best to mirror the structure of RealOptionalBinder instead of trying to maintain the preexisting structure  since i thought that having RealMultibinder implement Provider and Module was a little strange.  Let me know what you think.  Benchmark results This shows the cost of injection Set<T> and Collection<Provider<T>> for a multibinder containing 5 entries  So we save 2 objects  58 bytes and about 20ns per multibinder entry  which is less than i expected  ------------- Created by MOE: https://github.com/google/moe MOE_MIGRATED_REVID=131599436,move
[MODULES-258] move JAXP redirection to JDKSpecific,move
HV-421: Moved assertSize() to TestUtil,move
HV-1190 Move the MapKeyExtractor to the default ValueExtractors provided,move
[NGRINDER-28] Develop performance test module: test listing and editing function   - Move getJavaDataModel and getSystemDataModel to AgentController class.,move
[issue:1475] moved conainer init code in a seperate class,move
"Revamped bootstrap process: * Configuration properties and context specific functions are now   all defined directly in the """"joo"""" object (package):   custom debug  _loadScript  loadScriptAsync and localization   properties must now be set before loading the Runtime.   JooRuntimeTestCase does so in order to set up everything for   Rhino. * All script loading methods have been moved to Runtime's   jangaroo-module.js * A debug-compiled concatenation of Runtime classes    previously called """"jangaroo-runtime-debug.js""""  no longer   exists. Instead  either """"jangaroo-runtime.js"""" is used  or the   former """"jangaroo-runtime-debug-classes.js""""  which has been   renamed to """"jangaroo-runtime-debug.js"""". This is consistent   with all other modules  which are either loaded as concatenated   modules without white-space  or as single classes with all   white-space and comments. * The class loader is created based on the configuration by the   function joo._createClassLoader(). If any localization property   is set  a Resource BundleAwareClassLoader is created  otherwise   a DynamicClassLoader is used. We could add a flag for   non-dynamic class loading to use the StandardClassLoader    avoiding a bit overhead if all classes are loaded statically. ",move
* Renamed TransportType to IoServiceMetadata * Added IoServiceMetadata.hasFragmentation() * Added DefaultIoServiceMetadata * Removed static fields in IoServiceMetadata which caused bad coupling * Removed IoSession.getTransportType() because IoServiceMetadata can be retrieved via IoSession.getService().getMetadata() * Removed transport.socket.nio.support package  and moved the classes there to transport.socket.nio.  Datagram transport doesn't use wrapper anymore. * Fixed freezing SocketBindTest      git-svn-id: https://svn.apache.org/repos/asf/mina/trunk@565735 13f79535-47bb-0310-9956-ffa450edef68,move
HH-82522 move StatsDSender to common config,move
[MCHECKSTYLE-123] start some refactoring with moving rss generation to a dedicated component.  git-svn-id: https://svn.apache.org/repos/asf/maven/plugins/trunk@813614 13f79535-47bb-0310-9956-ffa450edef68,move
* removed IcyFileUtil and IcyNetworkUtil classes. * persistent Ribbon minimized state. * fixed multiple carriage return in Plugin detail panel description. * moved actions from Preferences code. * modified internet connection monitor icon.,move
NOJIRA:  Move @ResourceMapping from EmergencyAlert to the LifecycleControler;  rename GET-FEED -> GET-NOTIFICATIONS-UNCATEGORIZED (because we're going to start reusing it),move
o moved static methods to an utility class so we could test them o updated javadoc  git-svn-id: https://svn.apache.org/repos/asf/maven/plugins/trunk@582614 13f79535-47bb-0310-9956-ffa450edef68,move
FACES-1934 Move functionality that writes of <eval>...</eval> section from PartialViewContextCleanupImpl to new PartialViewContextScriptImpl class,move
removed unused event source code; moved parts to pb,move
Added shutdown lifecycle event and moved lifecycle into WebBeansBootstrap. Removed postProcess method which is unused from DeploymentHandler.,move
Removed unecessary class and moved its content into EvaluatorFilter,move
added a global flag permission section to the config  moved a few things around,move
API: moved isNewObject to ERXEOControlUtilities,move
DataComposer initialization moved to InitListener,move
Test moved from PmTableTest to PageableCollectionTestBase,move
rm abstract class and move all code into the only implementing class,move
retire monolithic clientTest  vreak out into smaller  individual tests; move some tests under service.,move
Fix typo + move methods getValue and getUnit into ProjectDiskUsageActionFactory class.,move
added support for head and options  moved setHeaders(String) to script fixture as got forgotten  removed support for fit variables starting with $,move
Cleanup publishing of blob information to zookeeper: move everything to class BlobManagerSetup.   git-svn-id: svn+ssh://dev.outerthought.org/outerthought/lilyproject/trunk@4719 b80d95f8-e103-0410-bd55-e03a9dc29394,move
Eliminate RavenUtils from Raven and add logging to ClientExample  RavenUtils is no longer needed by the new Raven client. All logic has been moved to either the Client or the new Utils class. Logging has been added to the ClientExample  so you can see what's going on in the background.,move
meta data cache code moved to cache package,move
added navigation history across IView instances  fixed some glitches with editor focus ownership and caret movement but still way to go,move
o moved interpolate() to DoapUtil and take care of array o using interpolate in doapOptions parameters o improved/added test cases  git-svn-id: https://svn.apache.org/repos/asf/maven/plugins/trunk@1057614 13f79535-47bb-0310-9956-ffa450edef68,move
check method's parameters  move CompilationUnit to ContainerManager,move
"Code cleanup in preparation for release of 3.0. - Simplified """"protocol"""" structure  - Moved ConfigLocator logic into HibernateConnection  - Split large HibernateDatabase class into multiple implementations  - Added javadoc  - Test and test data reorganization  - Removed slf4j dependency ",move
beginning work on 0.7.  incorporating the TripleSource interface from corleone into the main API  moving all the DataSource specific bits into it's own package re: #25.  Also removing the proxy objects flags since it was obsoleted and deprecated in the previous version re: #32.,move
Reimplemented escape() for 2x speedup  * Replaced the escape() method with a much simpler method that   produces on the order of 2x speedup.  * Moved the utility functions to Util and made them public,move
Refactoring of Content heirarchy: * Removed HtmlContent - moved processing logic into HtmlContentProcessor. * Merged ContentStub and BaseContent into InMemoryContent and used that everywhere instead.  --HG-- rename : src/main/java/com/opensymphony/sitemesh/BaseContent.java => src/main/java/com/opensymphony/sitemesh/InMemoryContent.java,move
JCBC-855: Improve writability of integration tests  Motivation: ----------- When writing an integration test case that has special requirements (like a dedicated bucket  avoid the flush phase  use a different bucket name  ...)  it has become very difficult to rely on inheritance of ClusterDependentTest base class (as JUnit doesn't behave very well with abstract parent classes). There was a need for a different more flexible approach.  Modifications: -------------- Most of the code mutualized in ClusterDependentTest has been moved into a CouchbastTestContext class. This context holds the references to the Cluster  Bucket  BucketManager  etc...  It also provides utility methods to perfom assertions on the context (eg is N1QL available) and lifecycle management (cluster disconnect  ...).  Such a context should be created in a @BeforeClass method on each test case instead of it extending ClusterDependentTest  by using the CouchbaseTestContext.builder() builder.  ClusterDependentTest has been made deprecated and is mirroring the old behavior by relying on CouchbaseTestContext internally.  Thanks to that  tests that were previously ignored have been reactivated.  Results: -------- Using the CouchbaseTestContext with the associated builder allows for far more flexible integration tests. For example it is possible to set a specific bucket name then to have it being created in an adhoc way (by appending a timestamp to the given name)  so that it can be destroyed after the testcase.  Change-Id: Ibf80a144ec0d01fa18f26ca6474bf317955cd4bc Reviewed-on: http://review.couchbase.org/57375 Tested-by: Simon Baslé <simon@couchbase.com> Reviewed-by: Michael Nitschinger <michael.nitschinger@couchbase.com>,move
EMAILPLT-141 Move caching to service layer; redo dao interface,move
Removed the weightings utility class by moving its very limitted factionality elsewhere,move
o moved code from ArtifactUtils to ProjectInfoReportUtils  git-svn-id: https://svn.apache.org/repos/asf/maven/plugins/trunk@676753 13f79535-47bb-0310-9956-ffa450edef68,move
refactor: move implementation of Prepared and Callable statements to PgPreparedStatement and PgCallableStatement  Note: the code is moved as is  no reformatting happens on the way for easier comparison  closes #459,move
Work moved to point where reflex tests are created,move
Post HTTPCLIENT-1372 cleanups; all multipart entity generation logic moved to MultipartEntityBuilder  git-svn-id: https://svn.apache.org/repos/asf/httpcomponents/httpclient/trunk@1495409 13f79535-47bb-0310-9956-ffa450edef68,move
Ashish  Ashok | #1973 | Refactoring CampaignMessageAlert  moving it from service to OBD.,move
Simplification/generalization of code and addition of activemq product.  Also moved product configuration files to products directory,move
adding first pass of compile-time guice. Also moving stuff to internal to make ConstructionProxy and Reflection classes available there.  git-svn-id: https://google-guice.googlecode.com/svn/trunk@435 d779f126-a31b-0410-b53b-1d3aecad763e,move
"FACES-1895 Develop alloy:pickDate component (Document types of maximumDate/minimumDate attributes. Move toJavaScriptDate() logic from PickDateUtil to new encodeDate() method in PickDateRenderer.) FACES-1897 Develop alloy:inputDate component (Document types of maximumDate/minimumDate attributes. Move getDateAtMidnight() from PickDateUtil to InputDate.)  Conflicts: 	alloy/src/main/java/com/liferay/faces/alloy/component/pickdate/PickDateUtil.java ",move
"Add DateTime utility class that moves the date parsing features out of GraphHandler and CliQuery where they can be shared by the API and other tools. Add millsecond absolute timestamp parsing Add month relative time option with the """"n"""" character that works over 30 day periods Refactor the date/time specific calls out of GraphHandler Modify CliQuery to use the new date/time parsing so folks can now enter relative or timestamps via the command line Add unit test class for DateTime.java Allow override of local timezone via config file  Signed-off-by: Chris Larsen <clarsen@euphoriaaudio.com> ",move
getRequestParameterMap() moved from FormValidationService to WebUtilsSerivce,move
WIP: Adding caret movement history to SourceCodeView,move
"Refactor XPathRule  to support a """"version"""" property (currently defaulting to 1.0)  which will cause an underlying XPathRuleQuery to be used to handle the XPath query.  The current XPathRule logic is moved into JaxenXPathRuleQuery  for 1.0 version.  A SaxonXPathRuleQuery is added  for handling 2.0 and 2.0 compatibility mode versions.  The Saxon implementation will be completed in a future commit.   git-svn-id: https://pmd.svn.sourceforge.net/svnroot/pmd/trunk@6478 51baf565-9d33-0410-a72c-fc3788e3496d ",move
FACES-2021 Prepare for OSGi by moving impl classes to internal sub-packages in order to clearly distinguish API from implementation (remove bridge-api dependency on liferay-faces-util and streamine factory APIs),move
[java] Move rule SignatureDeclareThrowsException from typeresolution to strictexception Replace existing rule with the typeresolution-based implementation.,move
Renew slots when MOVED occured during request to Cluster  * It's suggested by http://redis.io/topics/cluster-spec ** antirez/redis-rb-cluster implementation does it  too * Since Redis 3.0-beta 7 introduces CLUSTER SLOTS  it becomes easier * FIXME: It's fully synchronized  so it hurts performance (somewhat poor implementation) ** We can try Reader / Writer strategy to make lock waiting make shorter,move
- Sending requests as OOB (better perf) - Access to client locks via ClientLockTable - Modified semantics of lock acquitsition and thread interruption (same as for ReentrantLock) - Removed synchronized from ServerLock methods - Moved sending of lock responses outside the lock scope. ServerLock.handleView() and handleRequest() only return 1 response max - JIRA: https://issues.jboss.org/browse/JGRP-1660,move
Added listener/event system for show download notification  allows us to set the new filenames in the table as the show information is downloaded. Also moved new file name creation to FileEpisode  and added status enum and field to keep track of each FileEpisode's position in the timeline (added/downloaded/renamed/broken).,move
V2  Koti  Aravind | #00 | Moved creation of care doc from kilkari campaign service to help option handler,move
REFACTOR moved DCT code to own class,move
"Merged revisions 8979-8980 9044-9045 9056 9080-9083 9091 9130-9131 9136-9139 9186-9187 9236 9239 9241 9258 9272 9288 9335 9342 9347 9359 9365 9368-9370 9374-9376 9378-9380 9451 9453-9455 9517 9524 9589-9591 9679 9682 via svnmerge from  https://svn.dev.java.net/svn/hudson/branches/clearcase-0.6-SNAPSHOT  ........   r8979 | redsolo | 2008-04-30 11:12:04 +0200 (on  30 apr 2008) | 1 line      Added new files for UCM activity based change log ........   r8980 | redsolo | 2008-04-30 13:48:45 +0200 (on  30 apr 2008) | 1 line      Moved command lsactivity to ClearTool ........   r9044 | redsolo | 2008-05-06 10:25:55 +0200 (ti  06 maj 2008) | 1 line      Move cleartool executable string into HudsonClearToolLauncher ........   r9045 | redsolo | 2008-05-06 10:37:33 +0200 (ti  06 maj 2008) | 1 line      Removed cleartool executable string away from ClearTool implementations ........   r9056 | redsolo | 2008-05-06 23:57:21 +0200 (ti  06 maj 2008) | 2 lines      Applied path for UcmActivity and UcmHistoryBuilder from Henrik.   Added OutputFormat and ClearToolFormatHandler to help with the clear tool formatting. ........   r9080 | redsolo | 2008-05-08 11:07:51 +0200 (to  08 maj 2008) | 1 line      [clearcase-plugin] Add UCM parsing of changelog.xml (Patch from Henrik) ........   r9081 | redsolo | 2008-05-08 11:21:05 +0200 (to  08 maj 2008) | 1 line      [clearcase-plugin] Add test for writing UCM changelog.xml ........   r9082 | redsolo | 2008-05-08 12:20:52 +0200 (to  08 maj 2008) | 1 line      [clearcase-plugin] Added changlogaction from Henrik ........   r9083 | redsolo | 2008-05-08 13:18:41 +0200 (to  08 maj 2008) | 1 line      [clearcase-plugin] lshistory now returns Reader instead of change logs ........   r9091 | redsolo | 2008-05-10 10:05:07 +0200 (lö  10 maj 2008) | 1 line      [clearcase-plugin] Finished importing UCM changes from Henrik. ........   r9130 | redsolo | 2008-05-11 21:30:12 +0200 (sö  11 maj 2008) | 1 line      [clearcase-plugin] Added patch to remove the """"view"""" from UCM Activity from Henrik Lynggaard ........   r9131 | redsolo | 2008-05-11 22:38:51 +0200 (sö  11 maj 2008) | 1 line      [clearcase-plugin] More test files ........   r9136 | redsolo | 2008-05-11 23:20:01 +0200 (sö  11 maj 2008) | 1 line      [clearcase-plugin] Corrected tests for UcmChangeLogAction ........   r9137 | redsolo | 2008-05-11 23:35:21 +0200 (sö  11 maj 2008) | 1 line      [clearcase-plugin] Fixed failing tests for lshistory ct command ........   r9138 | redsolo | 2008-05-12 00:05:55 +0200 (må  12 maj 2008) | 1 line      [clearcase-plugin] Fixed change log parsing for base and UCM SCMs. ........   r9139 | redsolo | 2008-05-12 00:12:41 +0200 (må  12 maj 2008) | 1 line      [clearcase-plugin] Fixed compile error and tests ........   r9186 | redsolo | 2008-05-12 23:44:07 +0200 (må  12 maj 2008) | 1 line      [clearcase-plugin] Applied patch to remove the """"view"""" from UCM Activity ........   r9187 | redsolo | 2008-05-12 23:47:04 +0200 (må  12 maj 2008) | 1 line      [clearcase-plugin] Applied patch to add sub activities to change log ........   r9236 | lynggaard | 2008-05-14 21:18:27 +0200 (on  14 maj 2008) | 1 line      Dummy change to test developer access ........   r9239 | lynggaard | 2008-05-14 22:18:18 +0200 (on  14 maj 2008) | 1 line      [clearcase-plugin 0.6 branch] UCM changelog page converted to activity based changelog ........   r9241 | lynggaard | 2008-05-14 23:05:55 +0200 (on  14 maj 2008) | 1 line      [clearcase-plugin 0.6 branch] Preparations for UCM tagging support. Need to expose the mkbl cleartool command ........   r9258 | redsolo | 2008-05-15 10:45:50 +0200 (to  15 maj 2008) | 1 line      [clearcase-plugin] Made get methods in UCM UcmActivity @exported ........   r9272 | lynggaard | 2008-05-15 21:43:45 +0200 (to  15 maj 2008) | 1 line      [clearcase-plugin 0.6 branch] build extended changelog (changelog since last not failed build) ........   r9288 | lynggaard | 2008-05-15 22:57:11 +0200 (to  15 maj 2008) | 1 line      [clearcase-plugin 0.6 branch] lsactivity needs the viewname ........   r9335 | lynggaard | 2008-05-16 21:10:00 +0200 (fr  16 maj 2008) | 1 line      [clearcase-plugin 0.6 branch] if the user writes stream: as part of the stream name  then strip it. ........   r9342 | lynggaard | 2008-05-16 21:27:42 +0200 (fr  16 maj 2008) | 1 line      [clearcase-plugin 0.6 branch] extra unittest to locate issue 1706 + 1707 ........   r9347 | lynggaard | 2008-05-16 23:46:39 +0200 (fr  16 maj 2008) | 1 line      [clearcase-plugin 0.6 branch] Cleartool is particular about parameter ordering ........   r9359 | lynggaard | 2008-05-17 16:31:41 +0200 (lö  17 maj 2008) | 1 line      [clearcase-plugin 0.6 branch] add toString method for easy debug ........   r9365 | lynggaard | 2008-05-17 19:43:40 +0200 (lö  17 maj 2008) | 1 line      [clearcase-plugin 0.6 branch] Improve UCM specific changelog (issue #1601) ........   r9368 | lynggaard | 2008-05-17 20:56:14 +0200 (lö  17 maj 2008) | 1 line      [clearcase-plugin 0.6 branch] Ensure changelog action is reset for extended changelog ........   r9369 | lynggaard | 2008-05-17 21:15:08 +0200 (lö  17 maj 2008) | 1 line      [clearcase-plugin 0.6 branch] Improve ucm changelog  provide stream and user for sub activities  ........   r9370 | lynggaard | 2008-05-17 21:20:26 +0200 (lö  17 maj 2008) | 1 line      [clearcase-plugin 0.6 branch] Remove """"seconds"""" from UCM changelog ........   r9374 | lynggaard | 2008-05-18 11:04:33 +0200 (sö  18 maj 2008) | 1 line      [clearcase-plugin 0.6 branch] Fix tokenize issue on branch also ........   r9375 | lynggaard | 2008-05-18 11:48:52 +0200 (sö  18 maj 2008) | 1 line      [clearcase-plugin 0.6 branch] Improve ucm changelog page ........   r9376 | lynggaard | 2008-05-18 12:15:18 +0200 (sö  18 maj 2008) | 1 line      [clearcase-plugin 0.6 branch]Minor change to regexp generation ........   r9378 | lynggaard | 2008-05-18 16:12:56 +0200 (sö  18 maj 2008) | 1 line      [clearcase-plugin 0.6 branch] new UCM fake cleartool setup ........   r9379 | lynggaard | 2008-05-18 16:17:22 +0200 (sö  18 maj 2008) | 1 line      [clearcase-plugin 0.6 branch] re-enable edittype icons in UCM ........   r9380 | lynggaard | 2008-05-18 17:21:04 +0200 (sö  18 maj 2008) | 1 line      [clearcase-plugin 0.6 branch] lsactivity should be run from within the view ........   r9451 | redsolo | 2008-05-19 23:34:31 +0200 (må  19 maj 2008) | 1 line      [clearcase-plugin] Move vob path handling out from lshistory into ClearCaseScm class. Fixed so load rules remove the \ and / before they are used in the lshistory command ........   r9453 | redsolo | 2008-05-20 00:11:46 +0200 (ti  20 maj 2008) | 1 line      [clearcase-plugin] No need to quote the command line args as ArgumentListBuilder already does it ........   r9454 | redsolo | 2008-05-20 00:17:36 +0200 (ti  20 maj 2008) | 1 line      [clearcase-plugin] Fixed problem that was introduced in my refactoring for vob paths ........   r9455 | redsolo | 2008-05-20 00:18:33 +0200 (ti  20 maj 2008) | 1 line      [clearcase-plugin] Added tests for getbranchnames ........   r9517 | lynggaard | 2008-05-21 22:57:08 +0200 (on  21 maj 2008) | 1 line      [clearcase-plugin 0.6 branch] remove full username from changelog as we now rely on hudson users to display that ........   r9524 | lynggaard | 2008-05-21 23:27:19 +0200 (on  21 maj 2008) | 2 lines      [clearcase-plugin 0.6 branch] Defensive code to handle lshistory with empty activity names.    It appears that most (99%) version entries with empty activity names are version 0 or mkbranch items. this code is only there to catch it in case some real version has no activity. However that should ideally never happen ........   r9589 | lynggaard | 2008-05-22 21:36:12 +0200 (to  22 maj 2008) | 1 line      [clearcase-plugin 0.6 branch] Add additional mkview documentation ........   r9590 | lynggaard | 2008-05-22 22:00:22 +0200 (to  22 maj 2008) | 1 line      [clearcase-plugin 0.6 branch] small javadoc update ........   r9591 | lynggaard | 2008-05-22 22:24:47 +0200 (to  22 maj 2008) | 1 line      [clearcase-plugin 0.6 branch] remove old """"extended changelog"""" code  as this is not the way we want to do it  ........   r9679 | redsolo | 2008-05-29 23:08:35 +0200 (to  29 maj 2008) | 1 line      [clearcase-plugin] Fixed so the changelog actions are adding the %c (comments) to the lshistory format ........   r9682 | redsolo | 2008-05-29 23:19:10 +0200 (to  29 maj 2008) | 1 line      [clearacse-plugin] Removed unused class ........   git-svn-id: https://svn.dev.java.net/svn/hudson/trunk/hudson/plugins/clearcase@10146 71c3de6d-444a-0410-be80-ed276b4c234a ",move
#NAME?,move
Deva  Preethi | #211 | Moving Therapy into Patient. 1) Patient has currentTherapy and list of therapies 2) Treatment has therapyUid instead of therapyDocId 3) AllTherapies has been removed 4) Moved TherapyMapper functionality to PatientMapper,move
split doc save method and move part out of script service,move
More refactoring of ERMemoryEntityStore  it's now about as simple they come. All the heavy lifting is handled in EREntityStore which should be moved elsewhere eventually so it can be leveraged by other non relational adaptors.  Populate derived attribute keys with nulls to prevent an NPE inside EODatabaseContext. Not ideal because it will break code that expects to be able to use them in a qualifier  but better than a completely obscure failure inside EOF.,move
working on #62: moving Element creating code from the ActiveLayerModel to the CidsLayerFactory,move
Fix regression in lifted semigroup sum. Move lifted definition in Monoid.,move
ClassUtil: moved findPublicMethod from BeanAttrAccessor to ClassUtil.,move
newtools: added WCETTool class  moved some code into it.,move
HV-955 Moving runWithCustomValidationXml() to separate helper class,move
- Moved PingHeader.PingData from header to message's payload (https://issues.jboss.org/browse/JGRP-1714)  - Removed local_addr from log statement  - Conflicting merge is not logged as ERROR but as TRACE  - Moved FD_SOCK.FdHeader cachedAddrs into message body  - Moved STABLE.StableHeader digest into message body  - Moved FLUSH.FlushHeader digest into message body,move
Reconfigure and enhance async configuration  This commit adds a new async utility method that can execute a method that returns a result in the form of a Java Future object.  - Rename AsyncRunner to AsyncUtils - Add AsyncUtils method get that asynchronously excecutes a Supplier   functional interface and returns a CompletableFuture that can retrieve   the result. - Move threadpool  executor  and scheduling configuration from web app   config to app config - Remove unique threadpool for async event bus  replacing it with async   threadpool excecutor.,move
SONARJNKNS-246 Move global configuration to dedicated component,move
[HER-1865] JDK6u23 breaks GzippedInputStream & W/ARCReaders with different GZIP handling * GZIPMembersInputStream     new workaround class that offers choice of pre/post JDK6u23 behavior and new accessors for finding member boundary offsets * GZIPMembersInputStreamTest     test for above * ArchiveUtils  ARCWriter     move static compress utilities to ArchiveUtils * ArchiveReader  (W)ARCReaderFactory  (W)ARCWriterTest     adapt to use GZIPMembersInputStream * GzippedInputStream(Test)     deleted,move
[MSUREFIRE-23] clean up surefire  move test ng battery  git-svn-id: https://svn.apache.org/repos/asf/maven/surefire/branches/surefire-testng@382036 13f79535-47bb-0310-9956-ffa450edef68,move
Refactored the code to move the SSL handling to the Session configuration instead of the service  git-svn-id: https://svn.apache.org/repos/asf/mina/trunk@1333483 13f79535-47bb-0310-9956-ffa450edef68,move
Version checking release notes moved into appcast description.  Added the old NodeBox icon as the application logo for dialogs. Also added a notification if you have the latest version when explicitly checking.,move
More stuff moved from DefaultDifferenceEngine to Diff.,move
PR: MNG-613 make repository metadata behave more like snapshots with daily updates. next step is to move the version checking to use that instead and fallback to the old files  git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk/maven-plugins@266298 13f79535-47bb-0310-9956-ffa450edef68,move
HV-441: Moving mapping between property and method meta model from BeanMetaDataImpl to BeanMetaDataManager,move
HV-732 Moving group conversion check into GroupConversionHelper,move
HV-421: Moving tests related to handling of illegal method parameter constraints to separate test class,move
processors: moved to core. core: many renames  TestFactory & TestConfig  Tab -> CsvAnalysisReasource  XmlAnalysisReasource started.  git-svn-id: https://bg.upf.edu/svn/gitools/trunk@97 1b512f91-3386-4a98-81e7-b8836ddf8916,move
refactoring: moving some common functionality to JGitCommon,move
refactoring. propper support for variables and function calls. variable/function/path libs are now in seporate package (refactored) - moving to context step by step.,move
[JBIDE-13866] removed hard coded cartridges from openshift-java-client  * removed hard coded cartridges from client (the only consumers were the tests). * Removed constraints from IDomain and IApplication (IApplication#addEmbeddedCartridges(ICartridgeConstraint) etc.) and added LatestVersionSelector * Allow tests to instantiate standalone cartridges with name and version * Made AbstractCartridgeSelector#matches() public since consumers may want to check individual cartridges if they match the selector * moved cartridge selectors to their own public packag moved cartridge selectors to their own public packagee,move
Added support for server-side sorting and much improved paging. Moved query stuff into separate class: CouchQueryResolver.,move
Aravind/Imdad | #00 | Moved handler logic to service methods.,move
"Merged revisions 8979-8980 9044-9045 9056 9080-9083 9091 9130-9131 9136-9139 9186-9187 9236 9239 9241 9258 9272 9288 9335 9342 9347 9359 9365 9368-9370 9374-9376 9378-9380 9451 9453-9455 9517 9524 9589-9591 9679 9682 via svnmerge from  https://svn.dev.java.net/svn/hudson/branches/clearcase-0.6-SNAPSHOT  ........   r8979 | redsolo | 2008-04-30 11:12:04 +0200 (on  30 apr 2008) | 1 line      Added new files for UCM activity based change log ........   r8980 | redsolo | 2008-04-30 13:48:45 +0200 (on  30 apr 2008) | 1 line      Moved command lsactivity to ClearTool ........   r9044 | redsolo | 2008-05-06 10:25:55 +0200 (ti  06 maj 2008) | 1 line      Move cleartool executable string into HudsonClearToolLauncher ........   r9045 | redsolo | 2008-05-06 10:37:33 +0200 (ti  06 maj 2008) | 1 line      Removed cleartool executable string away from ClearTool implementations ........   r9056 | redsolo | 2008-05-06 23:57:21 +0200 (ti  06 maj 2008) | 2 lines      Applied path for UcmActivity and UcmHistoryBuilder from Henrik.   Added OutputFormat and ClearToolFormatHandler to help with the clear tool formatting. ........   r9080 | redsolo | 2008-05-08 11:07:51 +0200 (to  08 maj 2008) | 1 line      [clearcase-plugin] Add UCM parsing of changelog.xml (Patch from Henrik) ........   r9081 | redsolo | 2008-05-08 11:21:05 +0200 (to  08 maj 2008) | 1 line      [clearcase-plugin] Add test for writing UCM changelog.xml ........   r9082 | redsolo | 2008-05-08 12:20:52 +0200 (to  08 maj 2008) | 1 line      [clearcase-plugin] Added changlogaction from Henrik ........   r9083 | redsolo | 2008-05-08 13:18:41 +0200 (to  08 maj 2008) | 1 line      [clearcase-plugin] lshistory now returns Reader instead of change logs ........   r9091 | redsolo | 2008-05-10 10:05:07 +0200 (lö  10 maj 2008) | 1 line      [clearcase-plugin] Finished importing UCM changes from Henrik. ........   r9130 | redsolo | 2008-05-11 21:30:12 +0200 (sö  11 maj 2008) | 1 line      [clearcase-plugin] Added patch to remove the """"view"""" from UCM Activity from Henrik Lynggaard ........   r9131 | redsolo | 2008-05-11 22:38:51 +0200 (sö  11 maj 2008) | 1 line      [clearcase-plugin] More test files ........   r9136 | redsolo | 2008-05-11 23:20:01 +0200 (sö  11 maj 2008) | 1 line      [clearcase-plugin] Corrected tests for UcmChangeLogAction ........   r9137 | redsolo | 2008-05-11 23:35:21 +0200 (sö  11 maj 2008) | 1 line      [clearcase-plugin] Fixed failing tests for lshistory ct command ........   r9138 | redsolo | 2008-05-12 00:05:55 +0200 (må  12 maj 2008) | 1 line      [clearcase-plugin] Fixed change log parsing for base and UCM SCMs. ........   r9139 | redsolo | 2008-05-12 00:12:41 +0200 (må  12 maj 2008) | 1 line      [clearcase-plugin] Fixed compile error and tests ........   r9186 | redsolo | 2008-05-12 23:44:07 +0200 (må  12 maj 2008) | 1 line      [clearcase-plugin] Applied patch to remove the """"view"""" from UCM Activity ........   r9187 | redsolo | 2008-05-12 23:47:04 +0200 (må  12 maj 2008) | 1 line      [clearcase-plugin] Applied patch to add sub activities to change log ........   r9236 | lynggaard | 2008-05-14 21:18:27 +0200 (on  14 maj 2008) | 1 line      Dummy change to test developer access ........   r9239 | lynggaard | 2008-05-14 22:18:18 +0200 (on  14 maj 2008) | 1 line      [clearcase-plugin 0.6 branch] UCM changelog page converted to activity based changelog ........   r9241 | lynggaard | 2008-05-14 23:05:55 +0200 (on  14 maj 2008) | 1 line      [clearcase-plugin 0.6 branch] Preparations for UCM tagging support. Need to expose the mkbl cleartool command ........   r9258 | redsolo | 2008-05-15 10:45:50 +0200 (to  15 maj 2008) | 1 line      [clearcase-plugin] Made get methods in UCM UcmActivity @exported ........   r9272 | lynggaard | 2008-05-15 21:43:45 +0200 (to  15 maj 2008) | 1 line      [clearcase-plugin 0.6 branch] build extended changelog (changelog since last not failed build) ........   r9288 | lynggaard | 2008-05-15 22:57:11 +0200 (to  15 maj 2008) | 1 line      [clearcase-plugin 0.6 branch] lsactivity needs the viewname ........   r9335 | lynggaard | 2008-05-16 21:10:00 +0200 (fr  16 maj 2008) | 1 line      [clearcase-plugin 0.6 branch] if the user writes stream: as part of the stream name  then strip it. ........   r9342 | lynggaard | 2008-05-16 21:27:42 +0200 (fr  16 maj 2008) | 1 line      [clearcase-plugin 0.6 branch] extra unittest to locate issue 1706 + 1707 ........   r9347 | lynggaard | 2008-05-16 23:46:39 +0200 (fr  16 maj 2008) | 1 line      [clearcase-plugin 0.6 branch] Cleartool is particular about parameter ordering ........   r9359 | lynggaard | 2008-05-17 16:31:41 +0200 (lö  17 maj 2008) | 1 line      [clearcase-plugin 0.6 branch] add toString method for easy debug ........   r9365 | lynggaard | 2008-05-17 19:43:40 +0200 (lö  17 maj 2008) | 1 line      [clearcase-plugin 0.6 branch] Improve UCM specific changelog (issue #1601) ........   r9368 | lynggaard | 2008-05-17 20:56:14 +0200 (lö  17 maj 2008) | 1 line      [clearcase-plugin 0.6 branch] Ensure changelog action is reset for extended changelog ........   r9369 | lynggaard | 2008-05-17 21:15:08 +0200 (lö  17 maj 2008) | 1 line      [clearcase-plugin 0.6 branch] Improve ucm changelog  provide stream and user for sub activities  ........   r9370 | lynggaard | 2008-05-17 21:20:26 +0200 (lö  17 maj 2008) | 1 line      [clearcase-plugin 0.6 branch] Remove """"seconds"""" from UCM changelog ........   r9374 | lynggaard | 2008-05-18 11:04:33 +0200 (sö  18 maj 2008) | 1 line      [clearcase-plugin 0.6 branch] Fix tokenize issue on branch also ........   r9375 | lynggaard | 2008-05-18 11:48:52 +0200 (sö  18 maj 2008) | 1 line      [clearcase-plugin 0.6 branch] Improve ucm changelog page ........   r9376 | lynggaard | 2008-05-18 12:15:18 +0200 (sö  18 maj 2008) | 1 line      [clearcase-plugin 0.6 branch]Minor change to regexp generation ........   r9378 | lynggaard | 2008-05-18 16:12:56 +0200 (sö  18 maj 2008) | 1 line      [clearcase-plugin 0.6 branch] new UCM fake cleartool setup ........   r9379 | lynggaard | 2008-05-18 16:17:22 +0200 (sö  18 maj 2008) | 1 line      [clearcase-plugin 0.6 branch] re-enable edittype icons in UCM ........   r9380 | lynggaard | 2008-05-18 17:21:04 +0200 (sö  18 maj 2008) | 1 line      [clearcase-plugin 0.6 branch] lsactivity should be run from within the view ........   r9451 | redsolo | 2008-05-19 23:34:31 +0200 (må  19 maj 2008) | 1 line      [clearcase-plugin] Move vob path handling out from lshistory into ClearCaseScm class. Fixed so load rules remove the \ and / before they are used in the lshistory command ........   r9453 | redsolo | 2008-05-20 00:11:46 +0200 (ti  20 maj 2008) | 1 line      [clearcase-plugin] No need to quote the command line args as ArgumentListBuilder already does it ........   r9454 | redsolo | 2008-05-20 00:17:36 +0200 (ti  20 maj 2008) | 1 line      [clearcase-plugin] Fixed problem that was introduced in my refactoring for vob paths ........   r9455 | redsolo | 2008-05-20 00:18:33 +0200 (ti  20 maj 2008) | 1 line      [clearcase-plugin] Added tests for getbranchnames ........   r9517 | lynggaard | 2008-05-21 22:57:08 +0200 (on  21 maj 2008) | 1 line      [clearcase-plugin 0.6 branch] remove full username from changelog as we now rely on hudson users to display that ........   r9524 | lynggaard | 2008-05-21 23:27:19 +0200 (on  21 maj 2008) | 2 lines      [clearcase-plugin 0.6 branch] Defensive code to handle lshistory with empty activity names.    It appears that most (99%) version entries with empty activity names are version 0 or mkbranch items. this code is only there to catch it in case some real version has no activity. However that should ideally never happen ........   r9589 | lynggaard | 2008-05-22 21:36:12 +0200 (to  22 maj 2008) | 1 line      [clearcase-plugin 0.6 branch] Add additional mkview documentation ........   r9590 | lynggaard | 2008-05-22 22:00:22 +0200 (to  22 maj 2008) | 1 line      [clearcase-plugin 0.6 branch] small javadoc update ........   r9591 | lynggaard | 2008-05-22 22:24:47 +0200 (to  22 maj 2008) | 1 line      [clearcase-plugin 0.6 branch] remove old """"extended changelog"""" code  as this is not the way we want to do it  ........   r9679 | redsolo | 2008-05-29 23:08:35 +0200 (to  29 maj 2008) | 1 line      [clearcase-plugin] Fixed so the changelog actions are adding the %c (comments) to the lshistory format ........   r9682 | redsolo | 2008-05-29 23:19:10 +0200 (to  29 maj 2008) | 1 line      [clearacse-plugin] Removed unused class ........   git-svn-id: https://hudson.dev.java.net/svn/hudson/trunk/hudson/plugins@10146 71c3de6d-444a-0410-be80-ed276b4c234a ",move
"Move getBufferedReader() -> IoUtils * CrawlerJournal.java  IoUtils.java     move getBufferedReader to IoUtils * FrontierJournal.java     add new 'included' tag for log lines (""""Fi"""") * (others)     update for relocated method ",move
Add support for  * Remove conf:redirectRDFRequestsToEndpoint  as it is no longer clear   which one onf multiple data sources would be the target * Move conf:webResourcePrefix from dataset level to server level as   we need to have the same relationship between entity URI  page URL    data URL etc for all datasets * Some work towards separating the concerns of MappedResource between   source-to-web URI mapping and the structure of related URIs on the   web side * Fix some minor issues with namespace declarations,move
Functionality moved to PluginXmlTemplate New file package,move
Working on: MNG-662  o Moved release.properties management to a helper class o Created a helper class for caching/prompting for project-versions o Created a helper class for managing SCM info updates during the release:prepare process o Moved as many of the shared fields out of AbstractReleaseMojo as possible  given the refactor to reactorized processing o Refactored the PrepareReleaseMojo to process a list of projects  and resolve inter-dependencies during transforms  etc. o Refactored the PerformReleaseMojo to adjust to the new helper classes. o Removed the old transformers  since MavenProject.writeOriginalModel() can be used instead  using the modello writer o Bumped the maven-scm versions up to 1.0-alpha-2-SNAPSHOT  and added maven-scm-manager-plexus.    git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk/maven-plugins@227148 13f79535-47bb-0310-9956-ffa450edef68,move
"Redo substitution resolving to better handle complex cases.  The main idea of this patch is to introduce """"partial resolution"""" which means resolving only the minimum branch of the object tree to get to a desired value. By using partial resolution whenever possible  more interdependencies between substitutions are permitted.  ConfigDelayedMergeObject was a big problem because a lot of the code in AbstractConfigObject really didn't work on it  because it assumed a resolved object; much of that code now moves down to SimpleConfigObject. ",move
(from Wonder 2.0) moved makeEditableSharedEntityNamed from ERXUtilities to ERXEOAccessUtilities,move
DF# QCADOOMES-2275 moved filling quantities to beforeRender from listener,move
[MECLIPSE-364] incorrect dependencies with different projectNameTemplates in submodules EclipsePlugin - Moved calculateProjectNameTemplate() to IdeUtils and parameterized. - IdeUtils.calculateProjectNameTemplate() is now called once in setup to set the value of projectNameTemplate   All previous uses of calculateProjectNameTemplate() now refer to getProjectNameTemplate() - getProjectNameForArifact() now checks if the project is in the reactor and uses getProjectNameTemplateForMavenProject() to    use that project's name template definition and not the current project's definition - getProjectNameTemplateForMavenProject() looks for the variables in the specified project pom and uses IdeUtils.calculateProjectNameTemplate() to return the project name template AbstractIdeSupportMojo - refactored isAvailableAsAReactorProject method body into getReactorProject which returns the project out of the reactor.   isAvailableAsAReactorProject justs checks for against null from getReactorProject - modified test project-34 to use projectNameTemplate   the side effect of this is that the generated classpath for the web app MANIFEST.MF uses the eclipse project name for the jar.  git-svn-id: https://svn.apache.org/repos/asf/maven/plugins/trunk@727620 13f79535-47bb-0310-9956-ffa450edef68,move
code cleanup  format  and moved implementation to internal class.,move
o Refactoring: Move method.  git-svn-id: https://svn.apache.org/repos/asf/maven/plugins/trunk@1060049 13f79535-47bb-0310-9956-ffa450edef68,move
PermissionEntity refactoring - moved all regexp crap into separate class.,move
- fix error in interval test - do all road checks again when a house was moved from one road to another - code for optimization of segment lengths (not yet enabled)  git-svn-id: http://svn.mkgmap.org.uk/mkgmap/branches/housenumbers2@3450 25d90789-57f7-4ee0-8453-03a3dfeeeb22,move
"Revert """"replace test inheritance by @Rule...""""  This reverts commit 2c21c4e1d15bbbdf7f317be1dd902f1b33efe559. This commit has been moved into features/refactoring-tests ",move
Removed DozerInitializer and moved code into Builder (#608),move
The viewer layer now has the correct bounds.  Previously  zooming in too far would stop showing the canvas. This came because of incorrect bounds. Now  we set the bounds of the viewer layer to the bounds of the grob. We have a special case for non-grob objects.  The viewer layer is now set using setOffset() instead of moved to the center in the drawing.  This can be further be optimized by not repainting the entire viewer but just the viewer layer. However  for that to work  the handles also need to be drawn inside of the bounds of the grob  which is not the case.,move
- Replaced Channel with JChannel (https://issues.jboss.org/browse/JGRP-2018) - Moved JChannel.MyProbeHandler into separate class JChannelProbeHandler,move
#9 preparing ... moved the lightweight meta objects related methods to the dbserver,move
Extracted the move logic from the Bucket model. #18,move
Remove InterceptorHolder  All values are moved to ProxyConfig,move
Rewrite RealMapBinder to use InternalFactory  This CL is a performance refactor.  This does change the SPI dependency tree  in a way I believe more accurately describes the dependencies of each of the maps provided. Previously the dependencies for all maps was just a dependency on the entrySetBinder  which contained providers for all of the values. The new implementation has dependencies directly on the Vs for Map<K  V> and the multimap versions (e.g. Map<K  Set<V>>)  and dependencies on Provider<V> for Map<K  Provider<V>> and the mutimap versions (e.g. Map<K  Set<Provider<V>>>).  This implementation follows the same pattern as OptionalBinder  notably * All the mutable state is moved into a new inner class named BindingSelection * Calculating keys + set names is delayed until configure()/initialization time * None of the factories need circular deps resolution  Caliper benchmarks show an improvement in all four bindings provided by MapBinder: https://caliper.[].com/runs/280cbcdd-9853-46a6-9852-2d591fc8b848 bfa5c0d0-002a-4eaa-9984-d4ac459daf16#r:scenario.benchmarkSpec.methodName run.label (command used: [] run --run_under=perflab -- experimental/users/lukes/benchmarks:InjectionBenchmark -b timeMultimapBinderMultimapBinding timeMultimapBinderMultimapProviderBinding timeMultimapBinderMapBinding timeMultimapBinderMapProviderBinding -t 3 -r {head  with_change})  This has been run on the tap train and no failures are believed to be associated with this CL: []  ------------- Created by MOE: https://github.com/google/moe MOE_MIGRATED_REVID=133630536,move
HV-1595 Move ConstraintValidatorPayload to ConstraintValidatorContext,move
getClauseProviders() also moved from PrologImplementor to TheoryManager.,move
various changes to the pull request from 2010-11-03 (uoccou).  Cleaning up things  removing commented out code  removing unused fields & imports.  removing 1.6 specific bits.  some refactors to make the jena bits as independent of the sql stuff as possible  though this still needs some work -- sdb and tdb really will end up needing their own factories  sdb at least.  and moving the sql bits into their own directory rather than having them in the core.,move
- refs #327   - Moved tests to appropriate location (supose-filter-model).   - Implemented first methods in Filter which can be used in scanning     mode.   git-svn-id: http://svn.serverix/supose/branches/B_327@545 2a5690f4-4b40-0410-ba62-85a317ce182b,move
LILY-505: resolved some merge conflicts due to move of DerefMap and delete old DerefMap,move
OPEN - task 69: Add states to execution of OPD  https://github.com/vainolo/Object-Process-Programming/issues/issue/69  Continue to move functions from OPMAnalysis to OPDAnalysis. Almost there....,move
Refactoring of stages * removed Stressors (as a concept)  logic moved to stages * statistics moved to separate package * stages moved to packages according to used features * refactored logics out of stresstest stage to separate classes,move
FACES-1890 Move faces-config processing from liferay-faces-bridge-impl to liferay-faces-util,move
Refactored the KenyaEmrUiUtils utility class into a singleton bean and moved it into the API layer so it's accessible to other modules,move
part of issue 526 -- move MoreTypes.memberKey into LineNumbers.  LineNumbers was its only use  and the way LineNumbers used it  it was heavily dependent on the implementation staying the same (one area constructed its own key to insert into a hash map  and another area used the method to reconstruct & retrieve from the map).  git-svn-id: https://google-guice.googlecode.com/svn/trunk@1198 d779f126-a31b-0410-b53b-1d3aecad763e,move
Indexerconf: move the active behavior  more specificaly the Value.eval() method  out of the indexerconf model and into a new class ValueEvaluator. This way  the indexermodel becomes pure configuration data  and important indexer behavior like blob extraction is not burried deep down into some indexerconf class. This also enables (but not done yet) to separate out the indexerconf from the indexer and make it usuable by the indexermodel tools to validate the correctness of the indexerconf.   git-svn-id: svn+ssh://dev.outerthought.org/outerthought/lilyproject/trunk@4263 b80d95f8-e103-0410-bd55-e03a9dc29394,move
Review fenix-framework-indexes    * Move invocation to `updateIndexes()` to `IndexesConfig`and rely on     invocation to super.   * BUGFIX: NullPointerException in `updateIndexes()` when DML has no indexed     slots.   * BUGFIX: BPlusTree.getKeys() was not returning the keys  as expected,move
* Added DatagramServiceConfig * Moved IoServiceConfig.sessionRecycler to DatagramServiceConfig  git-svn-id: https://svn.apache.org/repos/asf/directory/trunks/mina@448115 13f79535-47bb-0310-9956-ffa450edef68,move
Use the new dgs parser. Old one is moved to org.graphstream.stream.file.dgs.oldFileSourceDGS. This fix #13,move
- first commit for moving timer thread pool from ProtocolStack to transport (http://jira.jboss.com/jira/browse/JGRP-737) - merged all thread factories into one (DefaultThreadfactory) - Changed naming of threads slightly (http://jira.jboss.com/jira/browse/JGRP-644),move
Moved rendering examples into examples module  These had been in a temporary package called 'dave'. They've now been moved into qtiworks-code-examples and slightly tidied up.,move
EXOJCR-968: Move DBInitalizer and DBCleaner common code into separated class,move
evaluate() moved from LibraryBase to TermAPI,move
initial taxonomy movement,move
Introduce a cleaner lower level API with the Console interface.  It provides a signal api  access to the underlying terminal capabilities and stty settings. It also brings support for virtual consoles when using remote connections for example.  It’s not much leveraged in the remaining of the code.  Things like cursor movements  etc.. should leverage this information. The AeshInputStream hacks for transforming windows arrow keys can be just removed  and it should also be noted that the AeshInputStream does not correctly handle the encoding of the input stream and assumes the default charset  which is always not the case  especially on windows.  The only external dependency on those 3 new packages (api  impl  utils) is the LoggerUtil class. This means that this can easily be extracted as the very-low component.,move
Bug 430859 - DataInput and DataOutput elements cannot be moved in modeler,move
First stab at refactoring maven-archiver to provide file/directory permissions in a more general way in the api. This is necessary to make MNG-632 easier.  o Moved UnixStat a package higher in the tree; it was not only   used by ZipArchiver but also by TarArchiver. Now it's used in   AbstractArchiver.  o Moved the ZipArchiver default file/dir permissions constants   to AbstractArchiver.  o Deprecated some methods in ZipArchiver that are now in AbstractArchiver   (different name). Backwards compatible  ofcourse.  o Updated TarArchiver to synchronize TarOptions' dir/file mode   with the AbstractArchiver's versions. Made them deprecated.    o Added JUnit tests for ZipArchiver and TarArchiver to   test various permissions.  o Fixed coding style on some modified parts.  o Removed some unused imports/fields/local vars.  o Fixed some potential bugs  most notably no exceptions   thrown ( if (..) {  new ..Exception() } -> add 'throw' ).   and a case where the wrong key was used.  Tested against m2 bootstrap.,move
Weakened EModuleManager's assumptions about the EModules it's managing. Among other things  all reflection has been moved out of EModuleManager. This has been done in preparation to mixed-mode execution (i.e.  having an interpreter).,move
Refactored IoUtilities down to nothing  * Some methods moved to ServiceUtilities  and now throw QtiworksRuntimeException if things go wrong * Other methods replaced with analogues in Apache commons-io,move
[java] Moving rules into correct packages according to the new category - Part 1,move
Improve BiomeGenerator and BiomeCache handling  The BiomeCache class has it's implementation moved to Common. Our cache is more efficient for our needs than Mojang's cache  as it can better handle virtual biomes. Our cache has very similar API to Mojang's cache for now.  Previously  there was a biome generator called VanillaBiomeGenerator that had to be special-cased. Now it's up to the implementation of TC-Common (either TC-Bukkit or TC-Forge) to register a vanilla biome generator that properly implements BiomeGenerator.  There is one area left where the VanillaBiomeGenerator should still be special-cased. [Bukkit/Forge]VanillaBiomeGenerator gets its information from Mojang's WorldChunkManager. The Biome(Gen)Base arrays are converted to int arrays. If you would use TCWorldChunkManager (extends WorldChunkManager) to get information from the BiomeGenerator  you would get infinite recursion.  To make the code more maintainable  a check has been added to the [Forge/Bukkit]VanillaBiomeGenerator classes (as well as documentation to the class).,move
major cleanup of the query api.  moved the query language syntax specific functions into the corresponding dialect implementations (finally).  thusly  we only need one query factory that just delegates all query lang specifc things to the dialect.  killed the subclasses of the factory.  killed the subclasses of RdfQuery  all that stuff also moved into the dialect.  then added an ARQ specific SPARQL dialect to support their special Bnode ID syntax.  this organization i think more closely aligns with the normal JPA stuff  and is a win for adding new rdf query language syntaxes.  also provided a work around for the namespaces stuff for when using EmpireUtil.all before ever using an Entitymanager.,move
adding a simple annotation checker which uses isEmpireCompatible from EmpireUtil (actually that was moved into annotation checker) but also checks to make sure the multiplicity annotations are used correctly.  this is sufficient checking for now  we have it built in so we'll add checks as I think of them.  close #21,move
More code moved from SplitDockStation to SplitLayoutManager  git-svn-id: http://svn.javaforge.com/svn/DockingFrames/trunk@270 3428d308-0d2e-0410-b3d4-94d0fefcacdf,move
Vandana Sharvani | #1755 | All the change pack logic is now moved to ChangePackProcessor.,move
Add buttons to set whether or not a fingering pattern includes a closable end.  Ensure tuning wizard supports closable-end fingering patterns.  Move tests of what a FingeringPattern or Tuning contains from WhistleTuningPanel into FingeringPattern.,move
* CDI module moved to configuration module * added loading CDI configuration from XML file,move
added file based rel-record updater  moved forward rel-id handling to a later stage,move
refactoring move moveTreeDocAfter from CelementsWebScriptService to TreeNodeScriptService,move
Throwing exception on failed puppet script  - Refactored VagrantCloudHost to return a response object with logs and status - Moved part of the responsibility to VagrantHelper - Throwing RuntimeException if puppet provisioning has errors (have to parse puppet logs for that),move
PmCacheCfg2: Moved deprecated code to separate classes.,move
Mega-cleanup patch:  * remove obsolete classes and packages  * move new classes to the more appropriate packages  * change the bin/nutch script appropriately  * change the Protocol API in preparation for patches implementing   flexible re-fetch schedules.  Please report any errors (if any? :).    git-svn-id: https://svn.apache.org/repos/asf/lucene/nutch/trunk@359668 13f79535-47bb-0310-9956-ffa450edef68,move
SWITCHYARD-83 Eliminate separate contexts for exchange  message  etc.  Eliminated Context on Message and moved to scoped context on Exchange.  I tried to strike a happy balance here between having a getContext() method attached to everything and doing magic with thread locals in a stand-alone Context object.  The current API will prevent Context from bleeding across exchanges inadvertently  like when you take a message from one exchange and send it with another.,move
NEXUS-6182: Moved param creation to proper place.  As the RC goals lost many of them  like polling related stuff.,move
"Move test method """"testDownloadAndRename"""".  The """"testDownloadAndRename"""" doesn't really rename anything.  It actually is a """"test download episode title"""" test.  As such  it's primarily testing the program's ability to look up shows and listings.  This is all dependent on the provider.  So it really much more belongs in TheTVDBProviderTest  rather than TVRenamerTest.  The method does also test TVRenamer.parseFilename  but that's redundant.  That's exactly what the method testParseFileName does  and testParseFileName does it better.  As a first step  I'm simply copying all the test data  and moving the test method  from TVRenamerTest into TheTVDBProviderTest.  This will be refined in future commits. ",move
[PDB-1082] Move the MQL editor  data access wizard  and chart editor out into PUC,move
Merged revisions 20994 21013 21036 21041 21067 21102 21134 via svnmerge from https://svn.jboss.org/repos/richfaces/branches/RF-9797  ........   r20994 | pyaschenko | 2011-01-13 07:49:52 -0800 (Thu  13 Jan 2011) | 1 line      RF-9797 ........   r21013 | alexsmirnov | 2011-01-13 17:03:54 -0800 (Thu  13 Jan 2011) | 2 lines      CODING IN PROGRESS - issue RF-9797: CSV: make client code compatible with the current wiki document    https://issues.jboss.org/browse/RF-9797 ........   r21036 | pyaschenko | 2011-01-14 09:23:26 -0800 (Fri  14 Jan 2011) | 5 lines      RF-9797   validators and converter hash script rendering were added   validators and converters were moved to RichFaces.csv container   bugfix ........   r21041 | alexsmirnov | 2011-01-14 16:56:14 -0800 (Fri  14 Jan 2011) | 2 lines      CODING IN PROGRESS - issue RF-9797: CSV: make client code compatible with the current wiki document    https://issues.jboss.org/browse/RF-9797 ........   r21067 | alexsmirnov | 2011-01-18 23:55:42 -0800 (Tue  18 Jan 2011) | 3 lines      CODING IN PROGRESS - issue RF-9797: CSV: make client code compatible with the current wiki document    https://issues.jboss.org/browse/RF-9797   Length validator working. ........   r21102 | alexsmirnov | 2011-01-19 15:20:06 -0800 (Wed  19 Jan 2011) | 2 lines      CODING IN PROGRESS - issue RF-9797: CSV: make client code compatible with the current wiki document    https://issues.jboss.org/browse/RF-9797 ........   r21134 | alexsmirnov | 2011-01-20 15:41:01 -0800 (Thu  20 Jan 2011) | 2 lines      RESOLVED - issue RF-9797: CSV: make client code compatible with the current wiki document    https://issues.jboss.org/browse/RF-9797 ........,move
Use update for reftree and workspace polling.  Refactor to remove conditionals in AccurevSCM and move each to its own Delegate. Add Ignore parent changes back. Remove unnecessary HIST commands in changelog calculation. Filter changelog for reftree and workspace based on update log. This avoids promotes upstream being considered as changes. Clean directory before relocation to avoid stale files.,move
Extracted backend-specific features in the ConsistencyPredicates module.   * Implementation moved to the JVSTM/OJB implementation of CPSupport.,move
Further implementation of dependency manager; moved some code from the client to service.acquisition as it is a better place; some further cleanups on client code.,move
adding a stub interface marker to signify Empire specific guice modules  adding this interface to each of the current module plugins. fixing a bug in the empirepersistenceprovider. moved some of the util methods throughout the code to the new util class  named graph stuff  tests on whether a bean is empire compatible. created an empireutil class to keep all of our utility methods. changing the contains methods in entitymanager to search for the object it its named graph rather than globally. removing todos in code that i made issues for. tweaking rdfgenerator to use the describe utility function  and removing old method from all data source implementations. changing empire init so the default module is always auto-added  users no longer have to auto specify it. adding a describe utility function which will do the describe on the named graph the bean is supposed to belong. removing describe method from DataSources,move
Command line only needs '< '> for command mode  Search mode doesn't need it  so it is better to move this to the CommandLineParser code.,move
Vishal  Abhi #737 Moved container registration details fields to inner object in Container,move
Refactoring for #137 part 1 - moving mixin solving into separate class,move
"Revert """"Vishal #618 moved display logic out of Patient class""""  This reverts commit 69190ba7ecef5e2ceff15da71f0819ca1f506f3b. ",move
JmxUtils finally broken down  Scheduling classes are mostly isolated  started to work on breaking cyclic dependencies (but not finished yet). Sofar the refactoring is stable  but I'm going to start to move everything around  so better already commit this intermediate state.,move
delaymean and delayvar were moved to the abstract protocol,move
solved ticket https://issues.jboss.org/browse/RAILO-2223 and moved remaing date caster method in class Caster to DateCaster,move
Created a new class Getter and moved the appropriate get methods,move
Each player should have their own ChunkNetCache instance  also moved more code to the common classes,move
Remove duplicate TextHelper functionality. Move tests of Format to TestElement,move
Removed the AliasReplacingBeanDefinitionParser class from the Region/bean definition parsing hierarchy moving the remaining methods: getBeanClass  getRegionFactoryClass and isSubRegion to the AbstractRegionParser class.  Modified ClientRegionParser to extends AbstractRegionParser directly and provide an supported doParseRegion method since ClientRegionParser overrides doParse directly.  Modified AbstractRegionParser class to extend org.springframework.beans.factory.xml.AbstractSingleBeanDefinitionParser directly changing the overridden doParseInternal method from AliasReplacingBeanDefinitionParser to the overridden to doParse method from AbstractSingleBeanDefintionParser.,move
ActiveScope cleaning continued  mixins filtering is moved to another class.,move
finished moving the painting code into the renderers  Issue number: Obtained from: Submitted by: Reviewed by:,move
Rename RequestFactoryParser to RequestFactory.Builder.  It's not perfectly a builder  but it fits the pattern of embedding the builder or factory within a type.  Also rename Response.isSuccess() to Response.isSuccessful().  Also rename RequestAction to ParameterAction. These are only used for request parameters.  Also move all utility methods into the same class  Utils.java.,move
FIX: 73f58dc56a broke XML variant of scripting console response  and will   produce incompatible structure (extra nesting with scriptExec element).   moved ScriptExecution code to ScriptModel  which is now a bean  not Map.   XmlMarshaller is extended to support simple JavaBeans to XML marshalling    borrowing annotation classes from javax.xml.,move
Bug 383962 - Reconcile BPMN2 element creation mechanisms. Started movin BPMN2 element factory to Bpmn2ModelerFactory. Miscellaneous bug fixes.,move
Bugs fixed:     * Syntax highlighting (huge)     * Text replacement (Find/Replace) (huge) Other:     * Moved architecture destroy implementation from StudioFrame to       ArchHandler,move
eliminated deprecated class Predef; turned static methods into instance methods and moved them into class Specification,move
- Added TimeBasedRolloverTest to the list of excluded tests in pom.xml as it takes as much as 12 seconds to execute - Modified Modified ConsoleAppenderTest to output nothing on the console. In a related change  TeeOutputStream now    admit a null parameter in the constructor - Moved delaying methods into DelayerUtil class - Silent tests are beautiful.,move
refactored all Graph related classes into rinde.sim.core.graph.* package  removed PathFinder class  moved functionality to Graphs class,move
EllipsoidFactor: move principal component calculation into its own class,move
"IndexUpdater fix: when a record changes so that a different <include> rule from the indexerconf matches  a different set of vtags might become active  in such case deletes must be done on solr to remove the entries corresponding to the old vtags.  For the IndexUpdater to be able to do this  it needs to know what <include> rule matched before  hence it needs both the old & new record state. This is exactly the same as what we need for evaluating the IndexRecordFilter in the IndexAwareMQFeeder  and is put into RecordEvent by IndexSelectionRecordUpdateHook. Therefore  the information provided by this hook is now also useful for IndexUpdater.  Additionally  for update of denormalized data to work  records which are not indexed by themselves but are accessed through dereference expressions also need to be matched by the IndexRecordFilter. To be able to express this  we need to support include rules with empty vtags: <include {conditions} vtags=""""""""/>. This basically says: include the record  but don't index it. The same could be achieved by <match> rules to exclude the record from indexing  but that's more expensive (the recordfilter decision can be made without even loading the record) and (currently) doesn't help much with dynamic fields either.  Solving all this brought a couple of other changes with it:  * Refactored VTaggedRecord: moved out things which only dependend on RecordEvent (and not on a loaded Record) into RecordEventHelper. Probably could use further refactoring to completely split the two because now VTaggedRecord is also used in cases where there is no RecordEvent. (and then maybe reintroduce a third party to combine them).  * indexer-integration dropped: merged it with engine due to circular dependencies for their tests (engine test now needed the IndexRecordFilterHook). Could have been solved also by splitting indexer-integration into two different projects  but decided that it's ok to have it together with engine.  * Renamed RecordEvent.IndexSelection to RecordEvent.indexRecordFilterData  renamed IndexSelectionRecordUpdateHook to IndexRecordFilterHook.  * Fixed NPE in IndexRecordFilterHook in case of a record update where no record type is specified.  * Pulled out the code to create Record's from the information stored in RecordEvent into a new utility class (IndexRecordFilterUtil) so that it can be reused by IndexUpdater.  * IndexerTest now needs an IndexRecordFilterHook  which depends on IndexerModel which was previously not used in this test. ",move
RecordDecoder: move remaining result-to-record decode related code to RecordDecoder. Remove unncessary scope collection code from ReadContext. Small cleanup.   git-svn-id: svn+ssh://dev.outerthought.org/outerthought/lilyproject/branches/scanners@5399 b80d95f8-e103-0410-bd55-e03a9dc29394,move
[jvstm-ojb] Moved consistency predicate generation out of the CP module.    * This commit reverts the changes added in 4fdeda724b,move
Katta | Moved handling of successful obd call details to obd module,move
o The IoSession is made responsible for encrypting the data when in secured mode o Moved out of NioSelectorProcessor everything which is SSL related (moved to SslHelper) o Get rid of many flags that are not necessary when dealing with SSL handshake o Used a wider buffer for Handshake unwrap o Refactored the complete Handshake logic o Made most of the SslHelper methods private o Added some missing buffer increase   git-svn-id: https://svn.apache.org/repos/asf/mina/trunk@1213441 13f79535-47bb-0310-9956-ffa450edef68,move
Support for menu bar when no documents are visible.  NodeBox menu was moved to separate file  and instantiated from hidden JFrame and from NodeBoxDocument.,move
Overenthusiastic refactoring   * United listeners under StateListener interface  * Moved Listener management under StageBase class  * Moved shared functionality from Monitors to AbstractMonitors class  * Replaced interface Adapters with default interface implementation  * Added some javadocs  * Refactoring on MonitorStartStage,move
Add base classes for Parser implementations to eliminate duplicate code.  Also add a TokenManager wrapper interface and implementations for each Parser.  Ultimately this stuff needs to be moved into Language specific packages.  I expect further effort will need to be done to generalize anything and everything related to Tokenizers  Parsers  ASTs  etc.  We should explore if there's a way to get JavaCC to use actual interfaces for things.  It seems to be generating duplicate one-off implementations  but does not implement a standard set of interfaces.  Once we have 3+ JavaCC implementations in PMD  we really need a way to make them appear identical to all the PMD internals.  Settling on JavaCC as THE standard for PMD seems like the easiest choice for now  we can mix things up in the future once we get it working for the simplest case.  git-svn-id: https://pmd.svn.sourceforge.net/svnroot/pmd/trunk@5931 51baf565-9d33-0410-a72c-fc3788e3496d,move
Deprecated DownloadFile; move URL download into DownloadFileByHash  Possible to download files into our CAS now (though not implemented I believe),move
FitEllipsoid: Move removeNulls() to new class  ArrayHelper,move
[HER-1636] H3: Failed get of replay char sequence due the OutOfMemoryError: Map failed (port HER-1482) (from nlevitt's H2 commit message:) * InMemoryReplayCharSequence.java     new  simple ReplayCharSequence that supports any encoding  keeping everything in memory * GenericReplayCharSequence.java     If the encoding supports random access  memory maps the backing file directly; otherwise decodes to UTF-16 and maps that. Supports the first Integer.MAX_VALUE bytes of the file. Maps up to 64M; moves the map around as necessary for larger files. * Latin1ByteReplayCharSequence.java     removed  functionality split between InMemoryReplayCharSequence and GenericReplayCharSequence * ReplayCharSequenceTest.java     xestHugeReplayCharSequence() - uncomment to test a huge replay char sequence     testReplayCharSequenceByteToStringOverflow() - test both UTF-8 and windows-1252 * RecordingOutputStream.java     use the new ReplayCharSequences,move
"* Added IRC chat. * Added DateUtil (Data utilities) class. * Added ExtTabbedPane component (JTabbedPane with ExternalizablePanel support). * T and Z navigation panel moved to IcyCanvas.   So now when you override IcyCanvas you have to take care about panels configurations. * Canvas2D :  - fixed zoom centering when using '+' / '-' buttons.  - added invert mouse wheel axis option. * Improved ExternalizablePanel component  it now uses an IcyFrame for its frame form. * """"multi windows mode"""" support completed.  * Added overlay support to IcyDesktopPane (easy drawing on application DesktopPane). * added authentification support for NetworkUtil.download(...) method. * others fixes or improvements. * some refactoring",move
CW has been moved to RawData model.,move
o Did some refactoring: moving utility methods to EclipseUtils so there's no   confusion as to which project is used.  o Use executedProject everywhere except for acquiring the artifact list; the    executedProject misses that list (that's because no deps are resolved in   the forked lifecycle execution; it's delayed until the plugin is encountered   and it's requiresDependencyResolution is seen.)  o Added flag -Declipse.downloadSources=true|false to skip source downloading   git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk/maven-plugins@289188 13f79535-47bb-0310-9956-ffa450edef68,move
SGF-757 - Move configuration of PDX to a PdxConfiguration class imported by the EnablePdx annotation.,move
[JUnit] Check assertion message present in assertEquals with delta  A missing assertion message for assertEquals(double  double  double) is detected in most cases now. If the assertEquals method has two arguments  an assertion message is missing  if the assertEquals method has three arguments  the first one has to be a string.  Pmd will only print an error if the first argument type has been determined (getType() != null) and isn't a String. Therefore assertEquals(getInt()  getInt()  getInt()) won't be detected as an error. However  double d = 1.0; assertEquals(d  1.0  1.0); will be detected.  The JUnitAssertionsShouldIncludeMessageRule.check method has been moved to the inner class AssertionCall and has been expanded by an isException hook. The assertEquals with three arguments check overrides the isException method  returns true if the first argument can't be determined or is a String and if so  no violation will be added. Also the constructor arguments have been swapped for readability.  https://sourceforge.net/p/pmd/bugs/1313/,move
Refactoring of test stages to get rid of the coordinated ommission problem  * renamed old tests xxx-test -> xxx-legacy-test and moved to different package ** functionality is still there beyond the operation-count based limit * created new tests: these should be always in pairs xxx-test-setup + (xxx-)test (with the same test-name) ** these tests introduce the concept of conversation rather that testing just basic operations ** thread counts are not set directly  test specifies rather frequency of conversations invocation ** removed the option for data-per-thread since we don't have fixed number of threads,move
HV-395 Style changes. Moving to setter/getter approach in ValidationBootstrapParameters,move
Fixed issue where dw would move backwards if cursor was on whitespace at the beginning of a line,move
Made IO compatible with lambdas  moved methods to IOFunctions,move
JCBC-676: factory methods for all Query  Motivation ---------- For consistency with the rest of the API and centralization of Query creation  use factory methods on Query rather than public constructors.  Modifications ------------- All xxxQuery constructors made packaged protected  instanciation moved to Query (now an abstract class).  Change-Id: I07a5a5a6c8742301a54e79c3d9a5166879706a58 Reviewed-on: http://review.couchbase.org/45142 Reviewed-by: Michael Nitschinger <michael.nitschinger@couchbase.com> Tested-by: Simon Baslé <simon@couchbase.com>,move
Fix regression in lifted semigroup sum. Move lifted definition in Monoid.,move
Simplified Differ implementations be moving circular reference detection to delegator class and got rid of the abstract base class. Good riddance.,move
refactored all Graph related classes into rinde.sim.core.graph.* package  removed PathFinder class  moved functionality to Graphs class,move
Many small changes: 1) Unit_tests added to the repository 2) DIP_RESULT_ROOT and MEMORY_SIZE_MB settings moved from code to settings 3) Name contains no UPPERCASE letters 4) Imports organized all over the code 5) Bin files revisited for easier execution and running.,move
Added Event DnD functionality - Add is fully functional. Also a lot of other little fixes and changes  EventKeyInput  * Added a '\' activated event add  * Moved KEYS to Event  EventNode  * Made Transferable  * Added an isValid() check  GmMenuBar  * Fixed a potential Locale bug (see javadoc for String.toUpperCase())  Listener  * Changed stringToRes to use reflection rather than conditionals  * Some changes to the canImport method to prevent unwanted mouse cursors  MDIMenu  * A bit of shuffling around  no major changes  MDIPane  * Removed TODO catchblock comments  ResNode  * Simplified isDataFlavorSupported() for the same reasons as the changes to Listener  Gm6FileReader  * Some restructuring of code (private static fields rather than parameters)  * Fixed some Exception code  * Re-prefixed string keys to start with class name  updated messages.properties accordingly  Event  * Added some convenience constructors  * Moved the KEYS list to here  * Added compareTo and equals functions  EventFrame  * Added DnD functionality  * collision and keySelect are now disabled and enabled on selection  * Added a replace checkbox - not coded yet  GmObjectFrame  * Added EventInstanceNode and EventGroupNode classes to simplify things a bit  * Added addEvent function which correctly inserts/adds a new Event  selects it and scrolls the tree to display it  SpriteFrame  * As IsmAvatar so subtly suggested I do  I've extracted the two main panels of SpriteFrame into separate functions  git-svn-id: https://lateralgm.svn.sourceforge.net/svnroot/lateralgm@115 8f422083-7f27-0410-bc82-93e204be8cd2,move
Shruthi | #0 | Moved Treatment inside Therapy,move
newXPathEngine() moved to DocumentUtils. Removed unneded exceptions.,move
Attached is a patch to fix the current issues with building under jdbc1.   This patch moves the logic that looks up TypeOid  PGTypeName  and SQLTypeName from Field to Connection.  It is moved to connection since it needs to differ from the jdbc1 to jdbc2 versions and Connection already has different subclasses for the two driver versions.  It also made sense to move the logic to Connection as some of the logic was already there anyway.  Barry Lind,move
"BalajiN | #40 | Refactoring  	1. Moving insert method to the repository layer 	2. Breaking up tests 	3. Removing unused update method 	4. Extracting out the validation logic from patient 	5. Using the correct enum for validating weight instance ",move
fixed test  moved other test from examples to core,move
* ROI:  - added 'group' field (basically to allow grouping ROI for specific operation)  - added getLength(Sequence) method to compute length/perimeter with Sequence pixel size information.  - added getEffectiveDimension(..) dimension method.  - added unselectAllPoints() method.  - moved some methods to ROIUtil.  - much more interaction with 3D VTK display (can now move and modify ROI directly through 3D view). * ROI2D:   - added support for Z dragging operation.  - some cleanup and tweaks * ROI2DShape:   - many changes to add interaction with VTK rendering.  - safer VTK rendering. * ROI2DPoint: better VTK rendering. * ROI2DArea:  - safer VTK rendering.  - fixed a small issue where VTK display wasn't correctly updated on drag operation.  - other minor tweaks and improvements. * ROI3D:  - added ROI3DPainter class for easier display and interaction for 3D ROI.  - added isOverEdge(..) method.  - added ROI3DShape: abstract class for 3D Shape ROI.  - added ROI3DPoint: 3D point type ROI.  - added ROI3DLine: 3D line type ROI.  - added ROI3DPolyline: 3D polyline type ROI.  - added ROI3DStackShape: abstract class for 3D Stack Shape ROI.  - added ROI3DStackEllipse: Ellipse 3D stack type ROI (available from stacking operation).  - added ROI3DStackPolygon: Polygon 3D stack type ROI (available from stacking operation). * ROI3DStack:  - fixed setName(..) methods so children get modified as well.  - deprecated getUseChildColor()/setUseChildColor(..) methods. * ROI3DArea:  - safer / optimized VTK rendering.  - added ROI3DArea(BooleanMask2D  zMin  zMax) constructor.  - added isOverEdge(..) method. * ROIUtil:  - moved methods from ROI: getUnion(..)  getIntersection(..)  ...  - added convertToStack(..) method to convert 2D ROI to 3D Stack ROI.  - added convertToMask(..) method to convert Shape ROI to Area ROI.  - added convertToShape(..) method to convert Area ROI to Polygon ROI.  - added getConnectedComponents(..) to separate and retrieve connected components from an input ROI.  - added copyROIProperties(..) to copy properties from an input ROI.  * ROI Action:  - added 'convert to stack' operation to convert 2D ROI to 3D Stack ROI.  - added 'convert to mask' operation to convert shape ROI to Area ROI.  - added 'convert to shape' operation to convert area ROI to Polygon ROI.  - added 'separate objects' operation to separate connected component from Area ROI.  - added 'manual cut' operation to manually cut/separate ROI (not yet implemented).  - added 'automatic split' operation to automatically split ROI given their shape (not yet implemented). * ROI Panel:  - can now modify position / size of multiple ROI at same time.  - removed copy/paste ROI link operation. * GUI:  - added a new tooltip to explain where is the main menu.  - added java 6 warning for OSX users.  - first menu task is now dedicated to ROI operation only:    - removed image open/save actions.    - re-organized ROI creation actions.    - added many ROI operation actions. * Anchor2D:  - added integer Z position information (for 3D position of 2D ROI)  - added VTK display and interaction support (allow ROI2D manipulation with VTK). * PathAnchor2D: fixed visibility for closing point. * BooleanMask2D:  - added getConnectedContourPoints(..) method to retrieve contour in 'connected' order.  - minor change to make it safer. * IcyCanvas: added canvasToImageLogDeltaZ(..) method  this is the Z equivalent to canvasToImageLogDeltaY(..) / canvasToImageLogDeltaX(..) methods. * IcyCanvas2D: improved setMousePos(..) method to be safier. * IcyCanvas3D: added methods to handle mouse (image) position. * Canvas2D: reversed panning direction from keypad keys. * VtkCanvas:  - added getWorldZ(Point) method to retrieve Z depth for a given 2D canvas position.  - added worldToDisplay(Point3D) method to convert a 3D world point to canvas 3D position.  - added displayToWorld(Point) method to convert a 2D canvas position to a world 3D point.  - implemented imageToCanvas(..) and canvasToImage(..) from previous added methods.  - implemented getScaleX/Y() methods.  - implemented setMouseImagePosX/Y/Z(..) methods.  - mouse event now provide a correct mouse position.  - removed the enable picking on Mouse Move switch. * VtkUtil: simplified getSurfaceFromImage(..) method. * IcyVtkPanel: added proper event consuming. * SystemUtil: added getJavaVersionAsNumber() method * IcyExceptionHandler: added anti spam protection for report(..) method. * FileUtil: added getFiles(..) method to easily retrieve file with a specific extension without using a FileFilter. * XMLUtil: added filtering to avoid incorrect character in name/attribute fields. * IcyCommandButton: added setPopup(..) method to enable popup action. * ToolTipFrame: added support to open external browser when clicking on URL. * ROIPerimeterDescriptor: modified to use the new ROI.getLength(..) method.,move
Adding DomainRoot causes split in core  plus additional refactorings.  In this commit many files got moved around.  See below for details on some decisions and features already ported to the new version of the framework.  * Abstract support for BackEnd.  Each back end must implement the   `pt.ist.fenixframework.core.BackEnd` interface (and  typically  to provide a   subclass of `Config` that supports setting it up appropriately).  Closes #8.  * Closes #10: It was a design decision that the `DomainRoot` (DR) should be a   part of the `fenix-framework-core` (core).  Given that the DR must be   modelled in DML  then the core must run the DML compiler.  Thus  the DML   compiler must be moved out of the core (because of how maven dependencies   work).  This is accomplished in a new module `fenix-framework-dml-compiler`   (dml-compiler).  This module also gets the `DomainObject` (DO)  the   `AbstractDomainObject` (ADO)  and the default `PojoCodeGenerator` (PCJ).   Any code generator should generate domain classes that inherit (directly or   not) from ADO.  Any concretization of a domain model requires the   implementation of the `getExternalId()` and `getOid()` methods (from DO and   ADO  respectively).  * Now the core depends on the `dml-maven-plugin`  which implies that code used   by the plugin must be moved out of the core  namely the `Project` and   `DmlFile` classes.  This led to the creation of the   `fenix-framework-project` module  on which the `dml-maven-plugin` now   depends  besides depending on the dml-compiler  of course.  Additionally    because the core also contains the `@Atomic` annotation  this was also   extracted and moved to the dml-compiler.  Actually  it makes sense for the   DML compiler to be able to post-process domain classes (inject special   constructor and process `@Atomic` annotations).  * Closes #4.  The persistent-root module was later renamed to domain-root  and   even later it was decided to include the DR in the core.  The well-known ID   of the root object is hardcoded and hidden in each back end through the   implementation of `getDomainRoot()`.  * The core provides a default configuration with a default in-memory-only back   end.  Thus  it must provide a concrete implementation of `getExternalId()`   and `getOid()` for the DOs.  It uses a `CoreCoreGenerator` (CCG) that simply   extends the PCJ to set the domain class root to be the   `pt.ist.fenixframework.core.CoreDomainObject` class.  Because the CCG is   used by the dml-maven-plugin  which in turn runs before the main compilation   phase  the CCG must be made available in another module.  This is done in   `fenix-framework-core-code-generator`.  * Regarding issue #13: The ANT task is now on dml-compiler  but still needs to   be moved out of there to a separate module.  * Closes #7.  The transactional interface is not finished  but when the need   for more changes arises  a new issue should be created.  Moreover    @jcarvalho is looking into this in issue #15.  * Summary of dependencies between fenix-framework modules:    1. fenix-framework-dml-compiler: none.    2. fenix-framework-project: none.    3. dml-maven-plugin: 1  2.    4. fenix-framework-core-code-generator: 1.    5. fenix-framework-core: 1  2 (not yet  but will be added later)  3  4 (via   the plugin).,move
Added moving of all associated files on submission; next step is to leave raw data files,move
Made HttpMethodConfiguration more pure bean like by moving utility methods into a separate class,move
CompletableStage implementation moved to AsyncResult,move
Fixed typo in file/class name and moved getModule to ClojureReplAction with reduced visibility.,move
Refactor Elasticsearch Daos  Some significant restructuring of the elasticsearch daos:  - Combine methods to get search request  response  and result in base   elasticsearch dao. - Instead of throwing an exception when querying an empty index  return   an empty response. - Move all uses of RestHighLevelClient to the base elasticsearch dao. - Handle all IOExceptions thrown by the RestHighLevelClient by   rethrowing as a runtime exception. - Reorganized some additional code in search daos to look nicer.,move
some refactoring: move all translator functionality from formula to org.eclipse.iee.translator.antlr project,move
Katta | Created a separate kilkari service for handling call details (both obd and inbox) moving away from campaign service,move
"split 'ResolveSource' from SubstitutionResolver and ConfigSubstitution.  this is part of a plan to remove SubstitutionResolver (moving the memoized hash to ResolveContext) and to move the """"replacements"""" functionality to ResolveSource. Should be clearer. ",move
refactored userinfo serializer,move
msgpack-value v07 implementation - Add MessageOverflowException to support integer and float types - Using ChannelBufferInput when FileInputStream is passed to the unpacker - Added test cases for reading various types of MessageBufferInputs - Added ValueHolder of integer/float/raw/ext values - Added unpack method targetted to ValueHolder - Throws MessageTypeException when failed to convert the cursor type - Moved msgpack-value code into msgpack-core - Scala 2.11.1 support - Moved ValueType to value package - Added getTotalReadBytes() method - Added ArrayCursor and MapCursor - Introduced ValueRef as a super type of Value,move
Add full Image support to channels.  - Refactor persistence of temporal fields - move persistence methods from Channel/ChannelGroupTranslators to the TemporalTitle/ImageTranslator - Clean up imports on several tests,move
Removed GUI code from Argument  Argument  * Relocated GUI related code to ActionFrame (to keep data/model separate from interface)  ActionFrame  * Added ArgumentComponent class  to handle the things moved from Argument  * Removed the argEdit[] field and replaced with argComp  messages.properties  * renamed Argument.* keys to ArgumentComponent.*  This is part 1 of a 3 part commit  git-svn-id: https://lateralgm.svn.sourceforge.net/svnroot/lateralgm@185 8f422083-7f27-0410-bc82-93e204be8cd2,move
changed phase four to add orthology information  - moved existing phase four (kam building) to phase five - phase four now merges in relevant orthologous relationships,move
Remove globalObject caching from lexicalenvironment and move it to dynjs,move
A lot of refactoring: safety checks  remove LinkedTransferQueue  move code around  unit test coverage...,move
Stats: move stack histogram method into StackStats,move
Main change: Custom parser for expressions - created package ch.njol.lang and moved some relevant files into it - renamed Variable to SimpleVariable and Literal to SimpleLiteral   and created the interfaces Variable and Literal instead. - created a class ExprParser which is responsible for parsing expressions of all sort  Other changes: - Expressions can now only accept single variables  i.e. variables which will only ever return one value at most  and improved/added getters. - Events now init with literals instead of data arrays - Improved/fixed expression to string with 4 different cases (debug with/without event  the expression itself  and the value of the expression) - Improved error handling: errors are now buffered in 'sessions' before they are printed to console or a command sender. This still needs some work though. - Other small fixes/improvements I don't remember,move
Added an exception handle for when Twitter is having problems. Also moved the link for looking up Twitter friends to the logged-in version of the home page.,move
#750 Refactoring  moving selection parameters to common SelectorParameters  repair,move
Resolved issue: * DIRMINA-429 - AbstractIoFilterChain.doWrite slows as outstanding writes increase * DIRMINA-430 - IoSession.getScheduledWriteBytes() slows with size of queue * DIRMINA-431 - Deadlock in VmPipe mode  How I resolved: * Applied the same fix to Datagram transport * Backported all fixes to 1.0 * Moved some common methods to BaseIoSession (AbstractIoSession)    git-svn-id: https://svn.apache.org/repos/asf/mina/trunk@575603 13f79535-47bb-0310-9956-ffa450edef68,move
Bunch of hooks re-added : network is more complete now  lot of basemod cleanup  moving stuff into the registry area,move
Remove Utils and move initMDC to SentryAppender.,move
Added support for @ToString annotation. The code for generating toStrings has now moved from HandleData to the new HandleToString.,move
conversion from openssl to rfc dns moved to OpensslNameUtils,move
Moved the wait methods to a new class and moved goBack to RobotiumUtils,move
Fix wrong saved replace settings. Fix error when used terrain mode Default. Move many terrain settings from world config to biomes. Old settings from world config will be moved to biome.,move
Whatever  lets just move the last listener stuff over,move
chunking support moved to the remoting itself.  This was necessary because it needs to send out command boundaries,move
Closed #124 (Make MockDevice behavior configurable) Refactored mock device to move code from MockConnection to MockDevice where it belongs,move
many elements moved to new mockito style,move
request payload serialization refactor:  - moved payload toJson logic from client to AbstractAction and generalized payload usage across action implementations,move
- Bits.writeLong() and Bits.writeLongSequence() now don't use a temp byte buffer anymore (https://issues.jboss.org/browse/JGRP-1774) - Moved Util.read/writeLong(Sequence)() from Util to Bits - (https://issues.jboss.org/browse/JGRP-1774) - Added description for all targets in build.xml,move
FACES-2165 Remove PortletContainer.create*URL(String) methods FACES-2171 Clarify the contract of BridgeURL by moving URI functionality to the new BridgeURI class FACES-2172 Simplify the class hierarchy of bridge URLs by removing marker interfaces,move
HV-480: Moving test case to XmlMappingTest.,move
Add support for all Minecraft items (lore  fireworks  written books  custom names  etc.); move composites.yml to the database,move
[clearcase-plugin] Moved the change log entry creation into the factory   git-svn-id: https://hudson.dev.java.net/svn/hudson/trunk/hudson/plugins@6366 71c3de6d-444a-0410-be80-ed276b4c234a,move
Simplify `CommitWalkAction`  This moves code specific to either changelog or contributors to the respective subclasses.,move
CDITCK-486 move SynchronousQueue to ApplicationScoped bean.,move
Refactoring - move job-specific handlers to JobSubstitutionHelper  Signed-off-by: Oleg Nenashev <o.v.nenashev@gmail.com>,move
core-pipline and codecs moved tho the new repository https://github.com/rfqu/pipeline,move
implement lems conversion and execution  some refactor  bug fixing  move connection as projection children,move
[BACKLOG-16058] Changes UtilHtmlSanitizer function params and moves name sanitization from ConnectionService to ConnectionServiceImpl,move
"Refactored to introduce DataSource and IRIRewriter  * Major refactoring and cleanup * Expressed much of the logic in terms of new DataSource and IRIRewriter interfaces * Fixed many bugs around inconsistent rewriting of URIs in the process * Started to change terminology from """"URI"""" to """"IRI""""  not yet done * Re-did much of the configuration parsing/reading * Improved detection and display of problems in configuration file * Moved metadata stuff into its own class (MetadataConfiguration) * Metadata templates are now expected in /WEB-INF rather than /WEB-INF/templates * Removed obscure feature: conf:fixUnescapedCharacters ",move
code refactoring: testAll() moved to parent  rules are now added in setUp() using addRule().   git-svn-id: https://pmd.svn.sourceforge.net/svnroot/pmd/trunk@5568 51baf565-9d33-0410-a72c-fc3788e3496d,move
LilyLauncher:  * implement Lily service (rudimentary -- e.g. conf  plugins  etc. still needs thought  for now uses the built-in conf)  * added resetLilyState() to wipe all Lily state and expose it via JMX. It doesn't actually work since the code to stop avro in the class AvroServer is commented out  when activating that again it works though. Will look at this later.  * moved cleaning code from HBaseProxy to new CleanupUtil class.   git-svn-id: svn+ssh://dev.outerthought.org/outerthought/lilyproject/trunk@4933 b80d95f8-e103-0410-bd55-e03a9dc29394,move
"* implement filters in like """"chain of responsibility"""" pattern in Dispatcher and RequestCallback. lots of refactoring  move some better versions of classes from our project to the restygwt",move
IMAP: Move append test to the IMAPAppendTest class,move
Cleanup/consolidation/expansion of *Utils classes * IoUtils.java     remove class that confusingly-overlaps with commons IOUtils; move remaining methods to ArchiveUtils or archive's FileUtils * ArchiveUtils.java  FileUtils.java     receive relocated methods; eliminated deprecated or unused methods * JSONUtils.java     new class to collect common JSON actions * Iteratorable.java     wrap Iterator as Iterable for foreach usage * (many)     update to use alternate utils methods,move
* Overlay: added XML persistence. * Sequence: overlays can now be saved in XML persistence if the overlay.persitence property is set (false by default). * ROI:  - moved basic updateFocus()  updateSelect() and updateDrag() handling in ROI class (was in ROI2D)  - moved basic mouseMove() and mousePressed() handling in ROI class (was in ROI2D)  * ROI2DShape: added support for focus /select state with VTK. * ROI3DStack: fixed minors issues. * ROI3DArea: added support for focus /select state with VTK. * RoiPanel:  - fixed refresh issue on property change for mutilple ROI (as opacity change) * VTK:  - fixed picking operation (broken due to OpenGL2 vtk backend)  - added VtkCanvas.getPickedObject() to retrieve picked object on last mouse press event.  - added VtkCanvas.PickOnMouseMove property to allow object picking on mouse move event.  - moved volume shading switch to the setting panel.  - VtkCanvas.getMouseImagePos() always returns null now.  - minors fixes and cleanup * tweaks and cleanup,move
Addressing issue #20 Refactoring towards native adea Action Toolbar. Also moved all action code into separate classes.,move
XML File Processing Moved into separate package; Dummy classes for annotation and dsl support; Refactoring of XML Loading;,move
* Added SpecialValueSpinner component. * Reworked ROI Panel (not yet completed). * Fixed the infamous JTextField margin error. * ROI:  - added icon property (for the ROI panel).  - internal overlay mouse position is now 5D.  - added getNumberOfEdgePoints() and getNumberOfPoints() methods (used for perimeter  area.. calculation).  - moved getPerimeter() and getArea() to ROI2D.  * BooleanMask[X]D:  - added getPointsAsIntArray(..) method (better for GC work)  - added getEdgePointsAsIntArray(..) method (better for GC work) * Better error handling in Plugin Class Loader. * DynamicArray supports variable block size (granularity parameter). * added TypeUtil.toPoint(int[]) method. * Point[X]D: added toPoint[X]D() and toDoubleArray() conversion methods. * Severals bug fixes.,move
ChangeNamespace  RenameResources: moved renameResources() method to RenameResources and try to prevent ConcurrentModificationException in TDB,move
Clean up queueing so that the majority of queued events are strings.  This allows putting them in a persistent queue store.  The default 'enqueue' is string-only now.  Classes that want object-enqueueing can cast to PlainMessageQueue and call enqueueObject.  Syntactic vinegar.  Make many relatively simple value objects that get passed around in queues implement the bean specification  so they can be passed around as XML instead.  (This is done with 'enqueueBean'  a terrible name  but dequeued objects are automatically unmarshalled back into the correct objects.)  Everything that passed around an AuctionEntry object to a queue now just passes the identifier  and the queue processor gets the entry from EntryCorral.  There may be a better way to do this  but for now  this works.  The TimeQueueManager does unpleasant things to manage the differences between different kinds of payloads that need to be delivered.  Possibly wrong things  also.  Canceling and setting snipes go directly to the server  instead of being queued  since it's not a long-running operation.  (Lowering the number of moving parts in sniping operations.)  Thumbnail lookup and handling just involves a String URL  which is turned into real URL in the manager.  This allows the thumbnail manager to be the only one that actually downloads the images  instead of the ebayAuction object.  The code to clear out multiple TIMECHECK operations is removed.  There is a custom Searcher serialize/deserialize method that calls on SearchManager.getSearchById() to only load the right item.  Theoretically I could do this for enqueuing AuctionEntry objects (on deserialize  pull them from EntryCorral) also  but...not right now.   I hate making huge checkins like this  but once I started making deep changes to the queueing infrastructure  I couldn't check it in until it was all at least stable and working.   git-svn-id: svn://svn.jbidwatcher.com/jbidwatcher/trunk@893 b1acfa68-eb39-11db-b167-a3a8cd6b847e,move
[Scenario] Move stale listener to superclass  Move the stale listener used to refresh Timeline views with incoming changes up to the superclass shared with Scenario view  such that both Scenario and Timeline update with the same strategy. This allows  for instance  the cost graph shown in the scenario view to stay up-to-date with changes to individual timelines.  This supports resolution of remaining instances of nasa/MCT-Plugins#56,move
refactored methods from CelementsWebPluginApi to ImageScriptService: public boolean useImageAnimations() refactored methods from CelementsWebPluginApi to CelementsWebScriptService public void checkClasses() public String getDefaultSpace() public boolean isCelementsRights(String fullName) public Map<String  String> getObjStoreOptionsMap(String options) public com.xpn.xwiki.api.Object newObjectForFormStorage(Document storageDoc String className) Fixed CelementsWebScriptServiceTest because of methods move,move
Rearranged some file-related methods  * Extracted little-endian methods from GmStreamEncoder to StreamEncoder  * I chose not to do this for GSDecoder  due to the obfuscation table    * Maybe once we add more GM7 support we'll revise this model  * GSE now extends SE and holds some Resource-specific methods    * Moved some lower-level methods from GmFileWriter to GSE    * Likewise for GmFileReader and GSDecoder  * Improved read4 and readD to use byte arrays rather than individual reads.  git-svn-id: https://lateralgm.svn.sourceforge.net/svnroot/lateralgm@358 8f422083-7f27-0410-bc82-93e204be8cd2,move
a few small refactors in RdfGenerator  moving a couple common methods into bean reflect util in an effort to make RdfGenerator a little more manageable,move
Vishal #647 Moving provider performance related request handlers to new controller.,move
o Refactoring: Move helper method to helper class.  git-svn-id: https://svn.apache.org/repos/asf/maven/plugins/trunk@1059687 13f79535-47bb-0310-9956-ffa450edef68,move
Now computing real arc length in RoadNetwork  but not writing it yet.  Some cosmetic fixes. Moved distance calculation from RouteArc to Coord -- or should it go in Utils?    git-svn-id: http://svn.mkgmap.org.uk/mkgmap/branches/nod@771 25d90789-57f7-4ee0-8453-03a3dfeeeb22,move
Update translators for movement of Languages  Certificates and Year  Move Mongo translation of languages  certificates and year fields from Item to Content Translator to reflect changes in the internal model.,move
"Change the """"excludeMarker"""" to """"suppressMarker"""" to make this consistent with the use of """"suppress"""" elsewhere in PMD  and with the standard Java @SuppressWarnings() annotation.  Remove some of the processFiles() APIs on the PMD class  we really don't need that many of them.  In this regard  the one API that allowed a LanguageVersion to be passed explicitly has been removed  and the RuleContext class update to indicate this is the preferred method of indicating the LanguageVersion to use when processing a source file.  Initial cut at adding a Configuration class  for storing all PMD configuration related items.  So far  I've just moved the stuff that was stored on the PMD class itself to the Configuration class.  Additional work will be done to move the stuff currently in CommandLineOptions and in the Ant task onto the Configuration class.  Then the processFiles methods will be modified to take a Configuration option.  This should prevent the proliferation of processFile() methods in the future  and make it possible to unify some common aspects of the command line/Ant usages.  git-svn-id: https://pmd.svn.sourceforge.net/svnroot/pmd/trunk@6208 51baf565-9d33-0410-a72c-fc3788e3496d ",move
Example benchmarks fix  * Minor fixes on benchmarks  documentation updates * Fixed up Coherence plugin (query API change) * Decoupled PID retrieval from started process (and possibly did not mess up whole lot of other things) * Added some missing configs * Fixed up Coherence plugin * Moved PID management from Serice to Lifecycle * Fixed spark PID retrieval * Added some comments on example benchmarks * Minor fix on properties parsing * Added Coherence plugin build documetation,move
Removed PrestoType.readOnly  which is now defaulted down onto PrestoField.readOnly. Moved readOnlyMode to PrestoContext.isReadOnly.,move
Refactored external resource location logic out of ResourceFactoryImpl -> moved to new services,move
FACES-1704 Move backported portal classes to new package com.liferay.faces.util.portal,move
Massive list of modifications.   * Moved utility methods.  * Checked for no configuration.  * Added warnings to misspelled presets.  * Added the ability to specify multiple presets in options.,move
"perf: Remove expensive finalize method from Statement Finalize method on Statement is moved to a separate class that is lazily created if user sets """"autoCloseUnclosedConnections""""=""""true"""". This dramatically improves performance of statement instantiation and reduces garbage collection overhead on several wildly used JMVs.  The added jmh benchmark validates the performance of statement creation.  Benchmark                                             autoCloseStatements  Mode  Cnt      Score      Error   Units FinalizeStatement.createStatement                                    true  avgt   10    957 934 ± 1016 417   ns/op FinalizeStatement.createStatement:·gc.alloc.rate.norm                true  avgt   10    192 001 ±    0 002    B/op FinalizeStatement.createStatement                                   false  avgt   10     62 489 ±    5 890   ns/op FinalizeStatement.createStatement:·gc.alloc.rate.norm               false  avgt   10    136 000 ±    0 001    B/op ",move
FACES-2146 Move the creation of ActionURLs  RenderURLs  and ResourceURLs from PortletContainer to MimeResponse,move
BDBJE updates  refactoring * commons/pom.xml  .classpath     update to BDB-JE 4.0.71 * BdbModule.java     (getStoredQueue) added     (getStoredMap) made more general     (openDatabase) all databases now 'managed' * TempStoredSortedMap.java -> DisposableStoredSortedMap.java     renamed * StatisticsTracker.java  **Report.java     use new name * StoredQueue.java  StoredQueueTest.java     move to org.archive.bdb package * BdbMultipleWorkQueues.java  PrefixFinderTest.java     update for BDB-JE 4 changes * BdbFrontier.java     use getStoredQueue      drop unneeded custom serialization support * WorkQueueFrontier.java     drop unneeded custom serialization support,move
word lexprob parse yield moved to static method,move
- Added TimeService and test (https://issues.jboss.org/browse/JGRP-1763) - Added TimeService and getTimeService() to TP - Updated TCP to use TimeService for TCPConnectionMap$TCPConnection sends and receives - UNICAST3 uses TimeService - FD_ALL uses TimeService if configured (use_time_service) (default=true) - Moved sending of discovery request out of synchronized scope - Implementing Closeable - TP$TransferQueueBundler.stop() now clears the queue and makes sure a subsequent start() doesn't use the current bundler_thread (which was interrupted and will terminate) - Discovery now uses OOB | DONT_BUNDLE | INTERNAL to send discovery requests and responses. This ensures that requests and responses don't get stuck in the middle of a MessageBatch,move
Cleaned up some code  externalised some strings  MDIManager  * moved listening code to inner class CListener to avoid empty interface methods  messages.properties  * Organised the GameSettingFrame strings into tabs  GameSettingFrame  * Externalised new strings that I forgot about (this is part 2 of a 3 part commit)  git-svn-id: https://lateralgm.svn.sourceforge.net/svnroot/lateralgm@176 8f422083-7f27-0410-bc82-93e204be8cd2,move
Continued on author view work  Also moved some of the validation service methods into better places in prep for adding a link to this from the author debug views.,move
Create per-project cert & key  use to fetch metrics  move ZK to more standardized approach,move
Some cleanup: moved a method back to TranscoderService as it really belongs to this service  added missing javadoc,move
Moved transfer location logic to ThawLocationProvider.  The tests wanted me to move the transfer location logic away from the ThawBucketTransferer  so I did and it's much better. In addition  the location to transfer to is guaranteed to be non existing. #25,move
P6LogOptions module - becomes optional => some of it's options were moved to P6SpyOptions module,move
Minor refactoring of NodeType and class which reference it StackObject  SequenceChecker  Linker etc. The aspiration in  NodeType was to convert it to an enumeration: this refactoring moves AbstractDataFlowNode.stringFromType to make the class a bit more enum like and to make it publicly available for use in debugging other languages.,move
- Moved large data from header to message body (https://issues.jboss.org/browse/JGRP-1707) - Renaming protocol (name) if ID is set - Using offset and length for message buffer,move
FACES-2021 Prepare for OSGi by moving impl classes to internal sub-packages in order to clearly distinguish API from implementation,move
* Icy let you select appropriate importer when multiple choice are available. * Loader: many changes to provide better support on FileImporter and SequenceFileImporter classes. * FileImporter.acceptFile(..) method now use path parameter. * Layers panel:  - opacity setting has moved at bottom.  - support custom setting panel per layer (Overlay.getOptionsPanel()) * SequenceUtil:  - C/Z/T merge operation now preserve metadata.  - added getSubSequence(Sequence  ROI  double) method. * User email information stored in preferences. * some refactoring:  - ImageLoaderDialog --> LoaderDialog  - ImageSaverDialog --> SaverDialog  - LoadDialog --> OpenDialog * others minors improvements  bug fixes and cleanup.,move
"closes #400""",move
[accumulo] Checkstyle cleanup and enforcement for the Accumulo binding.  Again  a lot of whitespace changes and the normal checkstyle type errors.  2 items of note:  1. Deprecated QueueElement since it is not used. 2. Moved some of the exception handling to common locations to remove    empty catch blocks.,move
COMPRESS-214 move getUnixSymlink from ZipArchiveEntry to ZipFile  git-svn-id: https://svn.apache.org/repos/asf/commons/proper/compress/trunk@1444779 13f79535-47bb-0310-9956-ffa450edef68,move
V2  Vandana - Removed a few validators and moved the logic to the requests and utils.,move
getRequestParameterMap() moved from FormValidationService to WebUtilsService,move
moving the block of code in the main method of SesameQueryUtils which were eyeball pseudo tests into some actual test cases,move
Test framework: make templatedir restore also work when starting embedded lily. Related to this  moved BaseCli.readVersion to Version util class. In HBaseProxy  SolrProxy and LilyServerProxy  don't clear data on startup when clearData flag is set  this should only be done on shutdown (otherwise the templatedir serves no purpose).   git-svn-id: svn+ssh://dev.outerthought.org/outerthought/lilyproject/trunk@5510 b80d95f8-e103-0410-bd55-e03a9dc29394,move
Bug 490273 - Move tests to JUnit 4  Port of security tests  Change-Id: I356c711a6519629d037ceb47a92305b685f72287 Signed-off-by: Sopot Cela <scela@redhat.com> Signed-off-by: Thomas Watson <tjwatson@us.ibm.com>,move
Major new functionality  Featues - Added http file downloader  integrated into TVRageProvider - Implemented 'check for updates' and preference option  Code changes - FINALLY made preferences static (yay!) - Renaming of many UIStarter variables to conform to nameType - Moved string handling into StringUtils - Updated tests,move
TFJ-420 moved OAuthAuthorization.encode() to HttpParameter,move
Moving of last bendpoint of structural link working most of the time.  Improving OPD visualization by adding square bendpoints to structural links. Current state has option to move last bendpoint of link before object/state. Many changes done since a number of problems were found in the management of refresh of the diagram.,move
Bugfix: line-wise visual mode behaviour on empty lines   * during motions   * when selectiong empty line   * moved code that finds lines containing 2 positions to static method StartndTextRange.lines,move
[Scenario] Add info about drag-drop to policy  When considering availability of drag-drop actions via policy  provide key/value hints about which action is being employed. This permits external plug-ins to modify their behavior in special cases where normal Move/Copy/Link rules are insufficiently descriptive.  This is needed for the scenario distribution  where Move (and not Link) should be available when dragging Activity Type objects between repositories.,move
move protobuf support to plugin module. Future work: add module detector and executor + move proto classes to another maven module.,move
* The way IERXRestDelegates are implemented is totally crazy. Get rid of that and move to a model where the delegate is always looked up.     * Introduce an ERXRestContext that can go all the way down to the JSON formatters so you can configure date formats per-request.     * Write some test cases -- it's used by several apps now and really should have coverage.     * Fix a bunch of weird edge cases that have come up,move
Leaving SCMTestBase alone and instead moving tests incrementally to FunctionalTest using parameters.,move
- Added Table.removeMany() which is passed a message batch that messages from the table are moved into (https://issues.jboss.org/browse/JGRP-2126) - Using MessageBatch$BatchIterator.remove() (O[1]) instead of MessageBatch.remove() (O[n]) - Replaced MessageBatch.getMatchingMessages() with replaceIf(),move
Seperated FtpRequest into a pure request and a dedicated session class. Ths makes the seperation of duties more clear and moves us closer to the pattern used by MINA.  git-svn-id: https://svn.apache.org/repos/asf/incubator/ftpserver/trunk@491831 13f79535-47bb-0310-9956-ffa450edef68,move
HV-441: Moving retrieval of annotation based constraint meta data from BeanMetaDataImpl to provider,move
Allow appKey for JSON requests to be provided with the input JSON string  Currently  the appKey parameter is added to the JSON string (when required) by the RequestExecutor. This sometimes creates memory issues as it requires modifying the already generated large strings (e.g. the JSON for the encoded image file of 5MB). 1. Allow appKey parameter to be added by a service when creating the JSON string. 2.  Modify RequestExecutor to add appKey when posting JSON requests only if the apply is not already present in the input JSON string 3. Move addAppKeyValueToJson() method to the ServiceHelper to allow it be used by services,move
Shruthi | #0 | Moved adherence computation for TreatmentCard to AdherenceSection,move
cleanups  moved some stuff,move
rename and move CFC proxy classes to hibernate package,move
Initial version of granular uploads refactor. For simplicity/speed the interfaces involved have been duplicated  so there is a standard and a Granular- version of each. The Nitro classes have then been moved across to the new Granular- interfaces  as have the various controllers and other shared classes. Testing still needs improving.,move
- first commit for moving timer thread pool from ProtocolStack to transport (http://jira.jboss.com/jira/browse/JGRP-737) - merged all thread factories into one (DefaultThreadfactory) - Changed naming of threads slightly (http://jira.jboss.com/jira/browse/JGRP-644),move
Automated g4 rollback of changelist 129142220.  *** Reason for rollback ***  breaks moduledependencytestcase tests and other weird things  *** Original change description ***  Extract the main bindingimpl/factory implementation of ProviderMethod into an abstract base class.  This is a prefactoring for moving multibinders into the core.  All the multibinder factories will share a lot in common with ProviderMethods * They are ProviderInstanceBindings * The providers implement ProviderWithExtensions * The 'userSuppliedProvider' is a bit of a misnomer  so we provide a standard   implementation  This also removes the ProviderLookups from every ProviderMethod  which were pr...  ***  ------------- Created by MOE: https://github.com/google/moe MOE_MIGRATED_REVID=129156867,move
Vishal  V2 #618 refactoring TreatmentUpdateOrchestrator - moved dose interruption  calculation to Patient,move
"Add Column  Field  and Fields classes  Add seven new classes:  - Field.java - an abstract class that defines a """"field""""  i.e.    a piece of data that we may display in the table  once per row - TextField.java  ImageField.java  ComboField.java  CheckboxField.java:   subclasses of Field.java  which are intended to hold specific types of   data  with specialized methods for those types - Fields.java - defines the fields of the program as public static   instances of Field - Column.java - a Column is what is used to display a Field.  Our Column   class encapsulates TableColumn  the actual UI class that is part of the   table.  We are able to keep some other helpful data in the Column   class  too.  A Column must be associated with a Field.  It's required in the constructor  and is final.  A Field can either have a null column (indicating it is not currently displayed in the Table)  or can have one Column  which must refer back to the Field.  It is an error to try to assign a Column to a Field that already has a Column  or to try to assign a Column to a Field where that Column already refers to a different Field.  In addition to the seven new classes  we make major changes to ResultsTable.java:  - The fields had previously been defined as integer constants  whose   values corresponded to the column IDs.  The column IDs are created by   the Table  when the columns are added to it.  So  the definitions   required """"knowing"""" the order in which the code added them.  Now we   import the Fields from Fields.java. - All the cell get/set methods from ResultsTable now become methods on   the Field.  ResultsTable no longer deals with Images; that's too level.   It just deals with the ItemState  and the ImageField turns that into an   actual Image. - Methods used for sorting  itemDestDisplayedText and getItemTextValue    previously were static methods defined in ResultsTable  which had to do   some checking/dispatching depending on the type of the field.  Now the   functionality lives in the Field classes  and is specific to the   subclass of Field that is being used. - The sortTable method no longer takes a TableColumn and a column ID;   those two pieces of data are now encapsulated within the new Column   class  which is what we pass  instead. - Move the column creation call into the Field.  We create the column by   asking the Field to do it.  In turn  it calls into Column  which can   also define the selection behavior (sort by """"this"""" column) - Therefore  we no longer need the sortTable wrapper method; the code   that creates the Column knows how to figure out the sortDirection. - We also add getTableColumn() to Field  and use it instead of   Table.getColumn().  Field.getTableColumn() could return null  under the   idea that we may define Fields that the user chooses not to display in   the Table.  That is currently not supported  but it's something I   intend to add. ",move
[ARQ-859] Moved dbunit related settings to its own configuration.,move
NativeFunctionTest  modifications for NativeFunction. Var now use GremlinScriptContext instead of VariableLibrary. method getVariableByName moved to GremlinScriptContext + imports optimization.,move
Refactored and moved some tests,move
NOJIRA Version 1.0.1 In this version: 1.) Added Xstream implementation for retrieving xml in xstream package. 2.) Moved dom4j code to new dom4j package. 3.) Updated edit functionality  added new controllers. 4.) Added multiple locations ability. 5.) Externalized many items in jsp pages/classes to messages.properties 6.) Updated pom dependencies. 7.) Externalized constant variables to interface. 8.) Adjusted test to handle more generically and correctly. 9.) Created smaller accuweather logo. 10.) Added accuweather.com terms of use file.   git-svn-id: https://source.jasig.org/sandbox/WeatherPortlet/trunk@15193 f5dbab47-78f9-eb45-b975-e544023573eb,move
Some refactoring to move common functionality into our utility class.,move
Refactored BeanDiffer Tests,move
Refactor services and fix tests,move
refactor resource loading into method in parent for re-use,move
Refactoring towards generalizing all TripleRelation using code to NodeRelations,move
A round of refactoring! wow... that turned out to be a big one.  I'm sure there is now a lot of dead and duplicate code that must be removed. This is next in line.,move
Refactored builders for supporting multi inputs and named outputs seamlessly,move
Refactor tracing feature into a base class,move
Refactoring,move
refactored FieldEntryReader class.  It was merged into AbstractTemplateBuilder class,move
Optimize code for coverage column and add/refactore unit test for coverage column,move
Massive refactors. This list isn't complete  but should give you an idea:  A) many things in lombok.eclipse moved to lombok.core to enable reuse with lombok.javac.  B) lombok.javac works now similarly to eclipse's model: We first make big ASTs that are bidirectionally traversable  then we walk through that for annotations.  C) Instead of getting an annotation instance  you now get an object that is more flexible and can e.g. give you class values in an enum as a string instead of a Class object  which may fail if that class isn't on the classpath of lombok.  D) sources to the internal sun classes for javac added to /contrib.,move
Fixed optional protocol dialog Refactored code,move
Adds BackNavigation Listener and Event. Refactoring of package structure.,move
Refactored to make the detectors' architecture modular. Added LCK06 placeholder.,move
Refactor error handling  so that exceptions can be reported to my site without circular class references.  git-svn-id: svn://svn.jbidwatcher.com/jbidwatcher/trunk@495 b1acfa68-eb39-11db-b167-a3a8cd6b847e,move
implemented disabled adapters; updated configuration; further refining adapter idioms; refactored response handlers and renamed some classes in related packages to better reflect domain intent,move
First huge step at refactoring JBidwatcher to use Guice instead of a wildly connected set of singletons.,move
Huge refactoring to make PrestoResolver.,move
Refactor build management and fix Xcode scan-build to work alongside Release configurations,move
Refactored Composite into AbstractComposite  Composite  and DynamicComposite  to disambiguate usage,move
Refactor OneMeasurement: Make returncodes private final  make _name final  refactor repeated export code from subclasses.,move
Refactored TradeCalendar  - Split into TradeCalendar and TradeCalendarManager - Remove country-specific calendars and replace by trade calendar - Display holidays of the current year on the preference page  Issue: #1069,move
OOZIE-1315 Refactor classes from launcher jar into Oozie sharelib (rkanter)  git-svn-id: https://svn.apache.org/repos/asf/oozie/trunk@1491589 13f79535-47bb-0310-9956-ffa450edef68,move
refactoring tests,move
Integrated nREPL; add new REPL view; refactoring of editor/source viewer; simplified launch process,move
Added documentation to subroutines. Refactored buffer local variables a bit. Refactored subroutines handling strategy.,move
Refactoring create package logic,move
refactored Parameters,move
Refactoring completed.,move
o Extracted BooterSerializer from SurefireBooter  Extracted an interface for directory scanner. Minor refactorings with no functional change.  All this is initial footwork to get SUREFIRE-141 moving. It looks like it's going to be quite a journey  git-svn-id: https://svn.apache.org/repos/asf/maven/surefire/trunk@1035052 13f79535-47bb-0310-9956-ffa450edef68,move
refactoring for Gipps  Krauss and Newell: model parameter dt is now taken directly from the simulation update timestep which is fix for one simulation,move
Refactored and improved loading of inventories and item schemata  See koraktor/steam-condenser#162,move
refactor iterators to only offer simple static methods that return the expected result.,move
refactor SplunkInputFormat  SplunkOutputFormat  SplunkEventsInputFormat to use new MapReduce api; add equivalent integration tests(SplunkInputFormatTest  SplunkOutputFormatTest  SplunkEventsInputFormatTest) for these classes,move
More changes towards a massive refactoring of the AuctionServer class  to be more specific  more testable  and more sane.  git-svn-id: svn://svn.jbidwatcher.com/jbidwatcher/trunk@49 b1acfa68-eb39-11db-b167-a3a8cd6b847e,move
Refactored statistics recording API,move
Refactored RDFRelation into a basic ExecutionPlan structure,move
refactor the old relevance query code  BIG change.,move
"- Refactored/merged CIFS/Telnet and CIFS/WinRM support:   - Moved CIFS code to abstract class CifsConnection and made CifsTelnetConnection and CifsWinRmConnection subclasses of that class.   - Moved WinRM support to com.xebialabs.overthere.cifs.winrm package and subpackages.   - Introduced CifsConnectionBuilder and CifsConnectionType so that one protocol (""""cifs"""") can be used  together with CifsConnectionType  to make all CIFS/Telnet and CIFS/WinRM connections. - Made ConnectionOptions.get throw IllegalArgumentException if a connection option has no value and introduced getOptional to be used when a connection option is optional. - Some minor code cleanup here and there. ",move
[ARQ-694] Refactored test lifecycle handling using event-based approach (with chaining using precedence) instead of single entry point.,move
Hopefully the last of the big exceptions refactorings. I went through all of the places we're adding context to our Errors object and made sure we're never doubling-up -- specifing the same injection point or key multiple times.  The new errors have nice 'at' lines for parameters  fields and linked bindings. Hopefully this makes it easier to follow the stacktraces. Additional context (such as the binding's origin in a module) could be added later if desired. Currently we have module-specific sources in CreationExceptions  and plain old binding sources elsewhere. The end result is messages that can look like this:  com.google.inject.ProvisionException: Guice provision errors:  1) Error injecting constructor  java.lang.UnsupportedOperationException   at com.google.inject.ProvisionExceptionTest$RealD.<init>(ProvisionExceptionTest.java:284)   at binding for com.google.inject.ProvisionExceptionTest$RealD.class(ProvisionExceptionTest.java:284)   at binding for com.google.inject.ProvisionExceptionTest$D.class(ProvisionExceptionTest.java:1)  1 error  git-svn-id: https://google-guice.googlecode.com/svn/trunk@652 d779f126-a31b-0410-b53b-1d3aecad763e,move
Refactoring of variable name collection,move
remove phases from BindingProcessor  refactor so that two different classes do the two different bits  with an abstract superclass managing the shared pieces.  git-svn-id: https://google-guice.googlecode.com/svn/trunk@1527 d779f126-a31b-0410-b53b-1d3aecad763e,move
Refactored ClientFactory and OpenSampleHandler  - Separated interceptor chain within ClientFactory into a ClientPersister   and the plain XmlSerialization - Removed factory method for ProgressMonitorInputStream in ClientFactory;   used alternative constructor instead - Added tags to ignore non-translated strings - Moved TokenReplacingReader to name.abuchen.portfolio.util package - Added paragraph to about.html with TokenReplacingReader - Added mwhesse to contributors in AboutDialog - Formatted translation files with resource bundle editor  Issue: #224,move
Clustering fixes and refactorization.  git-svn-id: https://bg.upf.edu/svn/gitools/desktop/trunk@1133 1b512f91-3386-4a98-81e7-b8836ddf8916,move
started refactoring RoadModels  created SpatialRegistry to encapsulate all positional information related to road users,move
rhbz1110627 rhbz1038852 - Squashed commit for zanata init command  https://github.com/zanata/zanata-client/pull/27  commit 7ab5819cefde4b76a6256cc5ecd5e15435b5df73 Author: Patrick Huang <pahuang@redhat.com> Date:   Thu Aug 21 12:14:46 2014 +1000      rhbz1110627 - handle not exist src dir  commit 8dea609e2c52d70bd6c7db501a5d946e3eea7215 Author: Patrick Huang <pahuang@redhat.com> Date:   Thu Aug 21 11:55:58 2014 +1000      rhbz1110627 - check server is compatible to init command  commit 61fe130f878e7c29798264c9f8188726730700f4 Author: Patrick Huang <pahuang@redhat.com> Date:   Tue Aug 5 14:57:43 2014 +1000      messages change  commit b493a38bd6c1fc71b4a2a2d61b2c4d586717a96e Author: Patrick Huang <pahuang@redhat.com> Date:   Tue Aug 5 12:25:40 2014 +1000      change message template to match prompt  commit 93173dd4bc829334827a29c759754355889a4584 Author: Patrick Huang <pahuang@redhat.com> Date:   Tue Aug 5 10:25:16 2014 +1000      fix exception type and tests  commit cc4b7d2c62042752e3fc20b58964c28c2ff43e34 Author: Patrick Huang <pahuang@redhat.com> Date:   Tue Jul 29 14:03:11 2014 +1000      change copyright year and a few messages  commit 94ec9adde1e5dbec3d8aa777f4c3736992493d31 Author: Patrick Huang <pahuang@redhat.com> Date:   Tue Jul 29 12:23:29 2014 +1000      improve message  commit f383bd89ab1f3d2e36de8169fee851cbd0533263 Author: Patrick Huang <pahuang@redhat.com> Date:   Tue Jul 29 12:22:04 2014 +1000      remove unique from project id prompt  commit b833d7608cbddc6dbc8e82f5d6a9a07cbf280f79 Author: Patrick Huang <pahuang@redhat.com> Date:   Tue Jul 29 12:15:48 2014 +1000      rhbz1110627 - handle when there is no server url in user config  commit cec96f250a5a8ff0ba9588986bb2a65a1d137f9e Author: Patrick Huang <pahuang@redhat.com> Date:   Tue Jul 29 11:51:39 2014 +1000      refactoring  commit 3c4f815f66d48fa539df07606091435a0939d2d5 Author: Patrick Huang <pahuang@redhat.com> Date:   Tue Jul 29 09:15:46 2014 +1000      rhbz1110627 - rename method and static import  commit f9e57f8d5fb1de5dd0bdc29f32a5ebc14b64d32c Author: Patrick Huang <pahuang@redhat.com> Date:   Tue Jul 22 08:48:25 2014 +1000      rhbz1110627 - refactoring  commit 5909e153ad6fa058e672a994b7b756990b62a628 Author: Patrick Huang <pahuang@redhat.com> Date:   Mon Jul 21 16:03:24 2014 +1000      rhbz1110627 - extract methods in UserConfigHandler  commit 04286baa5eab756dc9d025ebbf391046537db253 Author: Patrick Huang <pahuang@redhat.com> Date:   Mon Jul 21 15:58:43 2014 +1000      rhbz1110627 - refactor project  source and trans prompt  commit cdf0efc53baeac5192484c7d45548161d539785d Author: Patrick Huang <pahuang@redhat.com> Date:   Mon Jul 21 15:15:39 2014 +1000      add copyright to files  commit d65ed059d8558ab08bca3baa4da21c084110bf98 Author: Patrick Huang <pahuang@redhat.com> Date:   Mon Jul 21 15:10:47 2014 +1000      rhbz1110627 - extract methods in ProjectConfigHandler  commit 65a437ddda8afaee24f3880410e53a0982ea7055 Author: Patrick Huang <pahuang@redhat.com> Date:   Mon Jul 21 15:08:35 2014 +1000      rhbz1110627 - extract methods in InitCommand  commit c6dbf0b40ef1471ab3b8980d17c8c471561954cc Author: Patrick Huang <pahuang@redhat.com> Date:   Mon Jul 21 14:40:38 2014 +1000      remove UpdateChecker from production code (pending story and RFE)  commit 0fa26af4e5a4068ad5bd5ccbf9c3b92a4c85f4b0 Author: Patrick Huang <pahuang@redhat.com> Date:   Mon Jul 21 14:32:49 2014 +1000      rhbz1110627 - missing resource key will log an error  commit 471e5863a49253235892f2f118f4614f7962f0ec Author: Patrick Huang <pahuang@redhat.com> Date:   Mon Jul 21 14:23:40 2014 +1000      rhbz1110627 - rename methods in OptionMismatchChecker  commit 19c50ebebd8bc60935deb72469b99268ee973634 Author: Patrick Huang <pahuang@redhat.com> Date:   Mon Jul 21 14:15:25 2014 +1000      rhbz1110627 - rename class Mode to DisplayMode  commit ac0cb550bff27c6c647091b8be2815f1299e8c06 Author: Patrick Huang <pahuang@redhat.com> Date:   Mon Jul 21 14:09:07 2014 +1000      rhbz1110627 - rename class  commit 8804142bb0c9474bfc4f811da169df2bae7cb204 Author: Patrick Huang <pahuang@redhat.com> Date:   Mon Jul 21 14:07:27 2014 +1000      rhbz1110627 - refactor InitCommand: extract method etc  commit 51a6f99f27e55e207cb3f43e0602eb1e9a0553ef Author: Patrick Huang <pahuang@redhat.com> Date:   Mon Jul 21 14:00:19 2014 +1000      rhbz1110627 - refactor class that expects user input  commit 9db3a2696f6dcb2e0de58b2276e804d91ade5a09 Author: Patrick Huang <pahuang@redhat.com> Date:   Thu Jul 17 11:55:58 2014 +1000      rhbz1110627 - add color output and change some messages  commit 85f9c01a297683251383f7725fc63c831b19ee85 Author: Patrick Huang <pahuang@redhat.com> Date:   Wed Jul 16 09:38:05 2014 +1000      rhbz1110627 - able to filter project in long list  commit a8fa92300fee028019a20e2b45acd76aa3d3559f Author: Patrick Huang <pahuang@redhat.com> Date:   Fri Jul 11 13:09:08 2014 +1000      rhbz1110627 - check key availability in resource bundle  commit 99a93043201a3ffe34b2596292293de537861576 Author: Patrick Huang <pahuang@redhat.com> Date:   Wed Jul 9 15:51:01 2014 +1000      rhbz1110627 - check if there is newer version of client available  commit 5fe89e2a7e90cb6fc15e7fa2906cf53b15c9daf6 Author: Patrick Huang <pahuang@redhat.com> Date:   Thu Jul 3 11:11:12 2014 +1000      rhbz1110627 - externalize strings to properties file  commit e57037a32939e0b2629ebfebc56e38b0a9eb289d Author: Patrick Huang <pahuang@redhat.com> Date:   Tue Jul 1 13:36:48 2014 +1000      rhbz1110627 - add init to ZanataClient  commit 8c0c01d3b7c8033651b8fa119b04c3add09dcc4f Author: Patrick Huang <pahuang@redhat.com> Date:   Tue Jul 1 13:36:23 2014 +1000      rhbz1110627 - fix minor issues and print what's next suggestion to user  commit 60e557a46f9f6682b3054f32cba601f5137f6618 Author: Patrick Huang <pahuang@redhat.com> Date:   Tue Jul 1 11:28:57 2014 +1000      rhbz1110627 - refactor and clean up code  commit 549f095f51d81686845c8ced7692b96600d6769a Author: Patrick Huang <pahuang@redhat.com> Date:   Tue Jul 1 10:53:38 2014 +1000      rhbz1110627 - refactor to extract project and version prompt to separate classes  commit 769caf5c987988f8b13a3423e0ff7d19bdf9ce14 Author: Patrick Huang <pahuang@redhat.com> Date:   Tue Jul 1 09:32:06 2014 +1000      rhbz1110627 - refactor extract project config handling to separate class  commit d001f2be0a906b1f9eb3ed4c228f42fede14edc7 Author: Patrick Huang <pahuang@redhat.com> Date:   Mon Jun 30 16:59:41 2014 +1000      rhbz1110627 - refactor extract to separate class  commit 1f11d50717658730f027d1733dc0404e1619cca2 Author: Patrick Huang <pahuang@redhat.com> Date:   Mon Jun 30 16:37:16 2014 +1000      rhbz1110627 - refactor test and mock server  commit 11c2d46b65a46d0ec297767e5fc5213644031bdc Author: Patrick Huang <pahuang@redhat.com> Date:   Fri Jun 27 15:59:06 2014 +1000      rhbz1110627 - add init mojo as maven goal  commit 531f2cc2769b27ef74f7ba244c8ded383c3359c0 Author: Patrick Huang <pahuang@redhat.com> Date:   Fri Jun 27 15:57:29 2014 +1000      rhbz1110627 - prompt user for trans dir  commit 96a86230847a230221a027a54500c9da66d7c41e Author: Patrick Huang <pahuang@redhat.com> Date:   Fri Jun 27 14:40:27 2014 +1000      rhbz1110627 - use index number to select project and version  commit 49cb2b632dfc8633baf7d514d275e5b6ae6669dc Author: Patrick Huang <pahuang@redhat.com> Date:   Fri Jun 27 14:08:59 2014 +1000      rhbz1110627 - src dir  includes and excludes prompt  commit 9061f89487e2a52cb3e400f2ff7a2982ac3c3fd7 Author: Patrick Huang <pahuang@redhat.com> Date:   Fri Jun 27 12:20:09 2014 +1000      rhbz1110627 - refactor ZanataProxyFactory to allow not eager REST version call  commit 508ec9dd508f4e1768682806ddbc85361f24c588 Author: Patrick Huang <pahuang@redhat.com> Date:   Thu Jun 26 14:17:18 2014 +1000      rhbz1110627 - add includes and excludes to zanata config  commit c48414a13da6cc787402d28a2ec3c3727b513691 Author: Patrick Huang <pahuang@redhat.com> Date:   Thu Jun 26 10:59:36 2014 +1000      rhbz1110627 - pull up includes and excludes to project configuration  commit 2d1a9b34bd110b5b61b1ca419a1535510a60a194 Author: Patrick Huang <pahuang@redhat.com> Date:   Thu Jun 26 10:26:46 2014 +1000      rhbz1110627 rhbz1038852 - add src dir and trans dir to zanata config  commit 31319e5ef9629e8b6393658a093c4a4f21661ac8 Author: Patrick Huang <pahuang@redhat.com> Date:   Thu Jun 26 09:13:45 2014 +1000      check for potential wrong src dir in podir project  commit 8e0595017a6d362a9edeb3f8a0d86be6d03cff84 Author: Patrick Huang <pahuang@redhat.com> Date:   Mon Jun 23 09:26:25 2014 +1000      rhbz1110627 - create init command  commit c27ebac5da785fd3fc2f31c81212bbecdc9e9709 Author: Patrick Huang <pahuang@redhat.com> Date:   Wed Jun 25 10:17:02 2014 +1000      add friendlier message to inform user server is not up,move
A little more Blueprints Sail refactoring.,move
make QueryCount logging logic injectable  - add interface and default implementation for logging - refactored to remove duplicated code close #6,move
Refactor task to accomodate more general cases than just YouView.  - also includes some attempts at refactoring the tasks to split upload/task creation/content identification.,move
code refactor,move
[#91] Unify Altair8800 documentation into one document  + Fix SSEM release + Refactor CPU testsuite + Finish first draft of CPU developer's tutorial,move
Refactor the auction loading code to not construct a new AuctionInfo object every time.,move
rsa refactorings,move
Katta  Ashish | #1739 | Refactored SubscriptionService to have separate  methods of separate actions,move
simple refactor,move
refactor LispMinibuffer,move
[refactor] use picocontainer to instanciate jenkins components,move
More refactoring of simulation specification classes.,move
Extract helper methods to separate classes.  Refactored towards Composed Method.,move
Added next(int step)  prev()  and stepsBetween(hash1  hash2)  to GeoHash. Added BoundingBoxSampler class. Refactored common code between BoundingBoxSampler and BoundingBoxIterator,move
Refactored two text/string related utility classes into one,move
Refactoring to support remote rsa manager  Change-Id: Ia7fe0602730f17ecd56cc024fe29a97f9ab5997d,move
refactored ArraysSolverDebugger to also support multi vehicle solvers,move
484359 Refactor marker resolutions and quick fixes  Change-Id: Ibdcc4cf75cfbb4fd49c27ba3ce187cfb932c47cb Signed-off-by: Anton Tanasenko <atg.sleepless@gmail.com>,move
refactor,move
refactored mouse clicks,move
feat: Implement CoreInputLwjgl; chore: minor CoreInput spi refactoring.  Add CoreInputLwjgl  CoreKeyEventLwjgl  CoreMouseEventLwjgl  LwjglMouseEventDriver classes for implementing LWJGL input backend.  Remove several unnecessary methods from CoreInputEvent  CoreKeyEvent  and CoreMouseEvent interface.  Move enable/disable-default-dispatcher methods to AbsractCoreInput.  Add logging to CoreInputJogl.  Ran auto-format on several incorrectly formatted source files.,move
Bit more test refactoring,move
Major refactoring to remove deprecated `JsonParser.Feature`s altogether,move
Removing RepositoryMgr.getTypeMgr usages  which led to some RepositoryManager->(L)Repository refactoring in indexer code.,move
o Refactoring: move adapter methods from the XML parser class to its own class.  git-svn-id: https://svn.apache.org/repos/asf/maven/plugins/trunk@1053970 13f79535-47bb-0310-9956-ffa450edef68,move
We added the most general test cases for LCK02J detection.  This includes functionality to handle projects that contain multiple files. Also  we refactored all our tests  making them smaller and easier to maintain.,move
Completed a static analysis pass (using FindBugs and NetBeans Hints) to resolve almost 400 small issues throughout the codebase. There are still a few issues outstanding that are either presumed false-positives from the analysis tools  or require substantial refactoring to resolve. Additional issues are likely arise when better annotation is employed.,move
NextFreeDocNameCommand refactored into NextFreeDocService and improved performance,move
"Bugfix: JENKINS-10638 Enhancement: JENKINS-10637 Bugfix: JENKINS-10719  including  - New feature: Ignore parent stream - can now tell a project to ignore changes made in the basis stream of the actual stream being built.  This can signficantly reduce the time the plugin takes talking to the accurev server.  - New feature: Get streams singly - more of an accurev client workaround really; the plugin used to call the server and get """"the streams"""" which included absolutely everything under the sun  and this turns into many megabytes of data  every poll and every build.  This server setting says to get just the streams we care about (our stream  our parent stream etc)  albeit at the cost of potentially making more than one call to the server. Enhancement: Logging improved  which should make debugging accurev client failures a little easier. Enhancement: Now weakly caches the XmlPullParserFactory. Refactor: Extracted out code that runs the accurev client command into its own class  reducing duplicated code and making parsing of command-output more consistent. Refactor: Split out many of AccurevSCM's inner classes into their own files in an attempt to make the main class more maintainable. ",move
refactor CellsClasses and replace deprecated superclass,move
refactored dictionaries portlet to use wrappers instead of model,move
SC#QCADOOMES-740 Refactored production balance  moved calculations from production records to production balance  included tpz and additional time in calculations.,move
Created a fully working HandleSetter for eclipse  and refactored HandleGetter a little mostly to stuff common code into PKG.,move
refactoring - removed creator classes,move
Adding new classes as per diagram. More work on refactoring,move
[#LIB-170] refactor org.dcm4che3.net.service.BasicRetrieveTask to facilitate generating of audit log messages from derived classes,move
Refactored: removed classes that are not needed after dropping GData and changed query builders to depend only on RestTemplate and not on AbstractGoogleOperations. Added JavaDoc.,move
Refactor ThreadLocalCleanUp and extract WarningThreadLocalCleanUp subclass. #44,move
major refactoring and support to web forms.,move
Continuing refactoring for #130. It is moved to new system and tests are passing. No new tests have been created yet and it is still messy.,move
2.0.0-SNAPSHOT refactoring,move
Readablity and supportability improvements  Includng code comments  renames and refactoring motivated by code review feedbacks.,move
Final refactoring of the process config  Some final adjustments were made to the xml's process config and this solution provides a more condense object oriented way of handling the acceptance and rejection of input data,move
In progress: Using MassiveCraftCore and Allman indentation style and minor refactoring.,move
o Refactoring: move the downloading of tickets from Trac to its own class.  git-svn-id: https://svn.apache.org/repos/asf/maven/plugins/trunk@1054097 13f79535-47bb-0310-9956-ffa450edef68,move
REFACTOR moved image utility methods to own class,move
Code handled search config settings differently in different places. Refactored to use a single static method on SearchCommandParser instead. Also some javadoc.,move
V2  Ashish | #1737 | Refactoring subscription request handlers,move
JENKINS-45789 Minor refactor,move
FACES-1897 Develop alloy:inputDate component (Remove alloy:pickDate and refactor alloy:inputDate. Add dateSelect event to inputDate.) FACES-1895 Develop alloy:pickoDate component (Remove alloy:pickDate and refactor alloy:inputDate.),move
Refactoring to introduce ReplCommand to make it easier to add additional commands.,move
refactor and add missing test,move
Add filesystem support to libvirt functionality  - allow mapping of KVM host filesystem into the guest domain - refactor various Libvirt XML functions,move
Finished draft of Ensemble refactor.,move
DF Refactored hooks and fixed tests.,move
Refactoring : extracted TimelineRepository and UserlineRepository,move
Renamed audit events to audit entries to prevent future name conflicts and refactored some audit code,move
Big Refactoring: * Added IoProcessor - a thin layer which is similar to the reactor pattern * Renamed AbstractIoFilterChain to DefaultIoFilterChain because of the abstract methods of AbstractIoFilterChain are now moved to IoProcessor interface * Moved common parts of various IoFilterChain implementations to DefaultIoFilterChain * Removed other unnecessary IoFilterChain implementations * Added IoSession.getProcessor() so that DefaultIoFilterChain can access the associated IoProcessor * Extracted interface from SerialSession  and all the implementation goes to SerialSessionImpl    git-svn-id: https://svn.apache.org/repos/asf/mina/trunk@576070 13f79535-47bb-0310-9956-ffa450edef68,move
refactor unsupported op exception to Util class,move
Refactored and improved hideSoftKeyboard(),move
finished replication refactoring,move
Refactored RouteSolver classes.,move
adding missing entry to web.xml  refactoring and commenting apiservlet,move
"Application ----------- * entirely reworked the """"Sequence / Image operation"""" band :   - new sequence resize feature.   - new C/Z/T operations.   - new color conversion feature.   - general improvements. * better plugin error report. * better colormap preservation when switching from 2D to 3D canvas. * better Icy to ImageJ ROI conversion. * minors improvements here and there. * modified ROI2DPoint so it now intersects point and do not contains it (more consistent with other ROI). * fixed a minor bug in ROI.getBooleanMask() method. * fixed a minor bug in ROI2D.contains() and ROI2D.intersects() methods. * others bugs fixes.   Developer --------- * Loader :   - added methods to hide the progress bar.   - added 'getMetaData(File file)' method to retrieve the metadata of an image file.   - added 'loadImage(File file  int z  int t)' method to load a single image from multi image file. * added IcyBufferedImage.copyData(src  int srcChannel  int dstChannel) to only copy data for a specified channel. * added ExcelTable component to display excel type table. * added abstract method 'getViewComponent()' to IcyCanvas so we can always retrieve the display component in a Canvas. * improvements on 'SequencePreviewPanel' and 'SequenceRangePreviewPanel' components. * added IcyBufferedImageUtil class (general IcyBufferedImage tools). * added methods to SequenceUtil class. * fixed cursor preservation on Canvas2D. * added MainInterface.getSequences(String name) to retrieve sequence by name. * fixed a bug in ImageDataIterator. * added a command line option to remove splash-screen. * lot of refactoring and source reorganisation (check deprecations).",move
frame parameters  tests set up changed  buffer refactored a bit  removed my NotImplementedException,move
Refactor calculated subjects to be more useful  Added a SubjectDataReference to handle some of the logic of a reference to a changing immutable subject data object  and updated code to use this. Transient and persistent data references are now also exposed through the calculated subject.  The calculated subject also provides debug output for high-level queries made to it. Implementations that customize permissions lookup in some way (I'm looking at you  Spigot) still need to do their own lookup. Unfortunately  there's no way to get a subject's name (rather than identifier)  so players will only be shown by UUID in debug output.,move
HAMA-946: Refactor graph package  git-svn-id: https://svn.apache.org/repos/asf/hama/trunk@1674779 13f79535-47bb-0310-9956-ffa450edef68,move
nio1 refactored - one step closer to ideal,move
B-59299 - Refactoring Categories  - Added PrefixColumnMap  Delimiter & AsCategorySet parameters to JdbcFeedSource & JdbcFeedPublisher to we can configure our categories through spring - Moved category refactoring code into atom-hopper project (no more cloudfeeds-atomhopper),move
Halfway through refactoring of commands and permissions,move
refactoring  introduce constants for elements  move some methods to PomHelper,move
Refactored global/local vs compound/simple del hierarchy.,move
Refactoring to allow adding different versions of Mapfish JSON parser.,move
FACES-1710 After invoking an ActionURL  the bridge remembers resources that were in the <head>...</head> section of the portal page (refactored to make it easier to backport to JSF 1.2 based branches),move
Do some refactoring: pass the account properties and messagebank around in a FreemailAccount object to things that need it rather than creating them as needed. This means we always use the same object rather than creating them as needed.   git-svn-id: file:///home/toad/git-migration/temprepository/trunk/apps/Freemail@19270 67a373e5-eb02-0410-a15c-ee090a768436,move
Refactored postfix expression evaluation -> using reflection for operators,move
refactoring; change notes,move
SC#QCADOO-123 refactor component definition,move
MANTLR-9: Adding Antlr report  o refactoring to add report support o added test cases o updated documentation o updated dependencies - bumped dependencies (maven-plugin-api => 2.0.4) - added dependencies (maven-reporting-impl  maven-plugin-testing-harness)  git-svn-id: https://svn.apache.org/repos/asf/maven/plugins/trunk@442981 13f79535-47bb-0310-9956-ffa450edef68,move
boleto  refactoring tirando interface Datas,move
[HER-1605] Refactor parameterizable policies out of frontier * defaults.xml     update bundled profile for new chains refactoring * CrawlController.java     move to three processor-chains rather than one * Frontier.java     (loadSeeds) removed * ToeThread.java     delegate most processing-loop to FetchChain and DispositionChain * AbstractFrontier.java  WorkQueueFrontier.java     move policies/calculation out to processors * CandidatesProcessor.java     new processor for DispositionChain that runs every outlink through CandidateChain * CrawlStateUpdater.java -> DispositionProcessor.java     rename  expand to prep CrawlURI for frontier * FrontierScheduler.java     deleted; use CandidatesProcessor/CandidateChain * LinksScoper.java     deprecated; use CandidatesProcessor/CandidateChain/CandidateScoper     (only temporarily retained for ease of comparison) * CandidateScoper.java     simple single-URI scope-testing for CandidateChain * FrontierPreparer.java     precalculate all frontier-policies in CandidateChain  before scheduling * PreconditionEnforcer.java     ProcessorURI->CrawlURI; take on some prerequisite preparation previously deferred to elsewhere * ProcessorsReport.java     update for 3-chains of Processors * SheetOverlaysManager.java     (applyOverridesTo) moved here for broader use * CandidateChain.java  FetchChain.java  DispositionChain.java     role-specific subclasses of ProcessorChain (suitable for type-based autowiring) * CrawlURI.java     new fields/accessors of use to new chains/frontier * PostProcessor.java     deleted; skip-to-'postprocessing' is now skip-to-end-of-chain * ProcessorChain.java     take-on control loop formerly in ToeThread * ProcessResult.java     absorb ProcessStatus     eliminate problematic STUCK result,move
Refactoring of #449,move
o Refactoring: Move shared code to helper class.  git-svn-id: https://svn.apache.org/repos/asf/maven/plugins/trunk@1054791 13f79535-47bb-0310-9956-ffa450edef68,move
[jvstm-lf] Several refactorings on the transaction classes,move
lots of refactoring + support for having multiple connections,move
refactored UserStream test case,move
formatting fix to apt docs i noticed while actually using them.  refactoring out a bunch of the bean related access stuff from RdfGenerator into a separate class.  using said class in EntityManagerImpl to correctly implement refresh  fixes #1.  small tweak to EntityManagerImpl so that merge works as expected w/ the EntityListener stuff  fixes #2,move
Refactored request printing,move
refactor JOGLTargetFixedFunction common code to AbstractJOGLTarget,move
Complete refactoring of the mock device.,move
NUTCH-499 - Refactor LinkDb and LinkDbMerger to reuse code.,move
Refactor TVAnytimeGenerator to generate a TVA element (removing the serialization component from this class).,move
refactoring in preparation of hotspots for yellow count,move
refactored ClassCacheMgr to make a leaner more readable class and prevent bloat and make parallel work a bit easier,move
refactored ClassCacheMgr to make a leaner more readable class and prevent bloat and make parallel work a bit easier,move
refactoring: move private method linesCutEachOther from MultiPolygonRelation into Utils no functional change,move
another).  Now that YES_NONRECURSIVE' has a proper negation the incorrect behavior is gone.,move
Refactor wait package to support message generation throw MessageProxy,move
"- we might be able to axe State/InheritingState. These were mostly for my sanity to constrain  where InjectorImpl gets its data we can always have more test cases""",inline
Moves RFC-3986 util methods into their own class,inline
"Massive rework to add more tests, and cleaner implementation.",inline
Refactored inline editing of transaction types and owner Removed reflection code from the editing support classes and workdirectly with Account Portfolio and *Transaction.Type classes Removed error markers deleted commented out code Removed primary and secondary transaction methods because editingis always of owner or cross owner (not of primary or secondary),inline
Inlined keys() method.,inline
Inline private method,inline
useless method inlined,inline
Small tweaks while doing other work. ( 2685)* Add missing nullability annotations.* Inline single use utility methods.* Remove redundant throws.* Inline method only called once.,inline
Inline finishAndInjectSingularMethod into generateSingularMethod,inline
Inlined deprecated ViewFetcher.getCurrent*() methods in favour of ViewFetcher.getCurrentViews(Class).,inline
Inlined those Clicker.clickOnText() methods which were wrappers for the actual clickOnText() method.,inline
Inlined the simplest methods of Searcher.,inline
Removed MigrationRunnerStrategy method signature receiving integer & inline method refactoring to OrderedMigrationRunnerStrategy class,inline
Use UIStarter constructor instead of init()We were just using a default (not explicitly defined) constructor for UIStarter but then immediately after it was created Launcher would call run() which would call init(). Instead make what was previously init() be a constructor.By doing this we can make the three instance variables in UIStarter be final because they are now initialized in the constructor.Then the run() method has nothing left to do except call launch(). So inline launch() into run() (or alternatively rename launch() to run() and get rid of run()).,inline
Inline helper methods that are no longer needed after f4502be7cc75b17928cd22025cf98048e3995ba3.RELNOTES n/a Created by MOE: https://github.com/google/moeMOE_MIGRATED_REVID 191443228,inline
Merge makeMove and undoMove methods,inline
134 adding nested method match functionality including UT after merge with 135,inline
merged code into static method that should have done the same thing.,inline
Score: make tempJena connect to unionGraph so  Empty Dataset  queryworksDatabaseClone: trial new properties/features layoutTDBJC: remove silly init method and merge into constructorDBCloneTest: use new constructorex ps/dbclone.conf: update format to reflect new DBClone features layout,inline
Provide a better support of the Revision Labels and a details history between them.This is a squashed merge of a refactoring done for respecting the attached files added by the user.At the same time numerous speed improvement was done to enable a faster importation by doing less interaction with the Starteam Server. If built from the Fake Starteam speed is increased by a lot. It should be on par if you did build against the StarteamSDK.* Provide a means to get the file from history by view version* Create a fake revision labelAdded revision labels to the mix of required changes.* Create test data for testing revision labels import* Get rid of meaning less todo* Extract the creation of a commit entry from the recursive file populationThis way we can get a detailed history of the individual files to extract andrecreated a much better history* Properly create the file based on the view versionPotential issue where the viewVersion !  contentVersion.* Create a commit strategy to experiment alternative to file populationThe current limitation of readability of the code for creating commits inGitImporter class is at its limits. The FilePopulationStrategy aim toextract the history creation of the view since the last configuration. Thiswill permits some simplification on the configuration of GitImporter classand provide a wider range of technique to extract the history from aStarteam view.* Implement the getViewVersion() for potential future use* Provide a version of a file based on a label id* Properly return null if the item is not attach to the label* Move deletion composition and rename finding into BasePopulationStrategy* Moved the Rename the FilePopulationStrategy* Retab some old modified functions* Remove some dead code* Add verbosity to the base strategy* Properly build the path and fix other bug found making the tests* Re enable cleanup of repository after an execution of import* Add a test for the base file populationThis is to make sure that there isn t any regression added for the creationof the list of commits.* Make sure the shareTo is executed before the update.* Make sure we don t ever get cached objects* Added a means of querying the last files the strategy has seen* Clarify the condition and reformat for understandability* Optimize the overuse of pathname and improve testing of isChild.* Increase test to be closer to real potential use.* Rename class to have a better logic to it.* Added the base integration of the commit strategy* Cache the toString() return value for increased performance* Finalize rename of classes and use ContentVersion instead of ViewVersion* Correct the misleading property names.StarteamSDK documentation isn t consistent with itself which lead to thesekind of errors.* Added Revision Strategy which is only a Base strategy for now* Correct a bad assumption regarding history orderThe history shall be from the newest version to the oldest* Inform the commit strategy about the current labelAnd at the same time get check if we need to make a tag associated with thislabel.* Properly initialize the strategy for Change Request.* Correct the move operation and name the commit accordingly* Use the commit strategy in the git importerAnd fix the test regarding the new behavior.* Correct a move operation badly detected* correct problem where openjdk !  oraclejdk* Use char sequence instead of string directly* Replace the join with a more primitive version.* Prevent back and forth for information we already knowAnd at the same time remove some dead code.* Do not enforce the missing build.date tokenFallback to the label revision time instead. If user only want a set ofbuild label he will need to apply a proper filter to not select someoperationnal label.* Provide a better explanaison of the reason we are selecting those fields.* Extract the method which process a single file.This is to actually override it label in the RevisionPopulationStrategy.Some other strategy may be better to select all the files but the simplestfor now is to simply iterate recursively through all files and only selectthose that are attached to the requested labels.* Correct bad logic regarding deleted files.* Added basic test for revision labels strategy* Promote debug logs to verbose* Implement support from specific revision label support* Create the view with the right time.* Move set of the earliest time from GitImporter to the Base Strategy* Simplify more the ChangeRequest commit filter* Correct the computation of the time of the commit correction* Add some more test for the implementation of the Revision labels* Implement the revision labels management and importation* Comment log relating a label with only some files* Implement a label exclusion to rule out some misleading revisions.* use proper javadoc syntax* add missing header in new files.* Cache all change request prior to starting the import* Put the initial version in its own variable.Such modification will enable to retreive all the files version from thestarteam repository but with a good chance of weird effect. It is betterto keep 1 for now as the renames or move operations won t be correctlyreflected.* Make sure to only poke getViewVersion onceIt does seem to make a round trip to the server which slow down theconversion process.* Add somekind of progress bar* Provide a retry mechanism for fetching items versions.If somebody does a commit at the same time we do make fetching of the versionsof a files we may end up crashing. We try to protect from this crash asfrom the server.* Add missing import* Add more resiliance when no change request availables* Correct comment and casing of the members* Disconnect once we are finished with the import* Make less interaction with the Starteam Server,inline
Merge finishAndInjectPluralMethod into generatePluralMethod,inline
merged Lucas OrientGraph TranscationalGraph implementation. Renamed method signatures to be identical with interface style. Commented out unused methods that are not part of Blueprints core.,inline
merged setDigest() and mergeDigest() into 1 method (https://jira.jboss.org/jira/browse/JGRP 972),inline
Inlined WordCramEngine s shapeToImage() to bring its logic closer to what s in drawWordImage they re very similar. Trying to un tangle the mess there.,inline
Inline Meter tick().Nothing else uses it.,inline
OOZIE 2332 Add ability to provide Hive and Hive 2 Action queries inline in workflows (prateekrungta via rkanter),inline
Initial commit of inline content refactoring,inline
Fixed all kinds of small UI bugs and updated the tool windows to let them more visually inline with the rest of the application.,inline
Inline Storage.BLOCK_SIZE at a few places,inline
Inline account initialization,inline
Rework ServerConnection to have processMessage faster and easier to inline,inline
Remove unecessary context check in ConnectionBase startRead() as it will always be called from executeIO that already does it and inline it in handleRead() directly,inline
Inlined Searcher.searchFor{ Toggle}Button().,inline
Inlined the WeakReference to ease following the test.,inline
Merge of latest version of Passerelle from Google labs repository,inline
Merge HTreeMap and HTree into single class so HTree implements Map interface and does not need wrapper,inline
WIP: Merge refactoring,inline
Fixed merge errors in SimpleInstrumentTuner,inline
More merges with develop branch,inline
Merge JGitRepository getIndexDiff into isDirtyIt’s the only user anyway.,inline
* (Java) Using one buffer and flip() instead of two in SteamSocket* (Java) Merged getReply and readPacket in SteamSocket* (Java) Deleted spare imports in SourceServer,inline
changed phase four to add orthology information moved existing phase four (kam building) to phase five phase four now merges in relevant orthologous relationships,inline
Merged in the img file reading support. The underlying img read code (atthe imgfmt.sys level) has been heavily changed so watch out. Appears togive the same result files as before though.In addition to read support you should find that blocksizes other than 512now actually work.Combining .img files into a gmapsupp.img file is now possible although notimplemented just yet.git svn id: http://svn.mkgmap.org.uk/mkgmap/trunk@341 25d90789 57f7 4ee0 8453 03a3dfeeeb22,inline
Fixing fumbled merge,inline
Bug fixes after merge.New DataStore tests.Changed Reasoner to be a GroundKernelStore that can do optimization and fixed ADMM.,inline
Manual merge and refactor of geoip,inline
csharp parserand csharp merge parser,inline
adding generated parser of csharp merge,inline
reorganized jaxb merged consumption in movsimScenario.xsd,inline
RecordHandlers: Set rather than List for find resultlogback.xml: re added ClassAppender config but commented out (so it can be re enabled easily if wanted)ChangeNamespaceTest: fixed arg testPS2Vivo.xsl: updated to use merged recordsJDBCFetch: removed executeOld()Transfer: removed emptyJC(jc) to use jc.truncate()XSLTranslator: revamp and cleanupMerge: fixed and workingSpecialEntities: added exceptions abilityTranslateTest: stop catching exception (so we can see them when it fails)SpecialEntitiesTest: updated to reflect exceptions,inline
CHANGELOG: updated for 1.1.1FileAide: Added to assist in common file tasksDemoPSMerge Diff CSVtoRDF Smush SPARQLTranslator XSLTranslator CSVtoJDBC DatabaseClone InitLog XPathTool ArgList JenaConnect RecordHandler TextFileRecordHandler RecordHandlerTest: removed VFS use for FileAideNLMJournalFetch PubmedHTTPFetch: WebHelper > WebAideNormDamLevDist NormTypoDiff: MathHelper > MathAideMatch PubmedScore Score GlozeTranslator Runbibutils SPARQLTranslator SanitizeMODSXML XSLTranslator Merge: no longer requires config filesMatch GlozeTranslator SPARQLTranslator RunBibutils XSLTranslator Merge: constructor cleanupScore: lowered info message for no temp model to debugTransfer: lowered warn message on no output to debug check for valid output changed and added remove from nothing checkGlozeTranslator SPARQLTranslator: updated to modern input/output with OverridesDatabaseClone: uses streams rather than FileObjects nowJenaConnect RecordHandler JenaConnectTest: removed File and FileObject constructors... use String path constructorTextFileRecordHandler: uses stream closing rather than FileObject closing,inline
.classpath: added back since log level solved in log config fileJDBCFetch: now handles wrong caps table namesJDBCRecordHandler: merged checkTableExists() and checkMetaTableExists() into checkTableExists(String tableName)JDBCFetchTest: added test to catch missing columns bugNLMJournalFetch PubmedFetchTest PubmedHTTPFetchTest: moved to nih sub test package,inline
Re fixed merge issues with ScopusFetch after repo clean up.,inline
Merged with remote changes,inline
drop the ConfigRoot interface.This was intended to make resolve() typesafe (only allowed on root objects).However in practice it was not safe because it was too easy to create aroot by merging a non root object into a root object. To fix it we dhave to prohibit that (root objects can only merge with other roots).But it seems simpler to just document that resolving on subtreeswill do the wrong thing and hopefully it won t be an issue in practice.,inline
fixed merge,inline
also ignore ItemEvents for refreshObjectComboBox merge refreshObjectComboBoxEntries() and ...Selection(),inline
Simplified creation of temporary files. Merged per file temporary directory holder logic with the connection temporary directory logic. Shortened the names of the generated temporary files.,inline
Merged sandobox with main after a looong time.,inline
Merge infosigns itemdisplays and shops into database. Make sureplayer shop stock only affects economy that player shop is a part of.,inline
Merged ExtendedReceiver > Receiver Merged ExtendedMessageListener > MessageListener Merged ExtendedMembershipListener > MembershipListener Removed partial state transfer (JChannel.getState() JChannel.connect() STATE_TRANSFER STREAMING_STATE_TRANSFER),inline
RpcDispatcher: merged request and responses marshaller into one (https://issues.jboss.org/browse/JGRP 1605),inline
Merged 4 thread pools of TP into 1 (https://issues.jboss.org/browse/JGRP 2099) Using LazyThreadFactory to correctly name threads Changed sample configs to drop the OOB thread pool TP: added num_threads_spawned,inline
HV 1148 Inlining some trivial methods,inline
More refactoring; inlining some methods preparing to do a wrapper class for DefaultMutableTreeNodegit svn id: https://pmd.svn.sourceforge.net/svnroot/pmd/trunk@3862 51baf565 9d33 0410 a72c fc3788e3496d,inline
Slight simplification of MultimapSubject. The private two arg containsExactly method was called from exactly one place an the failVerb argument was always a fixed string literal. So we might as well simplify things my inlining both the method and the argument. Created by MOE: https://github.com/google/moeMOE_MIGRATED_REVID 143460181,inline
Various fixes and simplifications to is{ Not}InstanceOf mostly under GWT: Make assertThat(...).is{ Not}InstanceOf(SomeInterface.class) blow up with a helpful message under GWT rather than always fail in the case of isInstanceOf and always succeed in the case of isNotInstanceOf. Make assertThat(null).isInstanceOf(...) fail() under GWT instead of throw NPE. (That said see b/34135320. But for now let s bring our GWT behavior in line with our JVM behavior.) This also simplifies the code a bit. Delete PlatformTest which tests the helper methods directly in favor of adding more tests to SubjectTest including tests for the cases above. Remove isInstanceOfTypeGWT from the JRE copy of Platform. It s used only from tests not from the actual Truth implementation. Also its tests don t run on GWT. (We could make them run on GWT but that doesn t help much since again that code isn t used from the actual Truth implementation.) Simplify the actual GWT implementation to avoid calling getName() and to avoid constructing a Set. (Also simplify the JRE implementation by inlining the helper method.) Leave a TODO to test with class metadata off which will demonstrate additional problems that show up only under that setting.Relevant: https://github.com/google/truth/issues/198Relnotes:Made `assertThat(...).is{ Not}InstanceOf(SomeInterface.class)` blow up with a helpful message under GWT rather than always fail in the case of `isInstanceOf` and always succeed in the case of `isNotInstanceOf`.Made `assertThat(null).isInstanceOf(...)` `fail()` under GWT instead of throw `NullPointerException`. Created by MOE: https://github.com/google/moeMOE_MIGRATED_REVID 182648493,inline
Removed the plan package (which was only used for find queries) by inlining its functionality into FindQuery and a new class CompatibleRelationGroup.,inline
HV 441: Merging cascade and constraint related meta data to (Aggregated)PropertyMetaData (work in progress),inline
Final tests to assert that the merging actually works,inline
drop the ConfigRoot interface.This was intended to make resolve() typesafe (only allowed on root objects).However in practice it was not safe because it was too easy to create aroot by merging a non root object into a root object. To fix it we dhave to prohibit that (root objects can only merge with other roots).But it seems simpler to just document that resolving on subtreeswill do the wrong thing and hopefully it won t be an issue in practice.,inline
cleaned up merging (https://jirs.jboss.org/jira/browse/JGRP 954),inline
Misc logging cleanup/refactoring* CrawlerJournal.javaimprove exception loggingcombine writeLine() methods to use varargs* FrontierJournal.javaimprove exception logging* ArchiveUtils.javareplace ignored count parameter with meaingful boolean one* CrawlURI.javause updated ArchiveUtils method,inline
Combine two methods into getReplacementText.Previously FileEpisode had getNewFilename which would construct a new filename out of downloaded information if in fact that information was successfully obtained. The method would return various other pieces of text in the case where we didn t yet have sufficient information.Then we had getNewFilePath which took the result of getNewFilename and if move was enabled prepended the destination directory.getNewFilename was useful as a public function in two places:(1) when we first create the table item we assume we won t yet have have the file information so we called getNewFilename to get the placeholder text and then registered a listener to change it when we had the information(2) in the FileEpisodeTest we want to validate the name without the destination directory getting in the way(1) is solved by simply having the placeholder texts be returned by the combined method. (2) was already solved by always disabling move for those tests the returned text will never have the directory prepended.As far as a name goes neither getNewFilename nor getNewFilePath were really accurate since it could very well return a different type of text so I m settling on getReplacementText . Possibly that name could still be improved.,inline
Update tooltip when we change the button label.Not sure why we thought of setup (initial) and set (during the program) differently. Combine them into one method.,inline
Refactoring: four new helper methods in CodeGeneratorBase clean up the code in both subclasses a lot. IDEA s structural replace rulez! On the fly cleaned up multiple declaration of JsWriter out .,inline
Refactoring of some method added enums for Operators and Modifiers,inline
Refactoring: delete unnecessary methods and clean up code,inline
Refactor: removing reSetMaximum method this removes some not needed loops so it increases the efficiency and the code is understandable,inline
83 section creator modified one parameter added one method removed Advanced search refactored abstract controller createdgit svn id: https://svn.origo.ethz.ch/eeg database/trunk@681 1a751040 f3c7 4aaa 98da 1e85aacc1d30,inline
Refactor PlaceService to reduce method numbers,inline
Refactor Downsampler to avoid the MutableDataPoint class and reduce methodcalls.Signed off by: Chris Larsen <clarsen@euphoriaaudio.com>,inline
Clean up the path refactoring now that I know what methods need to be available to be overridden.,inline
Fixed message ID in topicsAdded method inheritance testRefactored out NevadoQueueConnection and NevadoTopicConnection,inline
refactoring PMD.java to reduce that confusing jumble of interconnected methodsgit svn id: https://pmd.svn.sourceforge.net/svnroot/pmd/trunk@170 51baf565 9d33 0410 a72c fc3788e3496d,inline
o Javadoc additiono Removed some useless method (scheduleTrafficControl)o Get rid of most of the for(;;) construction when not necessaryo Added some commento Refactoring to make the code more candy to the eyegit svn id: https://svn.apache.org/repos/asf/mina/trunk@899977 13f79535 47bb 0310 9956 ffa450edef68,inline
Removing inheritance between SimpleReducer and SimpleCombiner. It simplify the code,inline
Sweeping cleanups to reduce tangles and improve the code.,inline
Reduced number of listFiles(). Intended to make listing faste.,inline
Adds utility class for mapping contextTo prevent modelmapper modules from using TypeResolver directly and to reduce the redundant code so I create a utility classthat can be used for: creating collection destination and resolvethe destination element type with giver mapping context.,inline
Removing internalCall to reduce internal stack usage a little bit,inline
Initial commit. Reduced the IParticle interface to the bare minimum. Refactored old Particle class to YangMillsParticle and replaced old fields with AlgebraElements. Removed old code from the force classes. This needs to be updated with AlgebraFields as well.,inline
Refactoring ivory.app classes to reduce code duplication.,inline
Remove some instance variable reduce visibility,inline
Refactor reloading to be implementation abstractThis also should fix reloading on spigot and reduce the amount ofimplementation specific code.,inline
Introduce a LateBound rule which may replace/reduce need for providers,inline
reduce copypasta,inline
[BISERVER 5682] lots of code shuffling around to reduce interdependencies between controllers and the main class EmbeddedWizard. Additionally all messaging dialogs have been centralized in one MessageHandler controller.,inline
ESILCO 463 Reduced duplicated SQL query code. Limited getProductFromLocation endpoint to active and related with document records only,inline
Extended service to have debug methods.Create IDeligateWorkbench part to reduce duplication of methods.,inline
Refactor PlaceService to reduce method numbers,inline
Refactor Downsampler to avoid the MutableDataPoint class and reduce methodcalls.Signed off by: Chris Larsen <clarsen@euphoriaaudio.com>,inline
Remove obsolete methods,inline
Rewritten the State cla+B1:B734ss so that we can gather the information we need to obtain the correct bit widths. Implements the same cases as before.  git svn id: http://svn.mkgmap.org.uk/mkgmap/branches/numbering@2400 25d90789 57f7 4ee0 8453 03a3dfeeeb22,inline
Cleanup the logging stuff so it s simpler and more coherent at the default verbosity level.,inline
Mass rework of rhogenwizard.launcher.rhodes.ParametersTab class.,inline
Moved value and string converter to pm4j common.   Part 2,inline
Refactored BeanDiffer Tests,inline
Sneha  Ashish | Changing obd campaign message request parameters to post,inline
FileWithType.getName returns name without extension  keyword completion matching simplified,inline
Only show sources with unread notifications in unread view; remove sources immediately when empty.  (D 07710),inline
Removed System.err from run method in Script.,inline
Remove the need for explicit row locks when allocating UIDs.  The existing code with explicit row locks exhibited very poor performance  and also prevented multiple TSDs from allocating UIDs concurrently.  The new approach consists in:   1. Performing an atomic increment to grab a new UID.   2. CAS ing (CompareAndSet) the reverse mapping (uid  > name)   3. CAS ing the forward mapping (name  > uid)  If we die after step 1  we waste an UID.  If we die after step 2  we just end up with an orphaned reverse mapping (harmless).  When two TSDs race to assign a UID to the same name  one of them will fail to CAS the forward mapping at step 3  and will retry to find the UID assigned by the winning TSD.  When that occurs  the only net consequence is that a UID will have been wasted by the losing TSD  whereas the previous implementation wouldn t waste one when this happened.  The  uid fsck  command can easily detect orphaned or wasted UIDs  and we could conceivably put them on some kind of a free list in the future to re allocate them.  If two TSDs are running side by side  and one uses the old method while the other uses the new lock less method  things still work as expected.  There are two possible scenarios:     Old TSD goes first  locks the MAXID row  and does its thing.     The new TSD will have to wait until the row lock is released     for its atomic increment to go through.     The new TSD goes first  atomically increments the MAXID row      and does its thing.  The second TSD locks the MAXID row and     proceeds to allocate its own ID concurrently.,inline
Simplified and corrected the tweet posting,inline
Reworked EntityMatcher to provide separation of the metric calculation and comparisson  This separation allows us to cache the calculated metric and should speed up the entity resolver,inline
useless method inlined,inline
PC optimization refactoring (Only unit tests. Missing IT tests refactoring.),inline
AGOVA 31 Removing Generics to ease control of the framework  First version and new test. It also makes the OAuthAppSettings the entry point of configuration again,inline
getAllEvents() and getNrOfEvents() methods with LuceneQueryApi removed and corresponding methods in CalendarEngineLucene now delegates calls to CalendarEngineHQL,inline
"Cleaner simulator startup and run loop exiting    If a default ROM image (""""rom.bin"""") isn t available at startup  the   simulator will now create and load a 16KB R/W memory at the ROM   location  so resets will work even without a ROM loaded.    Cleaned up the way simulator UI state is updated when the run loop   exits. ",inline
clean up project user orm,inline
Removes all bulk services from all service plans  as they no longer function in hadoop due to a lack of support for Java 7.  This resolves release 2.2 issue  7: https://wiki.duraspace.org/display/DSPINT/Release+2.2+Tasks  git svn id: https://svn.duraspace.org/duracloud/trunk@1023 1005ed41 97cd 4a8f 848c be5b5fe45bcb,inline
Various fixes and simplifications to is{ Not}InstanceOf  mostly under GWT:    Make assertThat(...).is{ Not}InstanceOf(SomeInterface.class) blow up with a helpful message under GWT  rather than always fail in the case of isInstanceOf and always succeed in the case of isNotInstanceOf.    Make assertThat(null).isInstanceOf(...) fail() under GWT instead of throw NPE. (That said  see b/34135320. But for now  let s bring our GWT behavior in line with our JVM behavior.) This also simplifies the code a bit.    Delete PlatformTest  which tests the helper methods directly  in favor of adding more tests to SubjectTest  including tests for the cases above.    Remove isInstanceOfTypeGWT from the JRE copy of Platform. It s used only from tests  not from the actual Truth implementation. Also its tests don t run on GWT. (We could make them run on GWT  but that doesn t help much  since again  that code isn t used from the actual Truth implementation.)    Simplify the actual GWT implementation to avoid calling getName() and to avoid constructing a Set. (Also  simplify the JRE implementation by inlining the helper method.)    Leave a TODO to test with class metadata off  which will demonstrate additional problems that show up only under that setting.  Relevant: https://github.com/google/truth/issues/198  Relnotes:   Made `assertThat(...).is{ Not}InstanceOf(SomeInterface.class)` blow up with a helpful message under GWT  rather than always fail in the case of `isInstanceOf` and always succeed in the case of `isNotInstanceOf`.   Made `assertThat(null).isInstanceOf(...)` `fail()` under GWT instead of throw `NullPointerException`.                Created by MOE: https://github.com/google/moe MOE_MIGRATED_REVID 182648493,inline
move IO simulation ot its own class,inline
Massive reorganisation to streamline grammar  make faster and cleaner and more Dynamic.,inline
Restructured project. JSR 80 implementation is now the main focus.,inline
Use apache tika for all default text extractions. cleaned up error handing. append correct extenstions,inline
removing HttpExecutionContext,inline
Removed unneeded 2nd handleDataReceived() method,inline
New HTML report aggregating all the charts and data from CSV files * More ways of retrieving data from SimpleStatistics * Fixed bugs in HistogramStatistics  Table... * Removed unused code (ChartGen  AbstractChartGen  PutGetChartGenerator...) * chart.sh  > report.sh: generates whole report  not just single chart,inline
Refactor to support ID types other than ObjectId (that implicitly map to String).,inline
Huge refactoring to make PrestoResolver.,inline
"Gets rid of the local write spool buffer.  ProxyOutputStream historically had ByteArrayOutputStream into which data gets spooled until it gets connected  when it is used underneath Pipe that writes from local and read remotely. This was to emulate the built in buffer of Pipe until it gets connected  but this buffer is unbounded  and it has been observed in the wild that this buffer has grown to 128MB and causes OOME:      2014 12 09_13:02:30.49536 Exception in thread """"RemoteInputStream greedy pump thread: hudson.remoting.RemoteInputStream$Greedy     2014 12 09_13:02:30.49539       at hudson.remoting.RemoteInputStream.<init>(RemoteInputStream.java:100)     2014 12 09_13:02:30.49540       at hudson.remoting.RemoteInputStream.<init>(RemoteInputStream.java:83)     2014 12 09_13:02:30.49540       at hudson.FilePath.untar(FilePath.java:510)     2014 12 09_13:02:30.49541       at hudson.plugins.cloneworkspace.CloneWorkspacePublisher$WorkspaceSnapshotTar.restoreTo(CloneWorkspacePublisher.java:243)     2014 12 09_13:02:30.49541       at hudson.plugins.cloneworkspace.CloneWorkspaceSCM$Snapshot.restoreTo(CloneWorkspaceSCM.java:396)     2014 12 09_13:02:30.49542       at hudson.plugins.cloneworkspace.CloneWorkspaceSCM.checkout(CloneWorkspaceSCM.java:152)     2014 12 09_13:02:30.49543       at hudson.model.AbstractProject.checkout(AbstractProject.java:1414)     2014 12 09_13:02:30.49543       at hudson.model.AbstractBuild$AbstractBuildExecution.defaultCheckout(AbstractBuild.java:692)     2014 12 09_13:02:30.49544       at jenkins.scm.SCMCheckoutStrategy.checkout(SCMCheckoutStrategy.java:88)     2014 12 09_13:02:30.49544       at hudson.model.AbstractBuild$AbstractBuildExecution.run(AbstractBuild.java:601)     2014 12 09_13:02:30.49545       at hudson.model.Run.execute(Run.java:1684)     2014 12 09_13:02:30.49545       at hudson.model.FreeStyleBuild.run(FreeStyleBuild.java:43)     2014 12 09_13:02:30.49547       at hudson.model.ResourceController.execute(ResourceController.java:88)     2014 12 09_13:02:30.49548       at hudson.model.Executor.run(Executor.java:232)     2014 12 09_13:02:30.49548 """" java.lang.OutOfMemoryError: Java heap space     ...     2014 12 09_13:02:34.48968 INFO: Tom   2. Integration tests  162 aborted     2014 12 09_13:02:34.48968 java.lang.InterruptedException     2014 12 09_13:02:34.48969       at java.lang.Object.wait(Native Method)     2014 12 09_13:02:34.48969       at hudson.remoting.Request.call(Request.java:146)     2014 12 09_13:02:34.48970       at hudson.remoting.Channel.call(Channel.java:751)     2014 12 09_13:02:34.48970       at hudson.FilePath.act(FilePath.java:967)     2014 12 09_13:02:34.48971       at hudson.FilePath.act(FilePath.java:951)     2014 12 09_13:02:34.48971       at hudson.FilePath.untar(FilePath.java:511)     2014 12 09_13:02:34.48972       at hudson.plugins.cloneworkspace.CloneWorkspacePublisher$WorkspaceSnapshotTar.restoreTo(CloneWorkspacePublisher.java:243)     2014 12 09_13:02:34.48972       at hudson.plugins.cloneworkspace.CloneWorkspaceSCM$Snapshot.restoreTo(CloneWorkspaceSCM.java:396)     2014 12 09_13:02:34.48973       at hudson.plugins.cloneworkspace.CloneWorkspaceSCM.checkout(CloneWorkspaceSCM.java:152)     2014 12 09_13:02:34.48973       at hudson.model.AbstractProject.checkout(AbstractProject.java:1414)     2014 12 09_13:02:34.48974       at hudson.model.AbstractBuild$AbstractBuildExecution.defaultCheckout(AbstractBuild.java:692)     2014 12 09_13:02:34.48974       at jenkins.scm.SCMCheckoutStrategy.checkout(SCMCheckoutStrategy.java:88)     2014 12 09_13:02:34.48975       at hudson.model.AbstractBuild$AbstractBuildExecution.run(AbstractBuild.java:601)     2014 12 09_13:02:34.48977       at hudson.model.Run.execute(Run.java:1684)     2014 12 09_13:02:34.48977       at hudson.model.FreeStyleBuild.run(FreeStyleBuild.java:43)     2014 12 09_13:02:34.48978       at hudson.model.ResourceController.execute(ResourceController.java:88)     2014 12 09_13:02:34.48978       at hudson.model.Executor.run(Executor.java:232)  I suspect that the channel went unresponsive first  then someone created a local to remote Pipe and started filling the local end. In such a case  the pipe will never get connected  and so the write fills up the local temporary buffer.  In this change  I m getting rid of the local temporary buffer altogether. I suppose this can increase the latency of this specific pipe operation  but the other fix is to have a bounded buffer size  and the added complexity doesn t seem to be worth it.  See: https://rm.cloudbees.com/issues/2782 ",inline
Misc logging cleanup/refactoring * CrawlerJournal.java     improve exception logging     combine writeLine() methods to use varargs * FrontierJournal.java     improve exception logging * ArchiveUtils.java     replace ignored  count parameter with meaingful boolean one * CrawlURI.java     use updated ArchiveUtils method,inline
Remove unused timeout variants of SDKTestCase.splunkRestart().,inline
Removed shared transport (https://issues.jboss.org/browse/JGRP 1844)   Removed deprecated classes  methods and fields (https://issues.jboss.org/browse/JGRP 2006)   ant jar works now   Updated manual on buffer reuse when sending   JUnitXmlReporter now prints method name correctly,inline
Introduce @QueryMap and encoded variant.  The existing version was very broken. This standardizes behavior under two new annotations which define how they apply to the URL properly.,inline
Fixed zooming behaviour.    Coerced the various zoomIn/Out/All/Original into a single point of entry;   Unified the stateu updating behaviour of the zoom actions to a single point;   the zoom level is now restored if a new acquisition is made;   some cleanups.,inline
TP: moved version checking from handleSingleMessage() and handleMessageBatch() into receive()   TP implements both receive(InputStream) and receive(byte[]) [https://issues.jboss.org/browse/JGRP 2165]   BaseServer discards length bytes if no receiver callback has been installed   TcpConnection now doesn t create intermediate buffer  but passes the input stream directly to the receive() callback   GossipRouter/RouterStub now implement both receive() callbacks   PubClient/PubServer now implement both receive() callbacks   RoundTrip.receive() never used correct offsets to read data,inline
expands modified flag to entity and aspect nodes. Changes to serializer to take in consideration modified flags for entity and aspect. Cleans serializer code  adds more junit tests to perform network tests  and further tests on existing serialization of trees.,inline
Updated session handling code  and adding and removing of listeners,inline
refactorings,inline
[JGRP 491] Multiplexer should execute getState for all registered MuxChannel under one FLUSH phase simplify FLUSH invocation for getState,inline
refactored Parameters,inline
HV 571: Removing some references to MethodValidator,inline
Added servicesview extension point to support future support of https://bugs.eclipse.org/bugs/show_bug.cgi?id 483025  Change Id: I42917201cbe317dfaa9a7b753ab2116e25189c6f,inline
Updating DocumentHelper to remove redundant and streamlone methods,inline
rewrite plugin creation code,inline
Reverted org.gjt.sp code (jedit library) back to shipping version  is unmodified from jEdit 4.3.2 source tree. Added FileUtilities class to do the observed move  and changed UIStarter accordingly.,inline
Improvements to the changes feed.,inline
"general bug hunt   no point listing more work on having only one ActionFactory dont need tool tips on top level menus finished making BookDataDisplay the central interface for viewing BookData menubar tidy up (unfinished) moving of list blur/delete options to be list buttons (much clearer) cancel button on progress bar (from DMS) search: make """"moses aaron"""" do """"moses & aaron"""" search: general tidyup   ",inline
[JGRP 598]   Simplify FLUSH [JGRP 600]   Investigate Multiplexer locking scopes,inline
Vishal  0 Refactoring   remove redundant db calls to get Patient,inline
Refactored RDFRelation into a basic ExecutionPlan structure,inline
refactor signing / encryption for JWT: WIP,inline
Concurrency bug in getNextTask() solved   wip  doesn t compile  Java Timer to handle edge case  Changes in SPSC and MPSC queue,inline
simplify MagicAuthStringService (part 2),inline
New files  or files moved from other locations,inline
Hopefully the last of the big exceptions refactorings. I went through all of the places we re adding context to our Errors object and made sure we re never doubling up    specifing the same injection point or key multiple times.  The new errors have nice  at  lines for parameters  fields and linked bindings. Hopefully this makes it easier to follow the stacktraces. Additional context (such as the binding s origin in a module) could be added later if desired. Currently we have module specific sources in CreationExceptions  and plain old binding sources elsewhere. The end result is messages that can look like this:  com.google.inject.ProvisionException: Guice provision errors:  1) Error injecting constructor  java.lang.UnsupportedOperationException   at com.google.inject.ProvisionExceptionTest$RealD.<init>(ProvisionExceptionTest.java:284)   at binding for com.google.inject.ProvisionExceptionTest$RealD.class(ProvisionExceptionTest.java:284)   at binding for com.google.inject.ProvisionExceptionTest$D.class(ProvisionExceptionTest.java:1)  1 error  git svn id: https://google guice.googlecode.com/svn/trunk@652 d779f126 a31b 0410 b53b 1d3aecad763e,inline
Little refactor,inline
rebase ModifiedNTriplesWriter on Rio NTriplesWriter and modify NQuadsWriter to use NTriplesUtil.append for output,inline
remove phases from BindingProcessor  refactor so that two different classes do the two different bits  with an abstract superclass managing the shared pieces.  git svn id: https://google guice.googlecode.com/svn/trunk@1527 d779f126 a31b 0410 b53b 1d3aecad763e,inline
started refactoring RoadModels  created SpatialRegistry to encapsulate all positional information related to road users,inline
change reports sidebar  to a HTML component with grouped links. This opens up a creativity space towards better user interface  for showing possible reports  generators  etc,inline
Changes for support of progress on bug https://bugs.eclipse.org/bugs/show_bug.cgi?id 290446,inline
End to end tests replaces functional test  Functional tests were the tests that required both hadoop and splunk to run. They have been replaced by end to end tests as functional tests should not need any of splunk nor hadoop. Integration test group is removed.,inline
consistent file output and redundany removed,inline
Removed unused change from PR,inline
removes unused code,inline
refactored Parcel and ParcelDTO (now uses AutoValue) central uses Parcel directly,inline
Dheeru |  282 | Refactored invalid input handling logic,inline
Cleaned up extended newick code  did some testing.,inline
major refactoring  * simplified ant parser * generalized folding logic to work with tag def initions from php sources * implemented native Tag/Filter/Function index ing on a project basis,inline
Context change for tree popup keywords.,inline
Simplify a bit AsyncFileImpl,inline
Further API simplification,inline
* If number of substitutions of candidate type is zero  then this type is not removed as it seems to be a root type (fixes  12). * Conversion to plural form now features better property customisation check. * Fixed broken argument processing. * XML marshaller in Unit tests is now schema enabled. Added more XMLs. Added case for xsd:anyType. Improved line and branch coverage. * Updates README with respect to future release.,inline
CHANGELOG: updated for 1.1.1 FileAide: Added to assist in common file tasks DemoPSMerge  Diff  CSVtoRDF  Smush  SPARQLTranslator  XSLTranslator  CSVtoJDBC  DatabaseClone  InitLog  XPathTool  ArgList  JenaConnect  RecordHandler  TextFileRecordHandler  RecordHandlerTest: removed VFS use for FileAide NLMJournalFetch  PubmedHTTPFetch: WebHelper  > WebAide NormDamLevDist  NormTypoDiff: MathHelper  > MathAide Match  PubmedScore  Score  GlozeTranslator  Runbibutils  SPARQLTranslator  SanitizeMODSXML  XSLTranslator  Merge: no longer requires config files Match  GlozeTranslator  SPARQLTranslator  RunBibutils  XSLTranslator  Merge: constructor cleanup Score: lowered info message for no temp model to debug Transfer: lowered warn message on no output to debug  check for valid output changed and added remove from nothing check GlozeTranslator  SPARQLTranslator: updated to modern input/output with Overrides DatabaseClone: uses streams rather than FileObjects now JenaConnect  RecordHandler  JenaConnectTest: removed File and FileObject constructors... use String path constructor TextFileRecordHandler: uses stream closing rather than FileObject closing,inline
cleanup  locking  key paths now work as expected,inline
Merge Luna changes,inline
Refactored and split ItemSessionControl: cleaner.,inline
"Rewrite substitution resolver  use explicit immutable ResolveSource  The immediate motivation here was to fix  177  which this does  but in this commit a couple of existing test cases are broken in a way which seems to relate to order of resolution and resolve memoization. So we need to layer on to this commit better solutions for caching and cycle detection to get rid of yet more mutable state.  The previous setup used a side effect based lookup table of """"replacement"""" values to conceptually modify the tree without actually modifying it. Unfortunately that setup was hacky and hard to reason about and  apparently  broken in cases such as  177.  This new setup actually creates a modified tree and passes it around explicitly instead of inside ResolveContext.  In this commit  ResolveContext still unfortunately has a mutable cache and a mutable table of """"cycle markers."""" Both of those in theory could also be replaced by simply modifying the tree.  The main downside to this commit   and to cleaning up the remaining mutable state   is that we re using Java collections which have to be copied wholesale for every mutation (they are not persistent functional data structures). This will have an unknown performance impact  though in a sane world Config.resolve() is not a bottleneck in anyone s production app.  Some other details of this commit:   * resolve concerns removed from peekPath in AbstractConfigObject    and relocated into ResolveSource  * recursive resolution removed from lookupSubst and moved to    ConfigReference  * new hasDescendant() method used only in debug tracing     it is grossly inefficient to ever call this full tree    traversal  * new replaceChild() method is inefficient due to Java    collections but could in theory be made efficient  * most complexity relates to always knowing the parent of    a node that we might have to replace  so we can walk    up replacing it in its ancestor chain  TODO in subsequent commits:   * fix failing test cases  * we cannot replaceChild if we are a descendant of ConfigConcatenation     but we probably (?) need to be able to; consider / fix this  * instead of memoizing resolve results in a hash table  just    continuously modify the ResolveSource to have the most recent    results  * instead of using the """"cycle markers"""" table  change the    ConfigReference to a cycle detector value ",inline
Clean DevUtils.makeOptions,inline
FACES 2021 Prepare for OSGi by moving impl classes to internal sub packages in order to clearly distinguish API from implementation (reduce API in InputDateTime components by removing methods and making methods final.),inline
simplify configuration UI,inline
VehicleDTO is now a true value object  it is made final. Made neccesary changes in central system,inline
"Remove the """"get"""" HTTP helpers from Entity   only Service has HTTP helpers  it doesnt follow the model to have them on a resource and it conflics with ResourceCollections implementation of Map and will conflict if Entity ever implements Map. They helpers also arent really necessarry because they do so little. But  mostly fixes a modeling and name conflict issue. ",inline
Fixed bug where rulesets were not being disable properly.  Also added comments and refactored a little.   git svn id: https://pmd.svn.sourceforge.net/svnroot/pmd/trunk@604 51baf565 9d33 0410 a72c fc3788e3496d,inline
inlining it again,inline
[MRELEASE 98] abstracted rewriting code and implemented development pom rewriting  git svn id: https://svn.apache.org/repos/asf/maven/plugins/trunk@398224 13f79535 47bb 0310 9956 ffa450edef68,inline
Inline helper methods that are no longer needed after f4502be7cc75b17928cd22025cf98048e3995ba3.  RELNOTES n/a                Created by MOE: https://github.com/google/moe MOE_MIGRATED_REVID 191443228,inline
fixed class names for changes in celements search,inline
closes  3  connection not closed after database exception  is now fixed. Also did some cleanup.,inline
"Revert """"UNCHECKED CHANGES: Added facility to configure the CSV Export the same way adding it at the v8 version of the module. Only difference: reconstruction of the configuration file (in CmsCsvExportBean.java) is adjusted. Details:   Added CSV Export configuration facility   Renamed CmsCvsExportBean to CmsCsvExportBean and adjusted calls   Refactored CmsCsvExportBean""""  This reverts commit 9a18a24e466cfaaa63d7b7217dd3d44c067d09fb. ",inline
JCBC 906: Index Management experimental API second iteration  Motivation:             After the first experimental API implementation in JCBC 777  an SDK RFC was created and a few elements received feedback  hence this second iteration.  Modifications:                New specific exceptions have been added for case where index creation is attempted on already existing index  and where drop of an index that doesn t exist is attempted.  The watchIndex method has been removed in favor of just using the more generic watchIndexes with a single parameter.  Change Id: I3cf087f4b60d4a22b766a12092737bafb8a610c4 Reviewed on: http://review.couchbase.org/58893 Reviewed by: Sergey Avseyev <sergey.avseyev@gmail.com> Tested by: Simon Baslé <simon@couchbase.com>,inline
Created a fully working HandleSetter for eclipse  and refactored HandleGetter a little mostly to stuff common code into PKG.,inline
Fixed background image bug. Caching images in browser. Enhanced LinkListener. Some house cleaning  playing with Idea s code inspection utility.,inline
Partial refactoring of the Database   AtomStore interface so that the Database no longer needs to know about the AtomStore,inline
Java  typres: make MethodType immutable  remove getApplicableMethods overload,inline
Create tables and clean up code,inline
"Changed JOhm persistence paradigm to JPA like from inheritance like to make API use annotation driven and minimally invasive.  Conflicts:  	README.md 	src/main/java/redis/clients/johm/CollectionSortedSet.java 	src/main/java/redis/clients/johm/JOhm.java 	src/main/java/redis/clients/johm/Model.java 	src/main/java/redis/clients/johm/Nest.java 	src/main/java/redis/clients/johm/collections/RedisList.java 	src/main/java/redis/clients/johm/collections/RedisMap.java 	src/main/java/redis/clients/johm/collections/RedisSet.java 	src/main/java/redis/clients/johm/collections/RedisSortedSet.java 	src/test/java/redis/clients/johm/CollectionsTest.java 	src/test/java/redis/clients/johm/SearchTest.java 	src/test/java/redis/clients/johm/models/Item.java 	src/test/java/redis/clients/johm/models/User.java ",inline
Started removing hardcoding of road filenames.,inline
Move some db methods to dao.,inline
Moved lifecyle package to environment.se. Removed unnecessary functionality from deplyment (imported from Seam) to simplify.,inline
Even more performance issues fixed. I do not guarantee there are no bugs in this build ;). Status of what else needs to be done will be assessed later on. What has changed:  1. If EVERY protection is inside of the cache  it is safe to assume that any block NOT in the cache  IS NOT in the database.    We leverage this fact heavily in this build to give a significant boost to performance. 2. Caches. Cache ALL the computations. Numerous caches have been added in various places where specific points of bad performance    was located at. These caches generally only store computationally expensive calls; overall this is also significant after the    caches are nice and toasty. 3. Modules   before  LWC s own module system would broadcast events to every registered module. This added a overhead of about    1k nanoseconds per module  if they didn t override the method. This has been changed to detect at runtime what methods    they have overrided and then ONLY send events to modules that have them overridden. We could have modules register what    events they use but this would break backwards compatibility with plugins that hook into LWC. This uses reflection but    is all done on startup so the overhead is minimal. The gains is fairly large and worthwhile.  There is still a potential to shave off even more precious cpu cycles but this will be assessed further once initial results are in.  For scope  here is some example values for events: timing is in nanoseconds   Event  |Before | After| Redstone |  22k  |  3k  | Interact | 100k  | 46k  |,inline
Added ProcessingQueue   Made ProcessingQueue.process() protected (should not be called from outside the class)   Added PUNCH_HOLE and CLOSE_HOLE events   Serializing state requests at the state provider (https://issues.jboss.org/browse/JGRP 1742)   Added hole punching to BARRIER   Correctly setting TCPPING.initial_hosts in unit tests   Added support for GET_CURRENT_VIEW after a state transfer has completed (called by the state requester)   JChannel.getState() now throws an exception if there s a timeout   Added tests for blocked threads to BARRIERTest   Punching hole for state requester/provider   Handling exception on CLOSE_BARRIER (https://issues.jboss.org/browse/JGRP 1742)   Discarding messages when BARRIER is closed (storing only last message); re delivering those messages when BARRIER is closed( https://issues.jboss.org/browse/JGRP 1742)   Not skipping BLOCKED or WAITING threads   Timeout on CLOSE_BARRIER if threads cannot be flushed   StateTransferTest now tests all (3) state transfer protocols   Fixed another bug in BlockingInputStream (also backported to 3.4.2)   BARRIER lets messages (unicast or multicast) with a SKIP_BARRIER flag pass   Added SKIP_BARRIER flag to Message   Removed barrier_closed: this is handled by BARRIER directly,inline
Removed a useless static initialization  git svn id: https://svn.apache.org/repos/asf/mina/trunk@664636 13f79535 47bb 0310 9956 ffa450edef68,inline
Grab new AnalyzeSkeleton from Fiji and move all skeleton related code into org.doube.skeleton,inline
simplified stream examples,inline
"a couple of changes:  1) Separated CovBuildCommand into two different commands  one for Script sources and one for compiled sources. 2) Removed the """"Support compiled language sources during cov build phase"""" checkbox. 3) Updated all the unit tests related to above changes. ",inline
"All the changes stem from modifications to ClassMirror  MethodMirror.  Their methods no longer return other ClassMirror objects in response to getSuperClass() or getInterfaces() or getExceptions(). Instead  they return String or String[]. Detector looks up those classes as necessary. This change avoids mirroring classes that we KNOW to be non pausable  those in """"java."""" or """"javax."""" packages.  Weaving is also faster because the weaver stops looking for a pausable method up in the hierarchy as soon as it encounters a super class name in one of these nonpausable packages. ",inline
Moved the flatten() method from AbstractBranchFormula to Formula.,inline
Rewrote tdb block code to use a superclass.  Removed Block.  Simplified writing  no need for a separate object.  The gmapsupp will also use the new FileBlock superclass.  That s the plan.  git svn id: http://svn.mkgmap.org.uk/mkgmap/branches/file encoding@3722 25d90789 57f7 4ee0 8453 03a3dfeeeb22,inline
"Node analyze() can now replace the current AST node. This is needed for cases where the parser does not know better and creates the wrong type of AST nodes. This submit looks much bigger than it is. Because almost every class implements Node  adding the replacement node as a return value of analyze() touched many classes  but the changes are minimal. In most cases  """"this"""" is returned  i.e. the Node is not replaced. The first and so far only example of actually replacing the node is a QualifiedIde that is mistaken for a DotExpr  since they cannot be distinguished syntactically. Only after parsing the imports  the compiler can detect that a DotExpr is indeed a QualifiedIde. Transforming the AST has to keep all symbols  including their white space. It then makes it easier to analyze other expressions  e.g. to detect non invoking access to static members of other classes  which have to be initialized before accessing the member. Warning: I was too lazy to always reassign child nodes with the result of Node analyze()  because I know that currently  only DotExprs may be replaced. This is a TODO  because it may lead to surprises in case the same technique is used for other nodes in the future.  [git p4: depot paths   """"//coremedia/jangaroo/"""": change   146764] ",inline
refactor Supplements util,inline
Change the behavior of create and update for users and groups to avoid creating/updating an entity when another one already exists with the same identifier.,inline
* various bugfixes:   * restored FormsServlet to version before commit   * Date: remove debug output   * Link: implemented readonly mip for outputs rendered as links   * Dialog: removed action which is breaking the form   * BfRequiredFull: added missing dependencies for betterform.ui.range.Slider   * InlineAlert: fixed rendering of inline alerts   * XFormsFeatureExplorer: added BfRequiredXFormsFeatureExplorer to add addtional JS dijits,inline
"Made several ui changes to accommodate Brett s feedback:   removed question mark for """"Time Dimension"""" label   changed """"UNique members?"""" label to """"Contains only unqique members""""   added bindings to show/hide the clear ordinal column button.  Added an editable menulist for the time format. Unfortunately it looks like the """"editable"""" attribute is not yet implemented in the pentaho ui stack for menulists.  Cleaned up the showing/hiding of elements specific to time dimensions:   added utility method to show/hide a container   put time dim items in a container  and geo items in a container.   changed code to hide / show said containers ",inline
fcrepo 848:  Tidy up FeSL policy validation  Validation now occurs as part of object/datastream validation. All old FeSL validation removed.  Methods with invalid policies will result in the method failing  with no change to the policy index.  (see also fcrepo 770),inline
XHR transport refactoring and buffer alloc optimization,inline
minor changes after value expression review.,inline
OOZIE 938 Remove some duplicated code in FsActionExecutor (rkanter via tucu)  git svn id: https://svn.apache.org/repos/asf/incubator/oozie/trunk@1369898 13f79535 47bb 0310 9956 ffa450edef68,inline
some refactoring  also tempoary test code for dead end tips bug,inline
Improve javadoc  remove empty tags. Add new addAnimation method.,inline
Remove getQueryResults,inline
Use Calendar for dates and remove unused account sid,inline
Another minor change  nothing important happened.,inline
I think all of the credentials support is now done  * Upgraded maven project dependancy (was generting errors when trying to test) * Moved a few files aorund to make more sense * lots of other minor stuffs,inline
[favorite] simplify last view management,inline
Halfway through refactoring of commands and permissions,inline
Added support for custom Java based editor.  A custom Java based editor can now be added to a JVstHost object. The view can modify parameter and program settings of the vst  as well as send midi messages to it. JVstHost has been modified such that all public methods are synchronized. This helps coordinate automation and ui threads which may try to access the plugin simultaneously.,inline
Bug 104267 changes in the plugin xml while target is running are ignored on subsequent restart,inline
Move versions from Item to Content,inline
Tidy up  git svn id: https://svn.apache.org/repos/asf/commons/proper/validator/trunk@1649703 13f79535 47bb 0310 9956 ffa450edef68,inline
Get rid of really bad caching being done by FilterManager.  For necessary caching  rely on the EntryCorral.  For everything else  just use the auction identifier as the lookup.  Simplifies the code  and makes it more correct  I believe.,inline
Removed getChildren from DiffNode because it is not really needed,inline
Reverting jmdns refactoring.  Change Id: I61568bcd4e6c371ff6a3b599b07668520852377c,inline
Refactored connection management code in DefaultClientRequestDirector execute(). Preparing to implement authentication handling for tunneling requests via an authenticating proxy  git svn id: https://svn.apache.org/repos/asf/jakarta/httpcomponents/httpclient/trunk@539113 13f79535 47bb 0310 9956 ffa450edef68,inline
Attached is a patch that does the following:  1) improves performance of commit/rollback by reducing number of round trips to the server 2) uses 7.1 functionality for setting the transaction isolation level 3) backs out a patch from 11 days ago because that code failed to compile under jdk1.1  Details:  1)  The old code was doing the following for each commit:    commit    begin    set transaction isolation level xxx thus a call to commit was performing three round trips to the database.   The new code does this in one round trip as:    commit; begin; set transaction isolation level xxx  In a simple test program that performs 1000 transactions (where each transaction does one simple select inside that transaction) has the following before and after timings:  Client and Server on same machine  old         new                 1.877sec    1.405sec   25.1% improvement  Client and Server on different machines old         new                 4.184sec    2.927sec   34.3% improvement  (all timings are an average of four different runs)   2)  The driver was using  set transaction isolation level xxx  at the begining of each transaction  instead of using the new 7.1 syntax of  set session characteristics as transaction isolation level xxx  which only needs to be done once instead of for each transaction.  This is done conditionally (i.e. if server is 7.0 or older do the old behaviour  else do the new behaviour) to not break backward compatibility.  This also required the movement of some code to check/test database version numbers from the DatabaseMetaData object to the Connection object.  3) Finally while testing  I discovered that the code that was checked in   11 days ago actually didn t compile.  The code in the patch for Connection.setCatalog() used Properties.setProperty() which only exists in JDK1.2 or higher.  Thus compiling the JDBC1 driver failed as this method doesn t exist.  Thus I backed out that patch.   Barry Lind,inline
major changes to instantiation model (now every iteration gets its own instance) better support for specification inheritance,inline
changing curation back to list of steps  no json. Json serialzation handling in custom hibernate UserType,inline
Update Databukkit  abstract config  simplify/improve loader.,inline
Revise simple mapreduce engine ( 442).  Moves some sandbox projects to core package.,inline
Toby: allowing null values in all iterators under the iterators package and fixing remove behaviour in PredicatedIterator  FilteredIterator and MappedIterator.,inline
Change the HttpClientRequest implementation concurrency to synchronize on this instead of the lazy connection,inline
lots of performance improvements  1) streaming json instead of creating maps and lists 2) cached reflection logic 3) created the ability to write custom Property objects    value resolvers per object that yoga knows about 4) moved around the way URI creation happens so that it can leverage  3 and also be a bit more performant,inline
[HER 1605] Refactor parameterizable policies out of frontier * defaults.xml     update bundled profile for new chains refactoring * CrawlController.java     move to three processor chains rather than one * Frontier.java     (loadSeeds) removed * ToeThread.java     delegate most processing loop to FetchChain and DispositionChain * AbstractFrontier.java  WorkQueueFrontier.java     move policies/calculation out to processors * CandidatesProcessor.java     new processor for DispositionChain that runs every outlink through CandidateChain * CrawlStateUpdater.java  > DispositionProcessor.java     rename  expand to prep CrawlURI for frontier * FrontierScheduler.java     deleted; use CandidatesProcessor/CandidateChain * LinksScoper.java     deprecated; use CandidatesProcessor/CandidateChain/CandidateScoper     (only temporarily retained for ease of comparison) * CandidateScoper.java     simple single URI scope testing for CandidateChain * FrontierPreparer.java     precalculate all frontier policies in CandidateChain  before scheduling * PreconditionEnforcer.java     ProcessorURI >CrawlURI; take on some prerequisite preparation previously deferred to elsewhere * ProcessorsReport.java     update for 3 chains of Processors * SheetOverlaysManager.java     (applyOverridesTo) moved here for broader use * CandidateChain.java  FetchChain.java  DispositionChain.java     role specific subclasses of ProcessorChain (suitable for type based autowiring) * CrawlURI.java     new fields/accessors of use to new chains/frontier * PostProcessor.java     deleted; skip to  postprocessing  is now skip to end of chain * ProcessorChain.java     take on control loop formerly in ToeThread * ProcessResult.java     absorb ProcessStatus     eliminate problematic STUCK result,inline
Simplified launching of Swift.,inline
RF add unique&copyable enforcements + some clean up in fieldType hierarchy,inline
Allow  f folder option to be a regex.  When top level folder names change but the folder you are looking for does not  the old fixed name logic was insufficient.,inline
[HER 1609] wide crawl performance is limited by lock contention in ServerCache.getServerFor(String)  * (all  especially CachedBdbMap.java)      pbaclace contributed patch  ported to H3  plus... * StatisticsTracker.java     replace LongWrapper with AtomicLong     use non recursive putIfAbsent based idiom for get or create * DefaultServerCache.java     clean up host/server get or create around non recursive concurrent idiom * BdbModule.java     add expectedConcurrency property & je.lock.nLockTables tuning * TopNSet.java     add synchronization  as calling StatisticsTracker method has lost it,inline
lots of refactoring + support for having multiple connections,inline
Moved more IO  collection  and other library classes to MLCLLib.,inline
refactor: remove support for postgresql < 8.2 ( 661),inline
Simplified the Expression hierarchy a bit,inline
General cleanup,inline
[MCHANGES 338] Remove redundant anchors set on headings with subtask [MCHANGES 269] Move anchor location in changes.xml to header  git svn id: https://svn.apache.org/repos/asf/maven/plugins/trunk@1591792 13f79535 47bb 0310 9956 ffa450edef68,inline
HV 1148 Inlining some trivial methods,inline
simplify code,inline
restructured Simulation initialization,inline
Removed ProxyState setters,inline
Enhancements for service dynamics.,inline
Remove circular dependency between DocumentLoader and JsonUtils  The public API for DocumentLoader is unchanged  but the protected static API for DocumentLoader has been modified to move all of the implementation methods and fields into JsonUtils,inline
TFJ 397 adding Site streams example simplified UserStream example,inline
Refactor to make dashboard possible,inline
Simplified constructors of LDMs. Reordered member functions.,inline
refactored and input adapted,inline
New Features: Reworked Database Persistence layer  removed locking  new multi component,inline
started working on updates to match CR release of jsonld  All context processing algorithms done.  done Expansion Algorithm and Value Expansion Algorithm  All core expansion tests passing  keeping track of changes and some thoughts  Compact Algorithm implemented and all compact tests passing  Flattening Algorithms complete.  Framing algorithm done  rdf conversion algorithms complete  re added old normalization code  Error handling cleaned up and error handling tests passing  updated implementation reports  fixed up programming errors in integration modules and fixed up implementation reporting issues,inline
[ 112] Refactor code and fix copyright notices,inline
DoubleChest now supported as a valid Inventory + various Inventory related cleanups,inline
"449495 : improve ProjectConfiguration sort order  introduced new runsAfter and runsBefore attributes to the configurator extension point.  runsAfter : Optional comma separated list of ids of required project configurators this configurator should run after. ids suffixed with ? are considered optional  runsBefore : Optional comma separated list of ids of optional project configurators this configurator should run before. ids suffixed with * are considered required  The secondaryTo attribute has been deprecated.  For any given mojoExecution  a Directed Acyclic Graph is built from the configurators list and their runsAfter/runsBefore configurator dependencies.  Configurators are sorted twice :    once per mojoexecution. Only configurators participating to that mojoexecution are considered     once for project configuration. All configurators from all mojoexecutions are sorted.  So if a project configurator pc1 needs to run after another configurator pc2 defined in a separate mojoexecution  it will need to declare : runsAfter """"pc2?""""  so the first mojoexecution sort doesn t fail.  Change Id: I501b5ae23750f957b256f3caafcc1046b4d3a846 Signed off by: Fred Bricon <fbricon@gmail.com> ",inline
* Colormap combobox is now correctly handling modified colormap. * added PluginLauncher.startSafe(..) method which allow to handle exceptions. * reworked the ThreadUtil.invokeNow(Callable) method. * minors fixes and refactoring.,inline
Sesamize cleanup.,inline
Introduce liquibase   clean up tests,inline
[ 47] Updated CPU plugins according to newest emuLib changes,inline
refactoring of the Chart interface,inline
minor refactoring,inline
merge with sync_api_refactor branch,inline
Way to return values from tasks is changed to more typed.,inline
remove unused code,inline
Massive refactoring for keys/settings,inline
changed tests to use the modified ChannelTestBase,inline
Refactored DataSeries to replace overloaded Class<?> type with enum,inline
Removed the obsolete Invenio search handler,inline
ISQReader: move the dialog code into run() and tidy up,inline
While holding down CTRL over an identifier in a SourceCodeView   the identifier will now be underlined and the mouse pointer will change to indicate that clicking jumps to the symbol s definition,inline
refactor: remove unused PgPreparedStatement.adjustIndex ( 1253),inline
refactor dcm4che tool getscu,inline
[AESH 185] backport some of the changes lincoln provided in the console shutdown branch.   read() now returns a boolean   remove methods not needed in Process   set TestTerminal to use ConsoleInputSession + AeshInputStream,inline
fixed a bug where Neo4j automatic index keys were being removed in AutomaticIndexHelper methods.,inline
clean up code a little  git svn id: https://svn.apache.org/repos/asf/maven/plugins/trunk@381862 13f79535 47bb 0310 9956 ffa450edef68,inline
Coded most TimelineFrame buttons/actionPerformed  * Removed todo tag (mostly done)  * Added fixme tag for mergeMoments (actions get deleted?) Added some functions to Timeline  * findMomentPosition to run a binary search on moments  * shiftMoments   has a todo tag to complete  * mergeMoments   appears to work  but the UI side needs fixing Added Moment.copy() Updated Timeline.copy to use Moment.copy Removed outdated ResourceComparator references to Argument.editor  * Affected GmObjectFrame and TimelineFrame Removed todo tags from Gm6FileReader in accordance with ticket:17  git svn id: https://lateralgm.svn.sourceforge.net/svnroot/lateralgm@195 8f422083 7f27 0410 bc82 93e204be8cd2,inline
Inline account initialization,inline
Refactoring CommandLine interface.,inline
Wow. just... wow.  Fixes  84 correctly and cleanly.  Rely on templates.,inline
SC QCADOO 133 prioritization and data access refactoring,inline
Add SnapshotAcceptanceTest  mostly with tests moved from SnapshotTaskTest  These tests ended up uncovering a few bugs  which I ve fixed.,inline
o Removed unused methods  added a couple of missing license headers  git svn id: https://svn.apache.org/repos/asf/maven/surefire/trunk@1040715 13f79535 47bb 0310 9956 ffa450edef68,inline
Reverted last 2 revisions as they introduced a currently unusable system for obtaining and updating the model.,inline
Rework DynArray to follow the defineOwnProperty and other aspects of the spec.,inline
Configuration parser adds ontology sources  removed redundant method in OntologyManager  defined Strings for ontology service providers.,inline
"Revert """"rttm: Started changes to TM simulation"""" on working branch.  This reverts commit 30dc8fa02e17a39d7c35efb8b96188bf3028d0d1. ",inline
Further tidying of assessment management views,inline
+ Added JsonName  JsonRootType annotations   Updated tests and model to account for annotation changes   In Main  isolated assignments that were doubling as conditionals  git svn id: https://svn.codehaus.org/enunciate/trunk/enunciate@735 c2b6a248 b21b 0410 9d80 82131e002806,inline
[ LIB 49] Change Preference configuration format of TransferCapabilities,inline
Clean up source for JDK 1.6.0,inline
Inlined WordCramEngine s shapeToImage()  to bring its logic closer to what s in drawWordImage    they re very similar.  Trying to un tangle the mess there.,inline
"  Undid redesign of April 2011. Most importantly  instead of a subclass of java.io.File  OverthereFile is now an abstract base class. Subclassing only made the implementation more complex and added no benefits: any other code used expects to be able to open a FileInputStream or a FileOutputStream to a java.io.File  which won t work for remote files. This change also allows for more specific semantics of delete()  mkdir()  mkdirs()  and renameTo().   Removed API methods that have better alternatives  e.g. use listFiles instead of list.   Removed convenience methods such as get(OutputStream).   Renamed get() to getInputStream() and put(long) to getOutputStream(long).   Renamed HostConnection to OverthereConnection.   Renamed OverhereConnection.startExecute() to OverthereConnection.startProcess().   Renamed CommandExecution to OverthereProcess.   Renamed CommandExecutionCallbackHandler to OverthereProcessOutputHandler.   Improved OverthereProcessOutputHandler implementations: they can now be created using static methods and can be grouped with the MultipleOverthereProcessOutputHandler.   Improved performance of SSH (and specifically SCP) protocol by reducing wait time in loop waiting for completion of a command from 1000ms to 50ms.   Fixed bug in SshInteractiveSudoOverthereConnection where it could not handle a password prompt that does not end in """"assword:"""" but has """"assword"""" somewhere in the middle.   Added CmdLine/CmdLineArgument abstraction of command line to allow for better hiding of passwords in logs and implement command line encoding (moved here from from OperatingSystemFamily).   Improved Over   Reimplemented OverthereConnection.execute() in terms of OverthereConnection.startProcess(): reduces duplicate code in protocol implementations  ensures execute() and startProcess() have identical semantics  and forces all protocol implementations to implement startProcess() so that the WSADMIN and WLST daemons will always work.   Set source and target compatibility to 1.6.   Added building of sources (and javadoc once artifacts.gradle is fixed).   Added dependency on Guava. Should replace all use of Apache Commons soon.   Using Scannit for annotation scanning instead of Reflections.   Updated notes in README.md. ",inline
CSSName FS_ID is now public and final  allowing direct access to the id  bypassing getAssignedID(); micro optimization :); getAssignedID() and setAssignedID() have been removed. IdentValue string property is also final (as should have been).,inline
Reworked DraggableNumber and Parameter view.  There are still a lot of issues with margins.,inline
Changes to remote service api and additions to implementation,inline
removed some idea warnings,inline
clean up: created new ASTBuilder which is lesser pain to use than the old one,inline
433224 expose global settings.xml in m2e preferences  Change Id: Id02badd679ca56f651ed374b49cf5c67881e6e55 Signed off by: Igor Fedorenko <igor@ifedorenko.com>,inline
[HER 747] Ensure  retired  status for queues is operator controllable [HER 1768] Changing queue totalBudget not retiring queue as expected * CrawlURI.java     (includesRetireDirective) internalize to CrawlURI * AbstractFrontier.java     allow re enqueuing of untried URI with retire driective     clean up terminology/method names * WorkQueue.java  WorkQueueFrontier.java  BdbFrontier.java     adjust budget/sessionBalance handling to always count up  always consult latest values  always refresh values from latest URI     (processFinish) reorganize to reduce redundancy * DispositionProcessor.java     offer forceRetire setting * QuotaEnforcer.java     set failed status *or* forceRetire  not both [HER 1823] H3: adding SheetAssociations mid crawl won t affect already queued CrawlURIs (sheet liveness)  * SheetsOverlayManager.java     (applyOverlaysTo) rename  unify  reapply whenever called to ensure liveness * CandidatesProcessor.java     adjust to rename,inline
Many changes / improvement on Image Loader (grouped importer  stitching..)  * AbstractImageProvider: replaced getImageByTile(..) by getPixelsByTile(..) and the method now support region loading. * Array1DUtil: added copyRect(...) method for easier  rectangular  copy * ClassUtil: added getJarPath(Class) method * IcyColorMap: minor fix on copyFrom(..) method * IcyExceptionHandler: Error report now use the WebInterface method * ImageUtil: added getTileList(Rectangle region  ...) method * Loader:    reworked getSequenceFileImporters(..) methods to be more generic    moved file grouping in separate class    reworked Sequence loading/building from multiple file.    minor tweak on preview panel * LociImporterPlugin:    added automatic Stitching if needed    added Metadata level selection using  flags  in open(..) method    reverted  groupFiles  property back to true by default    implemented getPixelsByTile(..) method with region loading support    added region loading support to getImageByTile(..) method    added sub resolution support to getImage(IFormatReader  ...) method    added sub resolution support to getPixelsInternal(IFormatReader  ...) methods    added sub resolution support to getImageInternal(IFormatReader  ...) methods * Sequence:    tweaked getOverlays(Class) method    added getSelectedROISet(Class) method    added getSelectedROIs(Class roiClass  sorted  wantReadOnly) method * SeriesSelectionDialog: now use SequenceIdImporter instead of SequenceFileImporter importer. * SystemUtil: getJavaVersionAsNumber() now returns JAVA version as major numbers (6.0xx  7.0xx  8.0xx  9.0xx  ...) * LUT: minor fix on setAlphaToOpaque(..) method * OMEUtil: added getNonNegativeInteger(int) method * PluginDescriptor: better information recovering for bundled plugin. * Documentation fixes,inline
Removed unnecessary special chars that do not need special handling and fixed failing tests,inline
enhance ERXArrayUtilities  • use interfaces as params where possible • prefer methods defined in Java interfaces instead of NS specific ones (add() vs. addObject()  …) • some performance enhancements • give some methods shorter names • fix Javadocs • add tests,inline
changed tests to use the modified ChannelTestBase,inline
o Fixed the documentation about the  autoStart  tag o Define some constant for autoStart o Removed one handler method o Minor code refactoring  git svn id: https://svn.apache.org/repos/asf/mina/trunk@713366 13f79535 47bb 0310 9956 ffa450edef68,inline
Moved connection pool construction logic out of HttpClientBuilder into a separate builder class  git svn id: https://svn.apache.org/repos/asf/httpcomponents/httpclient/trunk@1777768 13f79535 47bb 0310 9956 ffa450edef68,inline
Need to refactor a global projection barrier.,inline
NXP 13148: cleanup use of CoreInstance,inline
Manual merge and refactor of geoip,inline
Initial commit of inline content refactoring,inline
Simplify the codeArea s interface,inline
cleanup attribute lore mess,inline
some fixes and refactorings,inline
AutoRevert.SettingsUpdate; test cleanup,inline
Bug 411648   Duplicate object IDs are created under certain conditions   the InsertionAdapter wasn t always setting object IDs  so added a base class method to create temp objects and assign IDs. Bug 411717   Feature serialization for some elements does not match xsd used by jBPM parser   added framework support for reordering features. Bug 411541   File save takes an unusually long time when jBPM User Task property tab is visible   refactored some code to cache tooltip text lookups; this was enough to speed up the resource change notification loop.,inline
Inline finishAndInjectSingularMethod into generateSingularMethod,inline
Refactored by separating SQLite domain from JDBC.,inline
refactored tests to make them more readable,inline
dcm4che/dcm4chee arc light 819 : dcm4che tool dcmldap: Utility to insert/remove configuration entries for Network AEs into/from LDAP server,inline
Vishal  Shruthi |  275 | Refactored Transitions to use Prompt builders instead of using node builders,inline
check all intervals for overlaps  simplify code to correct  wrong assignments. TODO:    check for duplicates is not yet okay   random numbers    optimizations to increase precision of address search  git svn id: http://svn.mkgmap.org.uk/mkgmap/branches/housenumbers2@3441 25d90789 57f7 4ee0 8453 03a3dfeeeb22,inline
Refactor InsertMode to behave more like CommandBasedMode so it s easier to define KeyMappings.  This also allows me to use the provider state for executing Eclipse operations.,inline
Volumes   a sort of self made cuboid abstraction. Refactored warzones  monuments and team spawns into volumes. Can finally start adding new features again soon.,inline
Rework ruleset loading     ResourceLoader is now instantiable  and we can tell which classloader to use to get resources    We will always use the execution classloader  or just add the paths added by ant  but *never* the auxclasspath    The classpath added by Ant won t get into the auxclasspath either,inline
[HER 741] Make extractors interrogate for charset * ReplayCharSequence  GenericReplayCharSequence     use Charset instance rather than String name * Recorder     use Charset instance ratehr than String name     (getContentReplayCharSequence) avoid reusing cached ReplayCharSequence when encoding in use has changed since it was created     (getContentReplayPrefixString) allow requested specific charset interpretation * ExtractorHTML  ExtractorXML     work with Charset instances     double check that in content declarations are self consistent before using     recycle matcher instances     change minor charset problems/decisions to a crawl.log annotation,inline
Added LRU collection  removed some lambdaj queries (I probably am not good at using it),inline
[MCHECKSTYLE 123] refactoring to prevent duplicate codes.  git svn id: https://svn.apache.org/repos/asf/maven/plugins/trunk@882311 13f79535 47bb 0310 9956 ffa450edef68,inline
HV 1105 Avoiding non final field and synchronized map in ValidatorFactoryImpl;  * XmlMetaDataProvider doesn t need to be nulled out; refactoring its structure to make more apparent what state it holds * replaced synchronized map by CHM; making sure only one BeanMetaDataManager is built per parameter name provider,inline
Updated to latest feed api  removal of event types,inline
"Removinig spurious integer/boolean/return type inherited from thw webservices  but that return always """"1"""". Replacing them by void ",inline
don t write items if they ve not changed,inline
[AESH 65] moved masking into Prompt,inline
Changes to the PdxDiskStoreAwareBeanFactoryPostProcessor class based on code review by David Turnaski in PR  31 for JIRA issue SGF 197.,inline
ARQGRA 243: moved RequestGuard interface to API,inline
Reduced dependency on classic (blocking) I/O APIs in CacheExec,inline
Improvement to candidate session launch workflow  I have moved the candidate session entry to a separate step after the session is first instantiated. This allows an additional page to be presented to the candidate which uses some JS to invoke the entry/re entry into the session. Candidates using the back button will end up back at this page  which automatically pushes them back into the session again.  Needs a bit of tidying  which will be in the next few commits,inline
"Previously migrations would migrate a sequence of models to their latest versions in order.  However  if you are crossing a series of versions  it s possible your migrations actually have intra model version dependencies.  For instance  if App.eomodeld depends on Authentication.eomodeld  you can t just blindly migrate Authentication to the latest version followed by migrating App to the latest version.  It s possible you may have to: Auth >3  App >1  Auth >4  App >2.  This change introduces the ability for a migration to return a version dependency for another model.  Previously  dependent models were not automatically migrated  either.  This can potentially cause strange problems.  Not dependencies are traversed so that by the end of the migration process for Model """"A""""  """"A"""" and all of its reachable dependent models will be upgraded to their latest versions.  If you are migrating to a SPECIFIC version  then dependent models can not automatically be upgraded to any version other than what your migrations specify in their dependencies.   ",inline
Simplify code  git svn id: https://svn.apache.org/repos/asf/maven/plugins/trunk@1812731 13f79535 47bb 0310 9956 ffa450edef68,inline
added @Bindable and @BoundSetter; cleanup,inline
[MINSTALL 110] install file should also install bundled pom.xml from artifact Adjusted src/it/MINSTALL 52/verify.groovy according to changes Removed META INF/maven from src/test/resources/unit/install file test generatePom/target/maven install test 1.0 SNAPSHOT.jar to force generation of a pom pom will be written to target directory  ignore these poms in target directories for unittests (which are under src/test/resources).   git svn id: https://svn.apache.org/repos/asf/maven/plugins/trunk@1649085 13f79535 47bb 0310 9956 ffa450edef68,inline
ArchiveBucketSize fetches bucket size metadata from the archive  then reads it.  92  This will later be generalized so that glacier archiveId can use the same code. By removing the dependency on BucketSizeIO and only needing to specify filename  all of this code can be reused for any immutable metadata that should be persisted and cached.,inline
Refactored RosterView to pull out RosterView inner classes (viewcontentprovider and support classes),inline
Refactoring   Structure comparison implemented through options   Options class created,inline
Unified the layouts of all dialogs; improved the settings of some on the visual side at bit; fixed a small bug regarding the measurement tool (channels starting at 1 iso 0); various cleanups.,inline
Inline private method,inline
simplify the multi threaded benchmark by not reusing threads  hoping to be rid of that occasional liveness failure.,inline
ScoreTest: bad PMID for the main article.  When spidering through for pubmed it moves AUTHOR   > AUTHORSHIP   > PUBLICATION   > Then out to the rest of the nodes.  This broke down in the test because the URI with PMID for the authorship was not the same as the publication.  Match: kept most of the PHI  however moved from adding to the model every time to building a list of all of the statements  then adding the statements before moving to the next matchset.  Will clean up for memory usage this weekend.  Need full test on QA later this weekend.,inline
Commit first version of async removal of the index cache,inline
o Simplified reporter construction  git svn id: https://svn.apache.org/repos/asf/maven/surefire/trunk@1098758 13f79535 47bb 0310 9956 ffa450edef68,inline
refactoring of Targets and utility classes (renaming  removal of alternative methods  standardizing on generic lists),inline
improvements:    remove spikes   simplify code in WrongAngleFixer   git svn id: http://svn.mkgmap.org.uk/mkgmap/branches/high prec coord@2964 25d90789 57f7 4ee0 8453 03a3dfeeeb22,inline
DATAGEODE 10   Adapt to API changes in the org.apache.geode.cache.lucene.LuceneQueryFactory interface.  (cherry picked from commit 78d1717381e167827fec4b9e9c1e3c938858617a) Signed off by: John Blum <jblum@pivotal.io>,inline
[MCHANGES 79] Allow for overriding the announcement email from address Submitted by: Alexander Schwartz Reviewed by: Dennis Lundberg  o In addition to the patch I added an expression to the new parameter so it can be used from the command line. I also made the from parameter readonly  so that nobody tries to override it.  git svn id: https://svn.apache.org/repos/asf/maven/plugins/trunk@562128 13f79535 47bb 0310 9956 ffa450edef68,inline
Cleaned up StackImpl and LocalsImpl by moving logic into TypeUtils,inline
Enable TSDB to store datapoints with salting by modifying the addPointInternal() method along with some tests.  Signed off by: Chris Larsen <clarsen@yahoo inc.com>,inline
432436 mostly working add/edit/remove maven runtime wizard WIP  ... also got rid of global settings nonesense  it was only used to calculate local repository location afaict  which does not make much sense  and significanly complicated maven installations preference page.  Change Id: I5d0edcbb2cd905ddbf6c174645591ceeccc87aa8 Signed off by: Igor Fedorenko <igor@ifedorenko.com>,inline
Merged with remote changes,inline
Yet more RSA refactoring.,inline
Lots of changes...   Beginnings of a persistence framework for the SVDB   Adding better preference pages for configuring project paths   ...,inline
Preparing 3.4 release.... reverted changes will return after release,inline
cleaned up optimizer code,inline
RSA additions and simplifications,inline
Rework into an autoclosable     Allow callers to simply use a try with resources around the measured code,inline
"* added Importer and Exporter interfaces and classes.    Importer: base importer class    FileImporter: base interface for resource import from file    SequenceImporter: base interface for sequence import    SequenceFileImporter: base interface for sequence import from file    SequenceExporter: base interface for sequence export (not yet fully supported)    SequenceFileExporter: base interface for sequence export to file (not yet fully supported)    PluginImporter: plugin abstract class for the import interface    PluginFileImporter: plugin abstract class for the file import interface    PluginSequenceImporter: plugin abstract class for the sequence import interface    PluginSequenceFileImporter: plugin abstract class for the sequence import interface    PluginSequenceFileExporter: plugin abstract class for the sequence export (not yet supported) interface * added ImageProvider interface and AbstractImageProvider class.   Describes a flexible image access which is used as base for the SequenceImport interface. * added LociImporter and LociImporterPlugin classes.   BioFormat library implementation for the new Importer interface. * Loader: major rewrite to use the new Importer interface. * Change the SerieSelectionDialog to use the new Importer interface. * Saver: minor changes  not yet adapted to the new Exporter interface.  * ImageSaverDialog: only accept to select FILE as destination so file name is not lost when changing directory. * ROI:    added a basic implementation of .contains(ROI) and .intersects(ROI)    severals bug fixes with boolean operations. * ROIUtil: added getMassCenter() method. * IcyBufferedImageUtil and SequenceUtil: added rotate(..) method. * Sequence: fixed metadata load/save for multi serie images. to define serie attached to this sequence (used for persistent data file).     * TaskFrameManager: complete rewrote as the old code was lazely done. Hopefully this fixed some issues. * ActionDialog: added isCanceled() method to know if the operation has been canceled.   * added EditRepositoryDialog to replace the old one which contained bugs. * FileAction: fixed new image create and added """"save metadata"""" action. * ROIAction:    ROI subtraction now produces the 2 possible results.    XLS export now always export all ROIs.    some minors issues fixed. * ROIPanel: fixed some issues in refreshing data or actions. * Rectangle3D/4D/5D: severals fixes with infinite dimension. * FileUtil: added toFiles(..) and toPaths(..) File <  > String conversion methods. * several improvements in the Exception/Error catcher and report. plugin causing the exception). * Anchor2D: added Anchor2DPositionListener to replace the old deprecated Anchor2DListener * added support for local plugin repositories. * others fixes  cleanup and refactoring.  ",inline
Initial redesign of the classic request execution chain  git svn id: https://svn.apache.org/repos/asf/httpcomponents/httpclient/trunk@1793308 13f79535 47bb 0310 9956 ffa450edef68,inline
changes in event api  better comments and more consistent api  also more focus on interface,inline
Simplification of JMX support (ResourceDMBean)   Fluent methods are now also supported   JIRA: https://issues.jboss.org/browse/JGRP 1562,inline
refactoring  no functional change: simplify code to add background polygon (type 0x4B)    git svn id: http://svn.mkgmap.org.uk/mkgmap/trunk@3867 25d90789 57f7 4ee0 8453 03a3dfeeeb22,inline
waitOnReplication: don t use record table  but instead  ROOT  table. This makes that custom SEP listeners don t get confused by the trigger row we write. The actual table name didn t actually matter (it was made an argument for cases where the  record  table would not exist  but the  ROOT  table always exists)  so removed any specific uses of that.,inline
Refactored CriterionView to be better structured & use ProfilesView,inline
"Enhancements to how queries with bind values are stored internally and sent to the server.  Previously we allocated a new String object for the entire final query we were sending to the database.  If you had a big query  or especially if you had large bind values you ended up with essentially two copies in memory. This change will reuse the existing objects and therefore should take 1/2 the memory it does today for a given query.  This restructuring will also allow in the future the ability to stream bytea data to the server instead of the current approach of pulling it all into memory. I also fixed a test that was failing on a 7.2 database. Also renamed some internal variables and some minor cleanup.   Modified Files:  	jdbc/org/postgresql/core/QueryExecutor.java  	jdbc/org/postgresql/jdbc1/AbstractJdbc1Connection.java  	jdbc/org/postgresql/jdbc1/AbstractJdbc1Statement.java  	jdbc/org/postgresql/jdbc2/AbstractJdbc2ResultSet.java  	jdbc/org/postgresql/jdbc2/AbstractJdbc2Statement.java  	jdbc/org/postgresql/test/jdbc2/DatabaseMetaDataTest.java ",inline
cleaning leftovers,inline
Improve item display code + cleanup,inline
"[SUREFIRE] refactoring and suppressed printing """" null"""" if Exception.getMessage() returns NULL ",inline
Cleaned up code in example clients,inline
Remove automatic updating. Instead  a notice will be printed in the console.,inline
Made ViewId mandatory in View   Removed implementation of Cloneable.clone() (replaced with copy()),inline
Modify dynamic table generation so that it uses a template file for style and layout.,inline
simplify the serilizer interface,inline
simplified permissions code for reward sources and settings,inline
many removed unused private vars and gui big fixes,inline
classloader refactor,inline
refactor BasicCStoreSCP,inline
Continued refactoring (not functional  but compiles),inline
Fixed message ID in topics Added method inheritance test Refactored out NevadoQueueConnection and NevadoTopicConnection,inline
Finished up change over to BlockingDeque from wait/notify for the queueNames.,inline
Remove old style constants from record classes,inline
[BISERVER 5682] lots of code shuffling around to reduce interdependencies between controllers and the main class EmbeddedWizard. Additionally all messaging dialogs have been centralized in one MessageHandler controller.,inline
rewrite NuGetToolUsageStatisticsProvider  start using ToolUsageCalculator in it,inline
Moved ResultOption handling to OperationMetric,inline
Cleaned up CWBR code.,inline
Inlined deprecated ViewFetcher.getCurrent*() methods in favour of ViewFetcher.getCurrentViews(Class).,inline
Updated elastic mapping to include date field and make value a double field to work nice with kibana. Removed the alias and key constructor logic to provide all result and server fields as separate fields in the elastic mapping. This makes it easier to filter and search for values.,inline
"Revert """"Merge branch  master  of https://dorotaradomanska@github.com/qcadoo/mes.git""""  This reverts commit ebb2fc3a3da5d49acfab7f73f551d23a212ecf2f  reversing changes made to b872c00d667cc4e7f725234b745dc6fa9c589296. ",inline
397251 356645 introduced MavenExecutionContext  ThreadLocal is used to associate maven execution context with the current thread. The context encapsulates maven session configuration  i.e. force update  offline  etc flags  as well as repository session cache and data. This ensures consistent use of this configuration and data structures by all maven calls performed by the thread.  Specicially   * solves multiple cases where forceUpdate was not honoured during project configuration update (bug 397251) * solves extremely slow performance when multiple projects reference the same missing dependency and forceUpdates true (bug 356645)  See IMavenExecutionContext javadoc for new API details  Signed off by: Igor Fedorenko <igor@ifedorenko.com>,inline
SRAMP 431 simplified test cleanup  //$NON NLS x$,inline
Extract DefaultJavaRunner. Change JavaRunner signarure to include javaHome and workingDir.  git svn id: https://scm.ops4j.org/repos/ops4j/projects/pax/runner@13577 9b982a3c 3ae5 0310 a4bc d9a3335569bd,inline
Refactored FileFlagsProvider API,inline
This is a new implementation of http input java.util.logging handler that intercepts logging information and forwards it to a Splunk server through http input.  There are two major changes: 1. Massive refactoring that extracts sending events logic into a separate helper class. This should make integration with log4j trivial.  2. Events batching Events batching parameters: Delay in millisecond between sending events  by default this value is 0  i.e.  and events are sending immediately com.splunk.logging.HttpInputHandler.delay Max number of events in a batch. By default   0  i.e.  no batching com.splunk.logging.HttpInputHandler.batchCount Max size of events in a batch. By default   0  i.e.  no batching com.splunk.logging.HttpInputHandler.batchSize  An example of logging properties file: handlers   com.splunk.logging.HttpInputHandler com.splunk.logging.HttpInputHandler.token 81029a58 63db 4bef 9c6f f6b7e500f098 Splunk server com.splunk.logging.HttpInputHandler.scheme https com.splunk.logging.HttpInputHandler.host localhost com.splunk.logging.HttpInputHandler.port 8089 Metadata com.splunk.logging.HttpInputHandler.index default com.splunk.logging.HttpInputHandler.source localhost com.splunk.logging.HttpInputHandler.sourcetype syslog Batching com.splunk.logging.HttpInputHandler.delay   500 com.splunk.logging.HttpInputHandler.batchCount   1000 com.splunk.logging.HttpInputHandler.batchSize   65536,inline
Code cleanups and comments added.  git svn id: https://svn.itm.uni luebeck.de/fallstudie2010/sources@463 0a1f239c e987 4cba 9274 3ef986406e12,inline
Major indexing changes and updates   implementation of a different POJO indexing strategy. See JavaDoc and code comments for more details.   added autocomplete indexer that indexes searched phrases and takes their search frequencies into account   the most searched ones are then displayed first.   both POJO and LinkedIn full indexing is set to run periodically (configured by the Spring Task Scheduler).,inline
New way to describe the location of a Dockable on a SplitDockStation. Bugfixes in the change of modes by the FStateManager.  git svn id: http://svn.javaforge.com/svn/DockingFrames/trunk@214 3428d308 0d2e 0410 b3d4 94d0fefcacdf,inline
Tweaked build of autogen ed scripts. Light refactoring.,inline
[MANT 47] ant:clean should not delete build.xml  o Updated solution after dicussion on IRC o Added ITs  git svn id: https://svn.apache.org/repos/asf/maven/plugins/trunk@764446 13f79535 47bb 0310 9956 ffa450edef68,inline
rhogen wizard/src/rhogenwizard/rhohub/TokenChecker.java: token dialog was changed to login dialog.,inline
minor fiddles: remove warnings  improve error messages  etc.,inline
merged pull request with a few changes,inline
Shruthi |  152 | Moved tbRegistrationNumber from Treatment to ProviedTreatment,inline
Source map clean ups + removed findbug dependency.,inline
Change JSON format for importer and Rest interface for list (multivalue) and path (hierarchy) value types.  Defining the value type of a field type no longer has the booleans multivalue and hierarchical. Instead the type field also allows LIST and PATH which should be appended with another valuetype between brackets <>. For example LIST<STRING>    git svn id: svn+ssh://dev.outerthought.org/outerthought/lilyproject/branches/complextypes@5066 b80d95f8 e103 0410 bd55 e03a9dc29394,inline
new Visitor interfaces  some API changes and docs  keeping classGen synchronized with method/fields structure now,inline
Refactored BeanDiffer to allow for better testing,inline
Added button to reset the process logo to default. Cleaned the code a little.,inline
rework protocol assignments...,inline
"Finished the specified JIRA tickets with the following limitations: * JOO 5: """"this."""" is now guessed by exclusion: every identifier that is not declared in any scope is assumed to be an inherited member. Since this situation might also be a missing declaration  a warning is issued  which you can get rid of by writing """"this."""" explicitly. Be sure to import *everything*! """"window"""" is no longer in scope  write """"window."""" explicitly (""""window"""" is predefined and does not need to be declared). * JOO 30: Type casts are now left out is a function is assumed to be a type. Since you can also import package namespaced functions (not supported by Jangaroo  but could be """"native"""" JavaScript)  there is a heuristic that uppercase imports declare types. * JOO 40: Automatic binding only works for methods declared in the same file. For other situations  I plan to add a [Bound] annotation.  [git p4: depot paths   """"//coremedia/jangaroo/"""": change   145172] ",inline
improve performance:    correct and simplify formerly unused code in ElementQuadTree   split boundary ways so that each part has max 20 nodes   fill ElementQuadTree with these boundary fragments  The code still needs a lot of intersection tests but is typically much faster than before.    git svn id: http://svn.mkgmap.org.uk/mkgmap/branches/country border@4206 25d90789 57f7 4ee0 8453 03a3dfeeeb22,inline
Fixing replaceEnvironment + minor refactoring,inline
remove unused variant of ResolveContext.resolve static method  It was broken (ignored its restrictToChild parameter) but since it was also unused  just nuked it.,inline
Implemented /spawn  /tp  /tphere  and /back for Warp module  Fixed minor glitch in the Chat module  Fixed problem where TNT would ignite when placed next to redstone  despite any config settings  Changed version to 1.0.0,inline
Introduce call  call adapters  and the response type.  * `Call` is the mechanism for request execution. It encapsulates a single request action either synchronously or asynchronously  and can support canceling. * `CallAdapter` is a means of supporting a method return type other than `Call` (like RxJava s `Observable`) by adapting the `Call` instance into another instance. This change moves RxJava support into a sibling module which uses an adapter for supporting `Observable` types. * `Response` represents the HTTP response along side the deserialized body. It allows access to both the converted body and lower level items such as the header  response code  and underlying OkHttp request and response objects.,inline
Cleaned up alpha code and prepared for final commit,inline
improved coherence support and refactored CacheWrapper,inline
Removed items deprecated in 1.1.x series.   git svn id: https://svn.apache.org/repos/asf/jakarta/commons/proper/validator/trunk@140191 13f79535 47bb 0310 9956 ffa450edef68,inline
Rest refactoring as per bug https://bugs.eclipse.org/bugs/show_bug.cgi?id 294774,inline
Big Heap Change.  git svn id: svn+ssh://svn.internal.sanger.ac.uk/repos/svn/pathsoft/psu/trunk/genlib/java/crawl@15864 ee4ac58c ac51 4696 9907 e4b3aa274f04,inline
env  pom.xml: updated CSVtoRDF: moved to demo Global: ArgList and String[] constructors are private  ArgList constructor is protected (use ArgParser s parse(String[]) instead)  public library constructors created where missing  bad input checks added where missing Diff: collapsed two library constructors into one DemoPSMerge: use new Diff constructor JDBCFetch: constructor/init method cleanup NIHFetch  PubmedFetch  PubmedHTTPFetch  NLMJournalFetch: moved into separate fetch.nih package (to allow sane use of protected access modifier) NIHFetch: constructor cleanup Qualify: constructor cleanup and use StringUtils.isBlank() rather than messy null and empty checks GlozeTranslator: constructor cleanup  use xmlSchema (lolz... how long has this been broken?) SPARQLTranslator: Deprecated due to being completely non functional  but some work done to get this working CSVtoJDBC: removed init() method in favor of calling a real constructor FileAide: add getTextContent() methods (and a commented out getContent() byte array method) ArgParser: use addArgument() method rather than directly adding to options list in constructor (for uniform method of adding args) JenaConnect: truncate() now uses critical section locks RecordHandler: began adding infrastructure for RecordHandler tool JenaIngestWorkflowProcessor  WorkflowOntology: starting harvester integration work PubmedHTTPFetchTest  TranslateTest: used proper constructors (testing of arg parsing should be performed in the arg parsing tests),inline
"Refactoring util source directory:  * Move SDKTestCase from util to tests directory. * Remove unused class InvalidUrlSchemeException. * Inline class NoSeparatorFindableInPathException. * Rephrase references to """"app collection"""" to use the phrase """"test data"""". ",inline
Reversing change to the date routines in this file as I suspect they may be causing the recently observed breakage.  I remember from the beginning that things dont work if the year field has certain values.  git svn id: http://svn.mkgmap.org.uk/mkgmap/trunk@721 25d90789 57f7 4ee0 8453 03a3dfeeeb22,inline
Removed all references to BezierPath.  Included a new Jython version because 2.5b3 could not  access Path getters.,inline
Remove Factions 1.8 update logic.,inline
Some RoomFrame UI updates  * Objects tab:    * Added a ResourceMenu for adding instances    * Applied a preview for chosen object s sprite      * Consider adding a tooltip or something to enlarge the image    * Removed the tabbedPane  since all that was needed was a ResourceMenu  * Tiles tab:    * Defaults to Edit tab  since that s the only tab with components    * When components are added  remember to switch default back back over  git svn id: https://lateralgm.svn.sourceforge.net/svnroot/lateralgm@279 8f422083 7f27 0410 bc82 93e204be8cd2,inline
simplified trafficsignal initalization,inline
JENKINS 24207   Add new selectors for Perforce and P4 plugins that allow to update JIRA issues based on jobs associated with changes. Other changes: 1. Refactor selectors. Break down methods in DefaultIssuesSelector so that it is easier to reuse. Side effect is that DefaultIssueSelector now will be fully recursive (once the other problems are fixed). 2. Fix resources (DefaultUpdaterIssueSelector/config.jelly >selectors/DefaultIssueSelector/config.jelly).,inline
Changed Browser Compatibility and Best Match cookie policies to emulate the behaviour of FireFox more closely when parsing Netscape style cookies. Comma will no longer be treated as a header element separator if Set Cookie does not contain a Version attribute mandated by the RFC2109 / RFC 2965 cookie specifications   git svn id: https://svn.apache.org/repos/asf/httpcomponents/httpclient/trunk@1057148 13f79535 47bb 0310 9956 ffa450edef68,inline
Remove unnecessary code,inline
Major refactoring for PropertyDescriptors.  Changes include:  1) Genericization of PropertyDesciptors  which facilitates the DRY principle 2) Split multi valued PropertyDesciptors into separate classes  to take full advantage of Generics 3) Remove simple String property accessors from the Rule interface  only PropertyDescriptor are supported now 4) Properties are defined via Rule.definePropertyDescriptor(PropertyDescriptor) interface  normally called in a Constructors 5) RuleSet XML enhanced to support PropertyDescriptor defining 6) RuleSetFactory and RuleSetWriter account for the more robust property definitions 7) All RuleSet XMLs corrected to move definitions to Java classes where needed  and to including necessary Type information where missing   git svn id: https://pmd.svn.sourceforge.net/svnroot/pmd/trunk@6431 51baf565 9d33 0410 a72c fc3788e3496d,inline
Removed predicate deserialization.,inline
Refactor tests.  Centralize the annotation/dsl equivalency tests to the main DAO module. Move tests in the functional test module into sub packages.  Split into separate files related tests. Create Mongo and Hibernate subclasses of appropriate test classes.  Extended Hibernate coverage.,inline
Move attribute bigEndian from Attributes to Group,inline
Some minor clean ups for  137,inline
Changes to webinar example code,inline
"Purge references to block ids from most of the code  Block ids are going away in Minecraft. Each block should be referenced by its name.  Why?       Block ids will of course still be used internally in the save files and network packets  but to the outside world they re gone. In the future  Minecraft will use dynamic ids everywhere. Grass doens t have to be id 2  it could as well be id 23. At the moment all vanilla blocks still have a static id.  Mods  on the other hand  already use dynamic ids  Forge takes care of that. When registering a block in Forge  it is unknown to the modder which id the block will get.  Up until this commit  Terrain Control still used block ids everywhere in the code. This maked it a hassle for users of Terrain Control to find out what the id was of a modded block. From now on  modded blocks can just be referenced by their name.  Breakdown            Most instances of """"int id  int data"""" have been replaced by """"LocalMaterialData material"""". LocalMaterialData holds both the block and its data. LocalMaterialData is immutable  so it can be easily shared to other classes. LocalMaterialData has two methods to create a new instance with different block data: withBlockData(data) to change the block data to something else  and rotate() to automatically rotate the block data. rotate() uses the BlockHelper class to achieve this. As the """"Local"""" in the name suggests  LocalMaterialData is implemented by the Bukkit and Forge versions of Terrain Control. You can use TerrainControl.readMaterial(String) or TerrainControl.toLocalMaterialData(DefaultMaterial int blockData).  A new class called MaterialSet has been added. This class replaces the various block list implementations we have seen so far in Terrain Control. All block lists now have consistent behaviour. You can now for example use """"Solid"""" or """"All"""" in the SourceBlocks in the resources of the BiomeConfigs and in the BlockChecks in BO3s. Previously this was only possible in spawnOnBlockType in BO2s. MaterialSet will get a few improvements soon to let it work better with block data.  Some places in the code still use the byte[] id arrays. I m not sure at the moment what should happen with them. However  the ids in those arrays are dynamic now.  Old configs              Ids in old configs will still be read. DefaultMaterial.getMaterial(int id) continues to provide a block id lookup for the vanilla blocks. Even when all ids become dynamic in Minecraft  DefaultMaterial will still use the old static ids to make sure that old worlds still load properly.  References             * https://twitter.com/Dinnerbone/status/433602565587345408 * http://www.minecraftforge.net/forum/index.php/topic 16195.0.html  Final note         Could anybody help testing this? This commit is huge  and I would be surprised if it didn t break at least four things. ",inline
Remove redundant Worker.setOrderedPriorityQueues(List<String>) and other minor documentation and cleanup,inline
Moved the BucketFormat logic into the BucketFormat enum.  A Bucket now guarantees that it s format never changes. It could change before when a move was performed on the bucket.,inline
RFC 7231: redesign of HTTP authenticator and related classes  git svn id: https://svn.apache.org/repos/asf/httpcomponents/httpclient/trunk@1689155 13f79535 47bb 0310 9956 ffa450edef68,inline
OPEN   issue FLEXMOJOS 140: Move test runner into a separated component  https://issues.sonatype.org/browse/FLEXMOJOS 140,inline
text editing rewritten,inline
Merged decorator refactoring branch  git svn id: https://svn.apache.org/repos/asf/httpcomponents/httpclient/trunk@1370953 13f79535 47bb 0310 9956 ffa450edef68,inline
typed GremlinPipeline and accorded  changes from Pipes.,inline
Some code clean ups.,inline
Minor refactoring to XML reading APIs  * Deleted the ModelRichness idea as it was never fully implemented * Split resolution code in AssessmentObjectManager into a separate class,inline
moving the module configuration to the modules themselves.   git svn id: https://svn.codehaus.org/enunciate/trunk/enunciate@53 c2b6a248 b21b 0410 9d80 82131e002806,inline
https://issues.jboss.org/browse/RF 9809 Removed legacy cofigs from core/ui Updated showcase for new subtable/toggler tag names Fixed small mistake in showcase code,inline
"NON WORKING beta 1.2 release  DEVELOPERS ONLY. i made this commit of the work i have so far however there are a few errors here and there which need to be fixed however i have limited time to fix this so i m asking the community to do it ;).  so far: problems in fe.java around line 855 not all NON obfuscated have been checked if they needed some renames. workbench.java has been """"disabled"""" due to the fact it needs a rework. ",inline
Checking in all the graphical updates changes from the SVN branch.  There will be more changes later  but for now  this is the bulk of the updates.  The only conflict was a missing API in DVRIMain  which needed to call some function that the current trunk is missing.,inline
"Fixed a bug in user/read and user/search regarding the placement of the metadata.  This lead to several other transparent but notable changes. The main one is that there has been a reworking of the respond() abstraction in UserRequest and Request. Request now contains only one respond() that adds to an already complete JSONObject the """"result"""" """"success"""" key value pair. UserRequest now contains multiple respond() abstractions that all end up calling a single respond() function that refreshes the user s authentication token cookie and then calls the parent s respond(). Also  a new respond() abstraction has been added that allows a user to pass a JSONObject representing the metadata along with the JSONObject that represents the actual data. ",inline
refactored evaluate* methods into Rule classes.  This change gets rid of the need for RuleType and DirectiveType. I also got rid of Directive getName() (except on ExpressionDirective).,inline
Refactor FileObject and fix tests,inline
Some more simplifications to http client API,inline
support hbase/hive/impala  refactor service dependency issues,inline
PostComponent rewritten as a widget,inline
Clean up the model classes.,inline
Started changing IndexerConf  Indexer  IndexerTest to match the new design. Does not work  does not run (but does compile)  just wanted to try the switch to the new SVN repo location.   git svn id: svn+ssh://dev.outerthought.org/outerthought/lilyproject/projects/lily/trunk@4001 b80d95f8 e103 0410 bd55 e03a9dc29394,inline
remove formatted exceptions  allow for custom list delimiters,inline
"Removing/disabling old rowlog code.  The rowlog related packages have been removed completely: global/rowlog/*  tools/rowlog visualizer  and the kauri rowlog module. All references in pom s to the rowlog have been removed.  If you grep the code  there s still quite some rowlog traces left:  * Tests which relied on indexing happening  or that test the linkindex  have been commented out compeletly. They would not run anyway  and there s little advantage to making them compile: with the references to the rowlog left in place  it will be easier to migrate them to the new solution. Same holds for the RowLogMessageListener s (the IndexUpdater  the LinkIndexUpdater)  * Things that need adjustment when the new rowlog solution is in place are marked with """"FIXME ROWLOG REFACTORING"""" ",inline
Introduce common workflow models and executors.  This also replaces implementation of test driver task executors.,inline
Inlined the WeakReference to ease following the test.,inline
Enhanced dependency resolving  I understand why dark was so upset about the code now.,inline
changed sink and source drawing  generalized line drawing,inline
Apply patches from NUTCH 169 (remove static NutchConf).  Submitted by: Marko Bauhardt  Stefan Groschupf  Jerome Charron.    git svn id: https://svn.apache.org/repos/asf/lucene/nutch/trunk@373853 13f79535 47bb 0310 9956 ffa450edef68,inline
use ScheduledExecutorService for reconnecting further simplification,inline
Minor refactoring of AndroidForwarderRPC,inline
refactored SocketServer so that it extends ReceiverBase,inline
Remove boolean parameter to hllp mergeTempList()  Simplify the code. It is best to always resize the temp set if it is too small.,inline
SC QCADOOMES 933 Refactored material flow.,inline
Move to a visitor centric compilation.,inline
HV 638 Implementing group conversion; Unifying handling of cascaded validation for bean  parameter and return value validation. Also removing type names from executable names to be in line with the spec;,inline
idea load only those libs which placed under lib/ directly + jdk moved to the start of class path + update versions 1.10 and 1.14,inline
Remove thread locals when storing statements,inline
continued refactoring,inline
YV to nitro main changes ( 245)  * YV to nitro main changes,inline
Renamed NioServer  > NioServerTest and NioClient  > NioClientTest   Added initial interfaces for Server and Receiver   Changed release version to 3.6.5   Removed ConnectionMap: unneeded interface   Parameterized AbstractConnectionMap   Simplified TCPConnectionMap constructors  added setters   Renamed AbstractConnectionMap  > ConnectionMap   Changed Byteman scripts as well   Removed ConnectionMap.lock (using synchronized instead): less code   Moved getConnection() into super class   Renamed ConnectionMap  > BaseServer   Moved all attributes from TCPConnectionMap  > BaseServer   Renamed TCPConnectionMap  > TcpServer   Moved TcpConnection into its own class   Added Util.createServerSocketChannel()   Created TCP_NIO2 (https://issues.jboss.org/browse/JGRP 886)   Changed setters and getters   Created NioServer and NioConnection   Renamed NioServerTest  > NioServerPerfTest   Added NioServer.register(): wakes up selector to allow register() to proceed   Send() and receive() now work   Added Buffers and BuffersTest   Added MockSocketChannel   Use of Buffers in NioConnection   Connection reaping now also works in NioConnection   Only a single TCP connection is used between 2 members   NioConnection.receive() now delivers a message outside the lock scope   Added documentation on TCP_NIO2 to manual   Moved remaining tests from TcpServerTest  > ServerUnitTest   EOF is now handled in NioConnection.receive()   Added WriteBuffers and unit test   Added TCP_NIO2.max_send_buffers   NioConnection now uses WriteBuffers   Added reading of messages in batches (TCP_NIO2.max_read_batch_size),inline
added ViewHandler  removed ViewBroadcaster,inline
Cleaned up the AcceptedOntologies code. Ontology search and getting all ontologies now works correctly.,inline
Removed BPMN diagram type from tool profiles to simplify.,inline
Rework,inline
cleaned up the websocket interface,inline
chore: further improve GC performance in CoreShader.  Replace all uses of prefix/argument concatenation in CoreShader with CoreLogger and/or CoreGL.checkGLError calls.  CoreLogger optimizations:   Add setLoggingPrefix/getLoggingPrefix methods for automating a preset line prefix for a logger instance.   Reduce varargs pollution by making use of varargs methods conditional. The varargs log methods (as well as checkGLError messages) are now overloaded with non varargs methods  so runtime intensive code (like the setUniform methods in CoreShader) that doesn t need to use the argument processing can log messages directly instead. This *significantly* reduces varargs pollution by eliminating needless creation of empty Object[] objects by the JVM when making simple checkGLError or other log calls to CoreGL/CoreLogger.  Update CoreGL + implementations to support overloaded checkGLError methods with no varargs.  See  17 for related discussion on this issue.,inline
Major rewrite of the command line tools with simplified logic  less duplicate code  and some minor new features:    allow running of D2R Server just with a JDBC connection   allow running of all tools just with  l dump.sql   dropped  m/ j switches on dump_rdf  just provide naked file/URL   add   verbose and   debug switches   consistent error reporting   introduce SystemLoader class as central factory/facade   improved consistency of base URI handling   changed initialization logic for D2R Server,inline
Massive change to the eclipse handlers: They now set the  generatedBy  flag which we can use to patch eclipse in specific places to ignore generated nodes.,inline
Huge changes to Multiworld implementation!  This commit contains broken code! World management must be refactored to suit the new API!,inline
[MDEP 494] Remove/replace Maven2 specific code clean up unused parameters  getters+setters  git svn id: https://svn.apache.org/repos/asf/maven/plugins/trunk@1690174 13f79535 47bb 0310 9956 ffa450edef68,inline
Major refactoring.  The jdbc package was in pretty bad shape and was extremely hard to modify.  Some of the changes made to fix this were:   o Refactored the JdbcMigrationContext so that the source of connections is    abstracted.  A BasicDataSource that wraps a connection has been added to    support environments without access to a data source.  o All database specific configuration options are now set on the    JdbcMigrationContext.  The patch path is set on the migration launcher.  o Fixed the way that database connections were being closed.  The old way    caused pooled datasources to hang.  o Less connection passing: every class can obtain its connection from the context  o Put the concept formerly known as dialect into it s own class: DatabaseType  o Added support for Oracle.  This turned out to be a pain since the Oracle JDBC    driver doesn t support multiple statements in a single Statement.execute call like    Postgres does.  o Renaming: many of the old names didn t make sense.  I tried to make the changes as backwards compatible as possible  but I haven t tested this with an existing application.  You have been warned.  This whole thing needs to be repackaged under net.sf.autopatch at some point.,inline
hacker s weekend on compiler plugin    renamed DeepStatementRewriter to DeepBlockRewriter and rewrote it to always process a whole block   heavy refactoring of AST transform related code to make it easier to understand and more extensible   added support for declaring a mock s interactions right when creating it (Mock(List) { ... })   implemented Specification.with { ... } to declare conditions and interactions in the context of an object,inline
Fixes  56   Back end of Outputters revised. The mechanism for output formatting is now independent of the output destination  e.g.  there is no longer any  formatting  logic in the Outputters  but it s all in the  Walkers . Rearrange code structures to take the  support  classes to a different package. This  cleans  up the regular org.jdom2.output package. The support package should only be of interest to people who override/subclass/customize the default functionality. I will put a wiki page together on the new details  and how overriders/customizers can benefit from the the structures.,inline
Ashish  Ashok |  71 | Removing dependency of location sync on reports contract requests and refactoring web requests.,inline
Remove the window argument from the method signature and move configuration to a separate class.,inline
* Loader dialog:    added Z and T range selection    added channel selection    added resolution level selection    improved preview loading * Saver dialog:    removed Z and T range selection (better to do adjust range before)    added SaverOptionPanel for easier setting definition    setting are now preserved in XML preferences.    display warning if output format can loss information (conversion is now automatically done) * Loader:    added checkOpening(..) method to check we have enough resource to open an image    added methods to load only sub part (Z  T and C) and sub resolution of the image.    fixed issues while using Importer on non image files.    many changes in general  new methods  refactoring... * Bio Format importer:    added multi thread support.    added tile loading for large image and sub resolution loading.    better thumbnail loading. * Saver:    added many new methods to check compatibility image writing compatiblity.    reverted channel combination for 3 channels image saving in TIF format (better for RGB image preview)    methods doing Z/T range saving operation are now deprecated (better to do it before)    added method getCompatibleSequenceForWriter(..) to automatically convert a Sequence so it can be save by a given writer (possible data loss) * ROI3D: added add(..)  exclusiveAdd(..)  intersects(..) and subtract(..) operations * ROIUtil: added split(ROI  Line2D) to cut/split a ROI from a given Line2D * GUI: reorganized  File & ROI tools  menu    added  open region  command to load a specific region of an image at a given resolution level.    added ROI 2D to 3D stack conversion    added ROI Shape to Mask conversion    added ROI Mask to Shape conversion    added ROI component separation tool    added ROI line cutter tool * Sequence:    added position X  Y  Z information (metadata)    added  origin  resolution  XY region  Z range  T range  channel information (when loading sub part of an image)    added getOutputBaseName() / getOutputExtension() and getOutputFilename() to obtain wanted output filename given  origin  informations    trying to load too large array of data throw a TooLargeArrayException exception * SequencePersistent: added isValidXMLPersitence(..) methods * SequenceUtil:    sequence merging operation is now possible with Sequence of different type.    fixed possible memory leak issues with some methods    better colormap / metadata preservation    added getOriginPoint(..) / convertPoint(..) for point position conversion operation    added getOriginRectangle(..) / convertRectangle(..) for rectangle position conversion operation * AbstractImageProvider / PluginSequenceFileImporter / PluginSequenceIdImporter :    improved default getThumbnail(..) implementation    added getImageByTile(..) method to load an image by tile (useful for large image) * IcyBufferedImage:    trying to load too large array of data throw a TooLargeArrayException exception    added copyData(array  ..) method to copy data from an array * IcyBufferedImageUtil: added fast downscaleBy2(..) methods to quickly downscale image by a factor of 2 * SystemUtil: reworked a bit memory methods  they should return more accurate values.    getJavaFreeMemory() return the total amount of free memory available to the JVM     getJavaMaxMemory() return the maximum amount of memory the JVM will attempt to use     getJavaAllocatedMemory() return the memory currently *allocated* by the JVM    getJavaUsedMemory() return an estimation of the memory currently *used* by the JVM    getJavaTotalMemory() is deprecated (replaced by getJavaAllocatedMemory()) * ROIDescriptor: added getDescriptor(descriptors  descriptorId) method * MetaDataUtil: replaced OMEXMLMetadataImpl class by OMEXMLMetadata (more generic  check if that bring issue) * ImageJUtil: added convertToIcyBufferedImage(..) method to convert a single image from an ImagePlus to an IcyBufferedImage * Polygon3D / Polygon2D / Polyline2D: fixed adding new point on an empty Polygon / Polyline * Improved memory usage estimation in memory monitor. * DefaultSequenceEdit: default undo operation on Sequence also preserve ROI and Overlays now (reference only) * added Rectangle2DUtil and Line2DUtil classes. * many bug fixes. * several tweaks and optimizations. * some code cleanup.,inline
359340 introduced  nature  converter attribute  When converting a project  only consider converters that apply to project s natures. All other converters are ignored  thus avoiding unnecessary bundle activation.  Signed off by: Igor Fedorenko <igor@ifedorenko.com>,inline
cache_templates: code doc  restructuring some code,inline
DIRMINA 463: Changed StateMachineFactory to make it simpler to specify the transition annotation to use. Removed IoHandlerStateMachineFactory and IoFilterStateMachineFactory.   git svn id: https://svn.apache.org/repos/asf/mina/trunk@592475 13f79535 47bb 0310 9956 ffa450edef68,inline
"Revert """"[BACKLOG 16058] Changes UtilHtmlSanitizer function params and moves name sanitization from ConnectionService to ConnectionServiceImpl"""" ",inline
Commiting the code of v1.3    New Features: Custom commands now use my parser Added entity data (e.g. one can now use angry wolves  powered creepers  different villagers  etc.) Added a /skript reload command to reload the main config and all scripts Added expressions  last spawned entity  and  line   of <block>   whereas the latter can currently only be read and cleared  but not set    Changes:  Trigger files  are now called  scripts   end in  .sk  and are located in the  scripts/  folder The main config also now ends in  .sk  Variables are now stored in a csv file Merged right and leftclick into one event such that one can now use  on click on ...   The entity/player/etc.  cannot be used in damage events anymore  one has to use  attacker  or  victim  respectively Several changes in the API  e.g. removed LoopExpr   all expressions can now be looped Block loops now loop from bottom to top and not from left to right (whatever  left  or  right  is)  Argument    can now also be accessed as  argument <type>  or  <type> argument   e.g.  arg player  or  player argument   Targeted block  is now stored during an event  resulting in faster execution and no unexpected results when changing any blocks in the player s LOS. The current targeted block can still be accessed with  future targeted block  or  targeted block will be/will not be/etc. .    Fixes: Fixed CheckedIterator and BlockSphereIterator (and AABB for that matter) Skript now throws an error if it is reloaded by some plugin manager that doesn t reload the plugin like CraftBukkit does Fixed inventory handling  e.g.  can hold  does not change the inventory anymore Improved the handling of items that have multiple IDs  e.g. cauldron block/item or redstone torch on/off The parser doesn t exit anymore if an expression s init() method printed an error  allowing for more complex patterns Fixed expressions   and  state   most expressions don t even have it and others inherit it from others Fixed furnace slots Fixed clickint on air not being checked for being cancelled by other plugins correctly Fixed clicking on an entity causing 2 click events   one for the entity and one for air Fixed ambiguity of variables that have expressions in their name Fixed not being able to heal or damage an entity by    hearts  Fixed the expression    of <item>  conflicting with ItemType s    of <alias>  And many other small fixes    Drafts: Added drafts for unit testing    Known Issues: The default location of many block events is at an entity and vice versa. I know the cause but not how to fix this tidily. The damage in damage events is still the raw damage  i.e. without any armour/critical/enchantment modifidicators applied.,inline
Change strategy of range annotation processing.  All structure will be pass to new file  but no content inside them. It protects xml structure  but nothing will be printed.,inline
"* Canvas:    mouse canvas position moved in base IcyCanvas class.    2D mouse image position moved in IcyCanvas2D class. * IcyTextField : removed the consumeCharKeyPressEvent property. * IcyFrame: added getInputMap(..) and getActionMap() methods. * ROI:    general performance improvement on draw and mouse events.    removed useless mouse position information. * fixed shift combination shortcuts accidently enabled on text fields. * better headless support. * fixed wrong """"null sequence"""" report. * limited maximum memory to 1024 MB for 32 bits JVM to reduce the """"cannot create native thread"""" error. * minors others fixes.",inline
change archiving plugins to use a shred archive configuration   git svn id: https://svn.apache.org/repos/asf/maven/components/trunk/maven plugins@163716 13f79535 47bb 0310 9956 ffa450edef68,inline
Moved variant properties from record to recordId    git svn id: svn+ssh://dev.outerthought.org/outerthought/lilyproject/projects/lily/trunk@3943 b80d95f8 e103 0410 bd55 e03a9dc29394,inline
Introduced B2ModulesFileFlagsProvider,inline
Remove the possibility for MeterMetric instances with arbitrary intervals.,inline
"fixed issue 108:	@TestName JUnit rule doesn t respect unrolled method names    added properties reportIterations and iterationNameProvider to FeatureInfo   all IterationInfo s now have a name and description   moved all @Unroll logic into an extension   changed MethodRule and TestRule integration to respect iteration name ",inline
Remove unused field,inline
HH 69833 drop unused methods  optimize code a bit  move PostCommitHooks usages in test to the example app [an.ivanov],inline
refactor namespace support for XPath so that it works like other parts of the XMLUnit API  i.e. make the API consistent,inline
* Reworked the UpdateEventHandler to dramatically increase performance for large number of pending updates. * Replaced EventHierarchicalChecker with CollapsibleEvent    > ChangeListener interface modified (see the impact),inline
Convert generation of JS to listener. Compiles. Tests green. Needs cleanup.,inline
change version to 1.2.0 beta.  Add CommandFactory to XMemcachedClientFactoryBean delete some derepcated methods of MemcachedClient.,inline
Moved getNthFunctionNodeIndex and getNthTerminalNodeIndex methods from KozaCrossover to the more general location on Node to fix  74.,inline
clean build with processing tests,inline
Middle of splitting cli stuff from library stuff: 1) copied entire tree into o.v.h.cli 2) cleaned out cli related stuff from main tree  next up is: 3) clean out library related stuff from cli tree 4) evaluate how to do cli/config stuff better,inline
Rewrite SqlStorage as a TupleStorageService.,inline
Aravind |  00 | Minor refactoring.,inline
Refactor   removed unnecessary parameter taskIds from PlotDataProvider interface,inline
[ISSUE  32] Rewritten ViewComputerDialog and fix some GUI issues,inline
Cleaned up Api User Dao,inline
Some code cleanup,inline
Fixes checks on empty or bad lines and actually removes keys on removeKey.  Thanks to Nijiko for the update.,inline
[ 85] Refactored CPU test suite,inline
Added fine grained rule based HTML processor. The HTMLPageParser is now just a collection of simple rules that can be easily changed.,inline
Changes made to analysis endpoint. Mainly /analyze parameter changes and associated supporting classes.,inline
Refactoring to separate OAuthService from Network service API Hub,inline
removing support for $add and $mod,inline
SCRIBBLE 151 Further refactoring to simplify api,inline
fairly significant rework of the content stream handling code. This should be a LOT more reliable now,inline
"Major internal changes to XMLOutputter  and some public and protected method signature changes.  The code is now much cleaner with regard to whitespace handling  and the """"text trim"""" printing behaves a whole lot better.  In fact  the following settings now pretty print on output even if the doc contains some content with whitespace from a file and some content built in memory with no whitespace!  setTrimText(true); setIndent(""""  """"); setNewlines(true);  It may not perfectly match everyone s idea of """"pretty"""" but in my mind it s """"pretty"""" good.  : )  BTW  the default settings (no trim  no indent  no newlines) still behave the exact same as before and print the document raw.  Among the structural changes: The printXXX() methods now only print XXX and don t concern themselves with whitespace around the XXX item. For example  printComment() prints only the comment from <!   to   > and doesn t try to print the new lines and indention before and after. The only place where whitespace handling occurs is printDocument() for document level whitespace and printElementContent() for the whitespace between an element s tags.  But in both these cases the whitespace is naturally within the item being printed.  The signature changes:  * Deprecated """"public setIndentLevel()"""" method.  Having a global indent is   better done with a stacked FilterOutputStream.  The method is now empty.   It ll be removed after beta7. * Deprected """"public setPadText()"""" method.  It s not needed with the   current output mechanism.  The method is now empty.  It ll be removed   after beta7. * Changed the """"protected printXXX()"""" methods to have a new signature   without the """"int indentLevel"""" final parameter.  Didn t bother with   deprecation here.  Thanks to Mark Roder <mroder@techies.com> for raising the issue that got this started.   jh  ",inline
Simplified tool API even more; the asynchronous ones have less boilerplate stuff to do their work.,inline
WIP: Refactor of candidate services  This now uses the new authentication filter  and I ve converted the existing session token idea so that it works like an XSRF token.  Needs testing and tidying next.,inline
"[NGRINDER 10] Support concurrent multiple test    add green ball    change default log directory from """"grinder_log"""" to """"default""""    Fix test finish determine logic to be more safe.   * Not only thread count but also process status count   Modify sample test creation logic run based on runcount not duration..   * Because it s better to run the test on slow machine.   Change current  testing pertftest retrival logic to get more status..",inline
Rework type resolution     JavaTypeDefinition now lazily resolves generics  meaning less overhead and avoiding access order problems (ie: class Foo extends <A extends B  B>). These means you can no longer request the generics list all at once... but you probably shouldn t anyway    I took the chance to move most type resolution code dealing with Java s Type to the JavaTypeDefinition. This makes things a little clearer and tidier    There are some minor API changes  but since 5.8.0 is recently out I doubt these have any impact. Plus  there was no easy way to just patch away the open issues in the old greedy algorithm,inline
Refactoring and specific retrieval for Oracle indexes  Change Id: I2c056281ab04be7cb6ff744ffb337c03346e155f Signed off by: Stéphane Thibaudeau <stephane.thibaudeau@obeo.fr>,inline
Performance improvements in the LocationHook    The quadtree used in the LocationHook was reimplemented using a more optimal data structure. All functionality not really used was removed from this quadtree.   Checking if the boundary directory contains bounds is now done once only.  git svn id: http://svn.mkgmap.org.uk/mkgmap/trunk@2155 25d90789 57f7 4ee0 8453 03a3dfeeeb22,inline
refactoring XObjectPageTypeProvider (remove deprecated PageTypeCommand),inline
Changed test logic and moved test configuration to the test method,inline
clean up,inline
removed includecategories option; fixes  107,inline
simplified getDigest(),inline
remove unnecessary lines. sorry.,inline
cleaned up compoents  renderes  responseWriters  and components ext.xml,inline
Simplified servlet logic.  Improvements to servlet and jsp code.,inline
[ LIB 155] Refactor configuration | heavy update  maps support,inline
changing text properties  simplified & fixed,inline
Starting to refactor the FastPath handler ... make stuff private etc,inline
Fixed converter message argument transfer. Introduced shared validator instance. Allowed getValue() to return just null if no backing bean is bound.,inline
SSL code refactored   git svn id: https://svn.apache.org/repos/asf/incubator/ftpserver/trunk@306744 13f79535 47bb 0310 9956 ffa450edef68,inline
Fix  773   Add global_annotations to graphs  Fixed a bug in which global_annotations were ignored by GraphHandler.java (and thus  were not rendered by gnuplot). Added async call to hbase to retrieve global annotations when required in a similar fashion as that of QueryRpc.java.  Note: Since both GraphHandler.java and QueryRpc.java implement (similar) query processing logic  all of this should be unified in the future (requires a large refactor to split all query logic with visualization logic).  Signed off by: Chris Larsen <clarsen@yahoo inc.com>,inline
"Revert """"Changing xtest runner to offer a """"validate and run"""" interface to the""""  This reverts commit 262528b430ce580924a978f59b5caaee6e06786e. ",inline
Improve metrics collectd implementation ( 1263)  Add some stylistic improvements and small refactorings.,inline
Refactoring of remote services api and rest api,inline
Made flush() private and moved removeChannel onto ProcessQueues  * flush() should not be public since that would require us to   perform synchronization and that isn t needed.  Also  flush is   is only used during shutdown.  * The removeChannel() method was intended to be used to remove   dead channels earlier  but it is okay to remove dead channels   during the periodic calls to processQueues().  They ll stick   around for a few milliseconds more  but on the other hand    channels exit stage left only one place in the code.,inline
pipeline stuff moved to separate repository,inline
improved even stacks (optimized  removed magic numbers for 2x2 crafting support  account for damage values),inline
Icons moved  drag and drop interface updated  Dockables can now be dropped left or right of a single tab  git svn id: http://svn.javaforge.com/svn/DockingFrames/trunk@736 3428d308 0d2e 0410 b3d4 94d0fefcacdf,inline
Intercept part input change event.  In some cases (when  Close editors automatically  is enabled for ex.) Eclipse can substitute the underlying editor of an already opened part. Handle this case by resetting the references associated with the part.,inline
[KARAF 1405] Refactore of the config layer [KARAF 1190] Remove property filtering  git svn id: https://svn.apache.org/repos/asf/karaf/cellar/trunk@1333437 13f79535 47bb 0310 9956 ffa450edef68,inline
Move all stats to Project  everything builds,inline
Bug 413070   Clean up and expand model validation. Also begin work on adding support for connections to <customTask> extension point.,inline
ISQReade: remove a redundant method,inline
Refactored handling of indexed field retrieval as suggested in  PR  18689.   git svn id: https://svn.apache.org/repos/asf/jakarta/commons/proper/validator/trunk@140002 13f79535 47bb 0310 9956 ffa450edef68,inline
Revert JWamp back to a strictly implementation of Wamp Specification  Suppression of    binary message   CallMoreResult   Subscribe arguments   Change back specification of publish messages,inline
fix window delete; change tabs,inline
added several methods on EOGenericRecordClazz to support EC arguments   moved a lot of stuff in ERXXXUtilities so the EC comes as first argument  removed the XXXEditingContext from the method name. This is so the names are more like the ones in EOUtilities   added EOControlUtils.clearSnapshotForRelationshipNamed()   added EOControlUtils.clearSnapshotForRelationshipNamed()   added and fixed PK< >String generation  very useful for URLs and DAs with non trivial PKs   added _stringForPrimaryKey() helper to prevent duplication  but PK generation is still a mess   added  ERXEOAccessUtilities.modelGroup(ec)  supporting null for ec   added  ERXEOAccessUtilities.entityNamed(ec  name)  supporting null for ec   (hopefully) all EOModelGroup.defaultGroup()  EOUtilities.entityNamed() etc have been converted to ERXEOAccessUtilities.modelGroup(ec) and entityNamed()  so most of the FIXMEs in that direction have been fixed.  I have not tested *anything* so far! So please check if something broke on the way.  One thing might be the reordering of arguments  I didn t want to deprecate them as they were pretty new anyway and shouldn t be used a lot outside of ERX,inline
WatchMojo UpdateStylesheetsMojo simplified,inline
* MAJOR MODIFICATION :     Added DataType enum class for better consistency in     data type.     Modified all methods to support the new DataType instead of the old     integer DataType with sign boolean information * Fixed some bugs in type conversion. * Added generic array methods in ArrayMath (moved from MathUtil). * Improved files ordering when loading a sequence from severals   files * Network error now displayed in standard output. * Make some clean up (removed old unused classes) * Minors bug fixes here and there.,inline
motivation: currently the MessageConsumer end handler is called only when consumer is unregistered during an event bus close. When the consumer is explicitly unregistered it is not called. This handler is mainly used by RxJava and Kotlin coroutines and it seems it would be best to call the end handler in all case to give an opportunity to end the treatment. In RxJava it would call the complete handler and in Kotlin it would close the underlying channel (so a for each iteration on the channel would terminate and execute the code after).  change: call the MessageConsumer end handler when the MessageConsumer is unregistered explictly.,inline
Remove most XML related items  and the entire internal web server concept.,inline
Removed dead code. If we aren t needing the page name  no reason to loop around doing stuff to find it. Cleaned up javadocs a bit.,inline
rewritten the current Lock implemention to solve ticket https://issues.jboss.org/browse/RAILO 1517,inline
o getting ready for 1.0. Cleaning up inconsistent APIs and stuff,inline
"Simplifying TypeManager getValueType(String  String) to just TypeManager getValueType(String) where the value type params are included in the string :  """"LIST<STRING>""""  No need anymore for TypeManager getValueType(String  DataInput)    git svn id: svn+ssh://dev.outerthought.org/outerthought/lilyproject/branches/complextypes@5065 b80d95f8 e103 0410 bd55 e03a9dc29394 ",inline
removed unused methods.,inline
Changes related to deprecation   removed d2wContext() methods and calls,inline
More clean up  source comments and simplification of RemoteServiceAdmin class.,inline
Un implement EncFSFileInputStream.read()  On some runtimes the readBlock() implementation ended up recursively calling into read(byte[]) since the call into super.read(byte[]) gets reflected back into EncFSFileInputStream resulting into infinite recursion. As a lame solution  removing read(byte[]  int  int) from EncFSFileInputStream and calling FileInputStream.read(byte[]  int  int) from readBlock().,inline
rsa simplifications,inline
Cleaned up code around patient entered date  did some renaming and removed converting entered DOB to timestamp DOB which already existed  https://www.pivotaltracker.com/story/show/94139000,inline
ASSIGNED   bug 209774: Simplify/generalize discovery API (summary bug) https://bugs.eclipse.org/bugs/show_bug.cgi?id 209774,inline
Refactored argument node hierarchy.,inline
Remove unused public methods,inline
Renamed HostFile to OverthereFile and Refactored it from an interface to an abstract base class.   src/Main/java compiles without errors or warning.   src/test/java still has compilation errors though.,inline
Add Jongo Class and remove query to json responsability from Processor,inline
simplified drop assembly a bit,inline
FACES 1895 Develop alloy:pickDate component (Refactored alloy:pickDate to remove unnecessary attributes) FACES 1897 Develop alloy:inputDate component (Refactored alloy:inputDate to use refactored alloy:pickDate),inline
Memory improvements:  * Optimized CharArray internals for copying Strings and CharBuffers. Deleted a load of unused code.  * Remove {Tag Text}.getContents()   always use more efficient writeTo() instead.  * Removed support for TextFilters (and the one unused RegexReplaceTextFilter implementation). They added an overhead and were rarely used. May replace them with something more efficient later based on user demand.  * CharArray implements Appendable. Use Appendable in more places  instead of SM specific CharArray.  * Propagate IOException around API.,inline
Removed all references to StringBuffer   now uses CharArray for about a 30% speedup. Also reworked a few of the if/else statements to produce slightly more efficient code.,inline
Bugfix: JENKINS 36878: vSphere now respects per slave instance cap. Bugfix: JENKINS 32112: NPE bug in vSphere.getTemplate(). Enhancement: vSphere.java now distributes load over all matching templates. This satisfies JENKINS 30203 if Jenkins is configured with a template. Correction: Jenkins UI no longer offers facility to manually create a Cloud provisioned slave (the cloud provisions those itself).  Normal vSphere slaves are still manually provisionable. Cleaned up logging in vSphere.java. Typo in vSphereCloudSlaveTemplate: getNumberOfExceutors  > getNumberOfExecutors.,inline
adjust structure Ide and Jdk Resolvers changes,inline
Refactoring: delete unnecessary methods and clean up code,inline
EventFrame FrameSelector bugfix (hack)  refactored LGM loading  load paramters.  Fixed bug where FrameSelector was empty on load or new game (t54)  * Simply destroy and recreate EventFrame  so it s a hack  * Seems to be caused by selector not being informed of new root node.  Refactored and rearranged LGM startup a bit  * MDI created in its own method now  * Creation methods now return component for later adding  * preLoad method to load files passed in from parameter list (t47)    * Does not attempt to recover on failure    * Consider making Listener.load more modular so preLoad can be done via a call through it  * Extracted some duplicate code from Listener s load and new methods to LGM.reload  git svn id: https://lateralgm.svn.sourceforge.net/svnroot/lateralgm/LateralGM/trunk@363 8f422083 7f27 0410 bc82 93e204be8cd2,inline
[LOGTOOL 100] Remove the hasFieldFor and hasMethodFor methods. Added additional validation for property annotations on parameters.,inline
Remove dead code from Slf4jReporter and its tests  Remove among the other things:  * Unnecessary reset of string builders * Methods which accept only one argument,inline
Merged 4 thread pools of TP into 1 (https://issues.jboss.org/browse/JGRP 2099)   Using LazyThreadFactory to correctly name threads   Changed sample configs to drop the OOB thread pool   TP: added num_threads_spawned,inline
Remove remaining Bukkit references.,inline
* finalized Sync/Async GAE implementation with Query/Batch (lots of code re organized) * finalized Sync JDBC implementation with Query/Batch (lots of code re organized * moved all static functions in static class containers * JDBC Async is not yet implemented * some batch functions (update) are not yet implemented * added lots of unit tests,inline
RF  changes plugin lifecycle,inline
multiple modules added + refactoring,inline
"Combine two methods into getReplacementText.  Previously  FileEpisode had """"getNewFilename""""  which would construct a new filename out of downloaded information    if  in fact  that information was successfully obtained.  The method would return various other pieces of text in the case where we didn t yet have sufficient information.  Then we had  getNewFilePath  which took the result of getNewFilename and  if """"move"""" was enabled  prepended the destination directory.  getNewFilename was useful as a public function in two places: (1) when we first create the table item  we assume we won t yet have have the file information  so we called getNewFilename to get the placeholder text  and then registered a listener to change it when we had the information (2) in the FileEpisodeTest  we want to validate the name without the destination directory getting in the way  (1) is solved by simply having the placeholder texts be returned by the combined method.  (2) was already solved  by always disabling """"move"""" for those tests  the returned text will never have the directory prepended.  As far as a name goes  neither getNewFilename nor getNewFilePath were really accurate  since it could very well return a different type of text  so I m settling on """"getReplacementText"""".  Possibly that name could still be improved. ",inline
Revert changes that replaced getExpandEntities with isExpandEntities. This commit un deprecates the get* Versions of the methods  and removes the is* versions,inline
COMPRESS 118 remove trivial factory method,inline
112 refactoring  bugfixes,inline
Refactor code of project and model creation wizards,inline
[AESH 270] a rather big refactoring;   ProcessedCommand/Option are using builders now instead of numerous constructors.   CommandContainers can now contain other CommandContainers if they are a GroupCommand,inline
cleanup and fix overwriting of protected flag,inline
launch hadoop: mini mapreduce cluster: make sure the task node uses a valid host name. This is useful for links to work in the web ui  even though the web ui itself does not work: see  145.   git svn id: svn+ssh://dev.outerthought.org/outerthought/lilyproject/trunk@4386 b80d95f8 e103 0410 bd55 e03a9dc29394,inline
Cleaned up RunManager and GenerationManager.,inline
Resolved issue: DIRMINA 410 (DefaultIoFilterChainBuilder synchronization issue with contains(...) methods) * Changed DefaultIoFilterChainBuilder to use CopyOnWriteArrayList * Added more remove() methods to IoFilterChain in trunk * Did a little bit more synchronization and volatilization on methods and variables     git svn id: https://svn.apache.org/repos/asf/mina/trunk@562335 13f79535 47bb 0310 9956 ffa450edef68,inline
Bug 431361   Label and activity equals two objects Bug 390575   Support BPMNLabel DI elements Bug 390566   Label feature package is not exposed Bug 355672   BPMN2 Modeler Usability: look & feel Saving work   still need to update SubProcess and Choreography Tasks Added a new Appearance section for all BaseElements which allows changing colors and line styles etc. Attributes are saved as extension elements.,inline
added negative test for porperty access from static code re write of FunctionDeclaraton and FunctionExpr so that FunctionDeclaration delegates as much as possible to a child FunctionExpr fixed this handling in local functions commented out TestBind.testBindNonExistentMethod  this test does not work in Flex (need to rewrite this somehow) as native methods are not allowed in user code note that TestBind.testNotBound also does not work in Flex   in Flex a method is _always_ bound all other tests green,inline
first attempt at refactored repository access  repository.api  repository.pentaho  basic functionality for system/solution access path handling still needs some work first attempts to use it in aliasedGroup and pluginSettings would be really surprised if anything actually worked at this point,inline
Remove automatic updating. Instead  a notice will be printed in the console.,inline
Remove unregister as Jena does not support it,inline
initial remove support,inline
cleanup,inline
"Refactor test execution methods  Conflicts: 	src/tests/CpuTests.java ",inline
move build variable logic to package + add TeamCity & Bamboo support,inline
simplified WebSocketClient by using blocking instead of nonblocking channels,inline
Dev |  37 | displaying no. of objects stored in db while testing; changing column name for patient type,inline
Merged revisions 35444 35445 35457 35458 35460 35461 35463 35465 35469 via svnmerge from https://www.dev.java.net/svn/hudson/branches/rc  ........   r35444 | kohsuke | 2010 10 01 13:44:56  0700 (Fri  01 Oct 2010) | 1 line      [FIXED HUDSON 7546] Fixed a possible AbstractMethodError in 1.379 ........   r35445 | kohsuke | 2010 10 01 14:04:58  0700 (Fri  01 Oct 2010) | 1 line      [FIXED HUDSON 4229] Supported failsafe reports for the Maven2 job type. ........   r35457 | kohsuke | 2010 10 02 10:04:35  0700 (Sat  02 Oct 2010) | 1 line      added additional code to assist trouble shooting. ........   r35458 | kohsuke | 2010 10 02 10:09:44  0700 (Sat  02 Oct 2010) | 1 line      performance optimization wrt the usage of buffer ........   r35460 | kohsuke | 2010 10 02 10:19:25  0700 (Sat  02 Oct 2010) | 1 line      [FIXED HUDSON 5977 HUDSON 7572] the incorrect use of WeakHashMap resulted in two instances of PipeWindows for the same OID. ........   r35461 | kohsuke | 2010 10 02 10:30:21  0700 (Sat  02 Oct 2010) | 1 line      debug code accidentally crept in. ........   r35463 | kohsuke | 2010 10 02 11:21:55  0700 (Sat  02 Oct 2010) | 1 line      [maven release plugin] prepare release hudson 1_379 ........   r35465 | kohsuke | 2010 10 02 11:22:14  0700 (Sat  02 Oct 2010) | 1 line      [maven release plugin] prepare for next development iteration ........   r35469 | kohsuke | 2010 10 02 12:26:53  0700 (Sat  02 Oct 2010) | 1 line      updated changelog as a part of the release ........   git svn id: https://hudson.dev.java.net/svn/hudson/trunk/hudson/main@35530 71c3de6d 444a 0410 be80 ed276b4c234a,inline
refactor tests.,inline
refactoring: externalized all view propertys to a new viewmodel object  which can be saved and loaded with a job,inline
Delete getDisplaySubject().  RELNOTES Removed `getDisplaySubject()`. Callers should use `actualAsString()`; overriders should use `actualCustomStringRepresentation()`.                Created by MOE: https://github.com/google/moe MOE_MIGRATED_REVID 185838490,inline
Major refactoring of extension point API classes  addresses these bugs: Bug 427021   <modelExtension> and <customTask> extension points do not allow use of FormalExpression types Bug 427406   Add support for EndPoint objects and define extensions Bug 355682   Define target runtimes extension point and Preference Page This is not yet complete  but wanted to save my work.,inline
Introduce IMatrixViewDimension and refactor some code,inline
removed mux related code,inline
* Improved / fixed sequence image ordering from filename. * Many improvements on Chat :     faster desktop rendering (fix lag issue on OSX).     support style & coloring from IRC.     support multi channels chat. * Added CloseTabbedPane component (basically a JTabbedPane with closable tabs). * Added IRCUtil class (IRC utilities). * Minors changes in Pixel/Band/ImagePosition classes. * Some others minors fixes and improvements.,inline
o refactoring of the creator to use request/response  another step in the round trip test works o pushed many default values to the archetype creation request to make things work in a fully embedded mode   git svn id: https://svn.apache.org/repos/asf/maven/sandbox/trunk/archetypeng@582578 13f79535 47bb 0310 9956 ffa450edef68,inline
mdr5 and 20 changes  Set the mdr5 flag only when name and mdr20 value are the same.  Separate city records for cities with the same name but different regions as well as different maps.  Now save the mdr20 value directly in the mdr5record. I don t think we need to do any post processing of the values any more.  git svn id: http://svn.mkgmap.org.uk/mkgmap/branches/city region index@1983 25d90789 57f7 4ee0 8453 03a3dfeeeb22,inline
Add initial support for MOM to 1516e  Many of the values are not currently supported  but the basics are now complete for 1516e MOM support  including the proper serialization of those attribtutes of `HLAfederate` and `HLAfederation` that are supported.  New test additions have been included  as have refactorings of the major MOM data providers to deliver values in format that is properly encoded depending on the version of the interface being used. This has also triggered some changes through the 1516 2000 tests to match this.  Fix:  55,inline
Added a new method StyleUtil applyStyle() that accepts a ShapeStyle to make it easier for plugins to change shape fill colors. Also updated the Sample plugin to demonstrate its use.,inline
Refactor ODT textStyling to extract a pluggable interface for Styles generation,inline
rremoved invariants,inline
Changed the way how Exceptions was handled to have something more general   Cleaned some of the API  that was sometimes inconsistent   Refactored ERMailDelivery with the introduction of a new class: ERMailDeliveryComponentBased.,inline
Removed Resource model classes since it is an antipattern bad for performances (each inheritance level generate SQL joins) Update samples apps and identity manager according to that Include Baptiste and Loic improvements for update controller method Replace Kazan specific password generator by Spring Security one Add an exception mapper for AlreadyExistingEntityException Use raw types instead of responses in GenericController  HG Enter commit message.  Lines beginning with  HG:  are removed.,inline
Added liking  refactored bulk activities mapper,inline
Ashish Sush| 1742|added csv builder  renamed controller method  refactored callback request to retrn enum value of operator instead of string.,inline
Add kick to the command list  changes to kick command.,inline
Fixes for NUTCH 2580: Changes:   Creation of lib rabbitmq for common functionalities (publish rabbitmq and indexer rabbit).   Update of the RabbitMQ s library version.   Headers selection from NutchDocument s fields (for indexer rabbit).   Optional binding.   A single or multiple documents into each message.   Options for the creation of exchange  queue and binding.   Simplify the configuration options.,inline
RecordHandlers: Set rather than List for find result logback.xml: re added ClassAppender config  but commented out (so it can be re enabled easily if wanted) ChangeNamespaceTest: fixed arg test PS2Vivo.xsl: updated to use merged records JDBCFetch: removed executeOld() Transfer: removed emptyJC(jc) to use jc.truncate() XSLTranslator: revamp and cleanup Merge: fixed and working SpecialEntities: added exceptions ability TranslateTest: stop catching exception (so we can see them when it fails) SpecialEntitiesTest: updated to reflect exceptions,inline
TYNSTEP 1228  resolve fix chapter lookups   which required a bit more refactoring,inline
Finalize  99 (Add attribute filter to control which session attributes are serialized to memcached): main implementation was provided by Rainer Jung  this commit adds tests  the filtered map now also is a ConcurrentHashMap (as attributes in StandardSession)  slight formatting changes  added warning when sessionAttributesFilter is specified with non sticky sessions.,inline
Clean up from code review.,inline
begin removing MultiReporter  * MultiReporter.java     deprecated * ToePool  ToeThread  WorkQueue  WorkQueueFrontier  PrecedenceProvider  CrawlURI  FetchStats.java     remove MultiReporter getReports() and reportTo(String  PrintWriter)     these are not used as MultiReporter specifies  and MultiReporter is going away anyhow,inline
Refactor tag handling in JGitRepository,inline
Rework of link matching and printing,inline
RF remove unused formal parameter,inline
Simplified the ui key auth. No longer session based so timeout issues should no longer occur.,inline
removed the beanshell  provide (recompilable) support for tabbed or splitpane layout of requests and responses  use Preferences rather than Properties  remember the preferred size and position of the frame,inline
Removal of suspend()  resume()  stopProcess()  and startProcess() publicly exposed methods  with preference to use turnOff() and turnOn().  The latter are safer to use as they better control the proper order in which the former methods are executed.,inline
More refactoring   separating reflection and files from the rest of lems. Code generated reader instead of reflection instantiator.,inline
reimplementing change of language through listener,inline
CalendarService calSpaceCache moved into ExecutionContext,inline
FACES 1955 Develop alloy:outputScript component FACES 1928 Remove compile time dependency on portal service.jar from Liferay Faces Alloy (Moved LiferayPortletUtil.java and LiferayThemeDisplayUtil.java to Util jar and modified them to avoid using reflection.),inline
cleanup based on check style complaints and javadoc (jdk8 s doclint) complaints,inline
Add tests for proxies  hook feature and cleanup some code.,inline
fixed several bugs with diagrams   removed unused code   refactoring of CollaborationSessionUtil   Added a SavingPolicy doing the marshall   removed the navigation bar in the navigator   Added the feature that close the properties View when the browser is displayed   removed the configuration file used to define the diagrams   Added a properties file to define the URL of the web Server and of the   repository,inline
Simplified BitMixer utilities a bit  corrected a nasty bug with missing mix(long) which caused autoboxing to be triggered.,inline
Enhanced SSLContextBuilder; added PrivateKeyStrategy interface to enable customization of private key selection; more SSL test cases  git svn id: https://svn.apache.org/repos/asf/httpcomponents/httpclient/trunk@1495022 13f79535 47bb 0310 9956 ffa450edef68,inline
changed some fields to final,inline
Remove Builder from Query,inline
Added per biome config. Some rework about config files. Added per biome object generator.Make it slightly work.,inline
QuameterProteinGroup object   to be stored in the database to track how the protein group definition changed over time.,inline
introduce OSCDatagrammChannel,inline
Removing stringForKey method  replaces all calls with System.getProperty,inline
Patch to improve the performance a little (by reducing the number of calls to size() primarily) and to reformat the code somewhat to match the rest of JDOM (always using brackets  4 space indents).  Thanks to Brad for putting it together.   jh,inline
Refactored ReportManager so reports are just built in memory and not persisted,inline
* Moved a call to buildFilterChain to AbstractIoProcessor * Better exception handling    git svn id: https://svn.apache.org/repos/asf/mina/trunk@576226 13f79535 47bb 0310 9956 ffa450edef68,inline
Warning eliminations; hazard model generations; removing AML,inline
Updating WebSocket library to use new protocol. Changes to WSThread to implement the same. DSP 177,inline
Remove the need for explicit row locks when allocating UIDs.  The existing code with explicit row locks exhibited very poor performance  and also prevented multiple TSDs from allocating UIDs concurrently.  The new approach consists in:   1. Performing an atomic increment to grab a new UID.   2. CAS ing (CompareAndSet) the reverse mapping (uid  > name)   3. CAS ing the forward mapping (name  > uid)  If we die after step 1  we waste an UID.  If we die after step 2  we just end up with an orphaned reverse mapping (harmless).  When two TSDs race to assign a UID to the same name  one of them will fail to CAS the forward mapping at step 3  and will retry to find the UID assigned by the winning TSD.  When that occurs  the only net consequence is that a UID will have been wasted by the losing TSD  whereas the previous implementation wouldn t waste one when this happened.  The  uid fsck  command can easily detect orphaned or wasted UIDs  and we could conceivably put them on some kind of a free list in the future to re allocate them.  If two TSDs are running side by side  and one uses the old method while the other uses the new lock less method  things still work as expected.  There are two possible scenarios:     Old TSD goes first  locks the MAXID row  and does its thing.     The new TSD will have to wait until the row lock is released     for its atomic increment to go through.     The new TSD goes first  atomically increments the MAXID row      and does its thing.  The second TSD locks the MAXID row and     proceeds to allocate its own ID concurrently.,inline
Remove InputStream references  added decode to buffer with type reference  Signed off by: Paulo Lopes <pmlopes@gmail.com>,inline
Remove unnecessary method,inline
cleanup error handling on assembly plugin  git svn id: https://svn.apache.org/repos/asf/maven/components/trunk/maven plugins@295007 13f79535 47bb 0310 9956 ffa450edef68,inline
Introduced configurable categories per assembly. Default categories are  assembled  and  included .,inline
More test cases to Bucket.moveBucketToDir().  Verifies that contents in the bucket is moved as well as the bucket. Verifies that exceptions are thrown when necessary.,inline
WIP: Started test renderer refactoring,inline
More code cleanup.,inline
Add an interface for a translatable logger  This cleans up logging of localized messages. Additionally  for bukkit logging has been corrected so that prefixes are properly applied to log messages.,inline
Grammatik angepasst  Change Id: I7ffddb5efc60340caca310d1538291b340bc91f9,inline
A tremendous patch from Wouter to move lots of things over to the new rule XML test format   git svn id: https://pmd.svn.sourceforge.net/svnroot/pmd/trunk@4793 51baf565 9d33 0410 a72c fc3788e3496d,inline
DataArray API refactoring,inline
Cleanup of old code and useless things ( 333)  code cleanup,inline
More refactors/cleanups/javadoc.,inline
Alex|Ian|Roy: Removed IncomingPaymentProcessor  and moved DAO access from TabController to PluginController.,inline
Redid tile system and more work on Room s Tile pane  Tile  * Replaced ints with Points and Dimension  * Handles own ID  rather than RoomFrame  * Added autoUpdate field for efficiently modifying several fields before firing an update  Point renamed to PathPoint to easily distinguish between the two  * Updated Path and PathFrame to reflect changes  Instance: Replaced x y with Point  Listener: Fixed bug where clicking Load and cancelling opened a file anyways  RoomEditor  * Updated to reflect changes to Instance and Tile  * Now supports TileSelector and Tile Add tab  * RoomComponent now uses Rectangle instead of ints  GmFileReader and GmFileWriter updated re Instance and Tile  Room:  * Temporarily removed addTile method  since Tile now handles its own id  * Updated to reflect changes to Instance and Tile  RoomFrame  * Renamed some fields  * Updated to reflect changes to Instance and Tile  * Tile add tab now more usable  * Some tweaks to Tile Edit tab   git svn id: https://lateralgm.svn.sourceforge.net/svnroot/lateralgm@299 8f422083 7f27 0410 bc82 93e204be8cd2,inline
Minor refactoring and white space fixes. Also converted from 4 space tabs to 2 space tabs.,inline
Fixed  102. Introduced TestModerator for test driver s internal API.,inline
Actor  Port and Source hierarchy refactored.,inline
Changed GroupRequest to use CompletableFuture (https://issues.jboss.org/browse/JGRP 1620)   Removed GroupRequest.setAnycasting() as this is already present in the RequestOptions instance passed to GroupRequest   Async unicast RPCs (with or without future) don t lead to the creation of a UnicastRequest  but are sent directly (https://issues.jboss.org/browse/JGRP 1620)   If RPC is async  don t create a GroupRequest instance   Removed NullFuture   Replaced explicit Message in MessageDispatcher.sendMessage()/castMessage() calls with Buffer (https://issues.jboss.org/browse/JGRP 1620)   UnicastRequest.receiveResponse() should not consult RspFilter   Replaced org.jgroups.TimeoutException with java.util.concurrent.TimeoutException   Changed accessors in RequestOptions   UnicastRequest now uses CompletableFuture   Changed RspList to subclass HashMap (saves 4 bytes  plus fewer methods)   UnicastRequest: get() on future removes request from correlator s table   Calls to an empty destination set now always return an empty RspList,inline
Convert Purify to a PlugIn from PlugInFilter and get closer to the Fiji design guidelines,inline
simplify test framework some tests were incorrectly setup,inline
* added Clipboard class for easy copy/paste operations in Icy. * SearchBar :    detached search engine from the GUI.    better performances.    can now display complete list of result.    bug fixes. * added RoiActions class which centralize all actions for ROI (from the ROI control panel). * can now do Load / Save / Copy / Paste operations on ROI. * added new methods to the SwimmingPool class so we can now manipulate objects depending their names. * improved plugin detection on when a plugin exception occurs. * minor change on users panel arrangement in Chat. * minor fix in PluginLauncher.start(..) method. * minors fixes.,inline
replace area.intersect by SutherlandHodgmanPolygonClipper  for now  this has no advantage  but it allows to move the shape merger up in the chain which is needed when we want to optimize wrong angles in shapes. img size increases a bit compared to r3009 because filters are not yet  working properly.  git svn id: http://svn.mkgmap.org.uk/mkgmap/branches/high prec coord@3014 25d90789 57f7 4ee0 8453 03a3dfeeeb22,inline
Refactored remaining Services. Added 3.7 APIs  1. Updated code based on the refactoring check in review comments Main changes include:   Added ApiType constructors   Changed account specific ApiTypes into generic ones   Renamed: operation  > action   ServicesHelper changes:   Replaced Object with generic types.  This eliminates the need for casting as well as for Suppressing warnings in Service classes Implemented other suggestions: static map replaces ‘if’ statements for type collections  2. Refactored all Services to use ApiDefintion and ServiceHelper 3. Fixed test cases as needed 4. Added DemoTestIntelligenceService  5. Implemented wrappers for Mambu 3.7 API additions: 5.1. Updated Maven’s pom to build Mambu APIs Java 3.7 bin.jar using mambu models V3.7.jar 5.2 MBU 4607   As a Developer  I d like to work with Custom Views a) added getting Custom Views API wrapper b) added filtering Clients/Groups/Loans/Savings by custom view ID 5.3  MBU 5946   As a Developer  I d like to filter lists on centres via API Updated wrappers to filter by centreId for Clients/Groups/Loans/Savings Services,inline
Simplify all get methods,inline
Refactor to isolate the proxy channel creation in a class so we can run without the http proxy netty dependency and make it as optional,inline
"Refactoring: four new helper methods in CodeGeneratorBase clean up the code in both subclasses a lot. IDEA s structural replace rulez! On the fly  cleaned up multiple declaration of JsWriter """"out"""". ",inline
HH 76991 remove jdebug  timings and guava  rename properties file,inline
changing around selector behavior.,inline
code inspection changes,inline
Fixing issue with backspace  left arrow when cursor is past last column but not in next row due to weird wrapping behavior (am and xn terms). Line of *width* chars in bottom row may have buggy cursor motion when trying to move at end of line on terminals that don t support scrolling or report incorrect height.,inline
"  15 Plugin Framework for Java (PF4J)  	  remove atlassian plugin and append Plugin Framework for Java (PF4J) 	  Plugin Framework for Java override find & factory & manager 	  add class sso filter interface ",inline
130 remove jetty.xml and add host to solandra.properties,inline
* Perform some better caching around compiled (basic && non basic) CodeBlocks. * Refactor the lookup or use bytecode generation to a BaseCompilableBlockStatement superclass. * Move code storage to a CodeStorage manager  with Entry to hold both CodeBlock and the   resulting compiled Object.,inline
Range related code extracted from Reaction class.  Now have a more general AbstractIteration class that can be used to implement arbitrary iteration procedures.  Have also removed XML/ folder.,inline
"Revert """"(Partial) merging of core changes from f17.""""  This reverts commit fc79794377be152d77f3feac19308e9119bcc2ac. ",inline
Refactoring.,inline
refactored some date to jdk time methods out of SqlBaseDao. Added preliminary law processor code. Optimized imports.,inline
[ LIB 77] Refactor AttributeCoercion(s),inline
408042 editable working set name  other fixes  Import working set name is now Text control and can be changed by the user.  Create working set is automatically enabled when importing single multi module project and disabled in other cases.  Signed off by: Igor Fedorenko <igor@ifedorenko.com>,inline
moved mark profile picture set logic into profile picture service,inline
Added images for roster  handling of roster entry remove,inline
Refactoring EndpointAPIGenerator.,inline
A little tidying,inline
Package and class name refactoring. Part 2.,inline
varenc: remove unnecessary subtree rewriter classes,inline
"Restore TZ hints to programmes broadcast around BST >GMT changeover.  The Radio Times feed previously included hints (at the start of programme titles) to cater for ambiguous localtime programme start times during the BST >GMT transition.  This patch prepends """"(BST) """" to programme titles starting in the hour before 01:00 on the day of changeover  and """"(GMT) """" to titles starting in the hour afterwards (after the clocks have """"gone back"""").  Without this change  ambiguous localtimes of 01:00 01:59 are generated in the listings and can make it impossible for downstream software to generate the correct UTC offset for such broadcasts. ",inline
Added reset to candidate ass service + refactoring,inline
attribute handling refactoring,inline
Removed IterProcessor and replaced it with a new processor called DataSourceProcessor.  DataSourceProcessor is more general than IterPRocessors.  Previously Template had a property called IterProcessor which was a special case for making a datasource object that was put into the main table of the report object.  DataSource can do that (when the tableData property is set on the template) as well as provide datasources for sub reports as well as for the main report,inline
Score: constructor cleanup,inline
Fix  773   Add global_annotations to graphs  Fixed a bug in which global_annotations were ignored by GraphHandler.java (and thus  were not rendered by gnuplot). Added async call to hbase to retrieve global annotations when required in a similar fashion as that of QueryRpc.java.  Note: Since both GraphHandler.java and QueryRpc.java implement (similar) query processing logic  all of this should be unified in the future (requires a large refactor to split all query logic with visualization logic).  Signed off by: Chris Larsen <clarsen@yahoo inc.com>,inline
Add a generic interface for Trees and RandomForests  so they can be used interchangeably. Add support for bagging and random variable selection to RandomForest.,inline
Border Radius Implementation  Heres is full border radius support. Known Issues that should be patched prior to a release are as follows:   Set px value under shorthand BORDER_RADIUS is not computed correctly   Declarations around the CSSName.BORDER_****_RADIUS should be cleaned up and re organized to be more logical and return consistant types to the BorderRadiusCorner class   BorderRadius sides are not automatically fixed when the total radius of one side excedes its width/height. This will need to be completed after the CSS parsing issues have been resolved. (you can observe this by setting border radius: 100%  they should be normailzed to 50% because 1 side cannot have over 100%...).  Note: I did  most my testing using iText 2.17  additional testing should be done with Swing and iText5,inline
Added lazy allocation (per suggestion by Patrick Dowler) for attributes and content lists in Element.java.  Also cleaned up some formatting mistakes (tabs... uggh)  lots of methods that still took a name and URI  instead of name and Namespace object.,inline
kafka gateway refactor,inline
SubscriptionExecutionState: changing serialized format from JSON to Avro. The serialized Avro is the raw data  without the schema embedded. This needs some more thought wrt versioning in case we ever want to change the format. Maybe prepend it with a version number or so. Next week.   git svn id: svn+ssh://dev.outerthought.org/outerthought/lilyproject/trunk@4345 b80d95f8 e103 0410 bd55 e03a9dc29394,inline
refactor botrunnable for more seperation of our and pircbot code,inline
HH 50260 don t change grizzly default IOStrategy,inline
Removing internalCall to reduce internal stack usage a little bit,inline
refactoring model/controller entry point,inline
ARQGRA 224: page fragments implementing WebElement interface delegate interface invocations to Root  * A Page Fragment can be declated asbtract when implementing WebElement   interface. Then all method invocations on such Page Fragment will be   intercepted  and those which are from WebElement interface will be   delegated to the Root of the page Fragment. * LocationEnricher   the creation of the page object was improved  now   it is using the method from PageObjectEnricher to do so * Support for declaring Page Fragment as abstract class not added  cause   it requires more changes in the code,inline
Factor out more netty configuration specifics into the config builders  This change mainly adds control over number of boss and worker threads for the Netty channel factories used by the Netty client and server thread pools.  It also renames NettyConfigBuilder to NettyServerConfigBuilder (to contrast with NettyClientConfigBuilder)  and turns the config builders into actual builders (they were just used directly before).,inline
remove ExtendedNegotiator and BasicExtendedNegotiator move QueryOption and StorageOptions to org.dcm4che.net,inline
Minor refactoring  git svn id: https://pmd.svn.sourceforge.net/svnroot/pmd/trunk@5583 51baf565 9d33 0410 a72c fc3788e3496d,inline
Merge R8pbrant changes to HEAD,inline
Simplify IMatrix hierarchy,inline
[SUREFIRE 696] Improve class design      Patch by Stefan Birkner. Applied with only a minor formatting adjustment  git svn id: https://svn.apache.org/repos/asf/maven/surefire/trunk@1069058 13f79535 47bb 0310 9956 ffa450edef68,inline
"Fixed Dependency Injection  according to this specification:      """"The basic idea is that if an object depends upon having an instance of some other object then the needed object is """"injected"""" into the dependent object; for example  being passed a database connection as an argument to the constructor instead of creating one internally.""""     Source: http://en.wikipedia.org/wiki/Object oriented_design Some_design_principles_and_strategies ",inline
Refactored Infinispan cache wrapper hieararchy * All wrappers should from now on keep linear hierarchy according to Infinispan versions (one wrapper per plugin) * Each feature should be implemented by separate object   wrapper and feature can be enriched separately * Code from the core wrapper moved to Lifecycle and BasicOperations (these are not features)   wrapper should only hold the caches and orchestrate features * InfinispanWrapper now can work as multi cache wrapper as well (see StressTest.useBuckets),inline
Refactoring of selectors before I start with extend:  151,inline
Major refactoring of dropwizard kafka  New Consumer API:    * `KafkaConsumer` is now parameterized by the message type.   * Consumption now begins when `KafkaConsumer start()` is called.   * During initialization  a `Decoder<T>` and `StreamProcessor<T>` needs   to be registered before the `KafkaConsumer<T>` can be constructed.    This makes construction type safe; it s not possible to create a   `KafkaConsumer<T>` (via `KafkaConsumerFactory`) that isn t valid.   * Scala support updated and simplified.   * Removed cumbersome `ErrorPolicy` configuration in favour of   automatic handling of errors.    Instead of treating all errors the same  we now attempt to recover   from transient errors.  Still TODO:    * Error handling mechanism in `Decoder` instances. Currently  any   `Exception` thrown by a `Decoder` is treated as a recoverable error    creating an infinite loop when a message is invalid.,inline
Cleaned up NEXUS and Newick output writers.,inline
Removed REQUEST_ID/req_id from Request (https://issues.jboss.org/browse/JGRP 2001)   Removed Header.rsp_expected,inline
Cleanup   docs,inline
Stashing changes before switching branches for maintenance,inline
Removing inheritance between SimpleReducer and SimpleCombiner. It simplify the code,inline
Do not retain MavenProject instances forever  Before this change  MavenProject instances were eagerly loaded for each workspace Maven project are were retained for as long as the projects were opened.  With this change  MavenProject instances are loaded on as needed basis and discarded when they are not needed any more.  Signed off by: Igor Fedorenko <igor@ifedorenko.com>,inline
"Massive refactoring to exception handling. I m trying to simplify things  but they are currently a little bit more complicated. I ll do another round shortly.  The main benefit of this change is that now all of our error handling flows through one class: Errors.java.   It takes care of     managing the current source line     managing the current InjectionPoint    building Messages    toStrings  Because of this refactoring we now use almost exactly the same code for both ProvisionException and CreationException. The consequence of this is that ProvisionExceptions now include a full error report    all of the classes injected. """"Fail fast  but not too fast"""" now applies to Provide time as well as Injector create time.  I also made InjectionPoint into a public class in SPI. It replaces dependency. I like this change because """"dependency"""" is a very abstract name  whereas InjectionPoint is very Guicey. Guice injects stuff. Dependencies are a consequence of this  but I like the API better exposing the core Guice abstractions directly.  This entire change needs further doc  simplification and cleanup. Todo.  git svn id: https://google guice.googlecode.com/svn/trunk@517 d779f126 a31b 0410 b53b 1d3aecad763e ",inline
Redesign of classic (blocking) connection management APIs  git svn id: https://svn.apache.org/repos/asf/httpcomponents/httpclient/trunk@1784138 13f79535 47bb 0310 9956 ffa450edef68,inline
Bug fixes  new tests  and structural changes needed for development of the new SystemVerilog parser,inline
[AESH 111] completion is working better for values  will need to change the OptionCompleter api a bit,inline
Introduced BrandingPluginsInterpolator,inline
Clean management of cancellation.,inline
remove some extra unhelpful output  move test code to test jar   git svn id: https://svn.apache.org/repos/asf/maven/wagon/trunk@162477 13f79535 47bb 0310 9956 ffa450edef68,inline
Inlined Searcher.searchFor{ Toggle}Button().,inline
refactor SWFTest  fix broken storescu  mppsscu and stgcmtscu,inline
refactoring   git svn id: https://pmd.svn.sourceforge.net/svnroot/pmd/trunk@335 51baf565 9d33 0410 a72c fc3788e3496d,inline
change api method getWikiDefaultDocRef to only need depCellSpaceSuffix parameter,inline
Modularize query execution and add complete V3 protocol support. Removes JDBC1/JDK1.1 support.  Oliver Jowett,inline
Do work inside getMoveToPath  Previously  FileEpisode had two methods: a private one called getMoveToDirectory  which composed a String from the user specified destination directory  replacement template  and the information we ve found about the file; and a public one caleld getMoveToPath  which basically called getMoveToDirectory and turned the result into a Path.  This made some sense since we work with Strings a lot: all the various components are Strings  and we need a String to put into the ResultsTable.  Still  the point ultimately is to move the file  so the actual Path is pretty important; plus  using Path.resolve() seems better than concatenating Strings with FILE_SEPARATOR_STRING.  We still need the Strings.  But switch it around: create the Path object  and use toString() to get the String version.,inline
"Revert """"Initial clean up in FileLister""""  This reverts commit 693b987e7c5eb68baab2e8922bd80cc580a94a35. ",inline
Massive refactoring to separate unit tests from integration tests,inline
removed unneeded cruft in Util,inline
Removed the metrics visitor,inline
Tidy up with added comments too.  git svn id: http://svn.mkgmap.org.uk/mkgmap/trunk@132 25d90789 57f7 4ee0 8453 03a3dfeeeb22,inline
Major refactor of the IO layers,inline
Changes in the NIO implementation and re implementation of GossipRouter/RouterStub   Added PubServer and PubClient   Added send(null) to send to all   Added GossipRouterNio   Added static creator methods for NioServer and TcpServer   Added code to create client servers   TCPGOSSIP and TUNNEL can now choose between blocking and non blocking connections to GossipRouter (use_nio)   Request and response types between RouterStubs and GossipRouters are now in a separate enum GossipType   Removed GossipRouterNio: non blocking IO will be implemented in GossipRouter itself using NioServer/TcpServer   Added Util.bufferToArray()   Moved ConnectionListener out of BaseServer   Removed Server   Added List<PingData> to GossipData   ReceiverAdapter now uses Util.bufferToArray()   TCPGOSSIP now implements RouterStub.MembersNotification callback   RouterStub now uses BaseServer to connect to GosipRouter   GossipRouter now uses BaseServer to implement connection management   Added TcpClient and NioClient   Moved all client server related classes to org.jgroups.blocks.cs   Added TcpClient and NioClient   Moved all client server related classes to org.jgroups.blocks.cs   De genericized BaseServer et al   Moved to package org.jgroups.blocks.cs   Reconnects in RouterStubManager now work   Use peer connections to make unit tests pass   Added suspect handling in GossipRouter: when a connection to P is closed  then a SUSPECT(P) will be sent to all members of that group   Made marshallinf of GossipData for type MESSAGE more efficient   Removed copying of messages in GossipRouter   Setting parameters in sockets/channels before connecting them   TcpConnection.isOpen() now returns true when the socket has been created   Rewrote ServerUnitTest to get rid of issues with @DataProvider   Upgraded TestNG dep to 6.9.x,inline
move sendPDULength  receivePDULength  maxOpsInvoked  maxOpsPerformed  packPDV from ApplicationEntity to Connection replace Connection.dimseRSPTimeout by cstoreRSPTimeout  cfindRSPTimeout  cechoRSPTimeout  neventReportRSPTimeout  ngetRSPTimeout  nsetRSPTimeout  nactionRSPTimeout  ncreateRSPTimeout  ndeleteRSPTimeout rename Association.nevent(..) to neventReport(..),inline
simplified replication  and fixed issues with testcase,inline
"Refactored HookExecutor  Now is """"event based"""" and works via method reflection.  Also factored out PriorityNode. Additionally users can now add a cfg file for each plugin inside the pligins/ folder. Currently it is used to resolve priority / hook execution order  conflicts if that is required. ",inline
Removed guava library  replaced cache with simple domain specific implementation,inline
Simplifying the Matlab controller (only to work on the local machine)  The implementation works in the debug mode  but not when deployed. The problem seems to be the packaging (for some reason my eclipse does not want ot build an unpacked plugin)  then in the jar file the hashmaputils.m are not accessible.    Moving the code from MatlabClient to the respective nodes.   Improving the sintleton implementation of the MatlabController (now   MatlabConnector),inline
[issue  40] changed configure mechanism so that configure no longer does actual configuration as there are currently no properties that can be influenced by the user,inline
Refactored the diagram settings and dialog mode dialogs into a single preferences dialog; allow custom color schemes to be defined (by means of config files).,inline
JDBCFetch: constructor cleanup  fixed need for RH config,inline
Toby: Extracting an abstract CachingIterator from PredicatedIterator  FilteredIterator and SubSequenceIterator and removing the iterator helper classes as a result.,inline
Added logging  documentation  string externalization  code cleanup,inline
HV 1381 Introduce a ValueExtractorHelper class,inline
Add maxVolatileTime para to control data provider flush interval and little refactors,inline
Fix for bug https://bugs.eclipse.org/bugs/show_bug.cgi?id 432778  Change Id: If9073722ee51dec8c098873c3334a00cbb778f5a,inline
fix concurrency issue and minor performance improvement and cleanup,inline
EXOJCR 1832: refactoring JCR org service,inline
Prepare NodeContext for nested lists support.  Not all tests are working yet  but the current refactor is dramatically simpler. Support for published ports (which is how nested lists will work) is forthcoming.,inline
Small refactoring,inline
"* ROI:    added .canSetPosition() and .setPosition5D() methods.    added .canSetBounds() and .setBounds5D(..) methods.    added .contains(ROI) and .intersects(ROI) methods. * added ROI4DArea and ROI5DArea. * IcyCanvas and Canvas2D implements the new 5D support from ROI/Overlay. * reworked the ROI panel for better 5D support (not yet completed) * SequenceDataIterator and ImageDataIterator implements the new 5D support from ROI. * BooleanMask<X>D: added .contains(BooleanMask<X>D) and .intersects(BooleanMask<X>D) methods. * ROI are now implemented as Plugin (ROI classes moved). * """"fill sequence"""" operation now use the ROI properties to get the region to fill. * Rectangle<X>D: fixed union and intersection operation with Infinite dimension. * added Dimension<X>D classes. ",inline
Started cleaning common module up,inline
"Revert """"Merge remote tracking branch  origin/release/6.0.3 navigatorx pre_release 1  into dev""""  This reverts commit a4d2b4468baba98a5a53f8c634f1693c8d124495  reversing changes made to d4b6403fd4fd2ad8b951370db58c0c99cd6398a3. ",inline
Discard redundant changes,inline
remove all references possible to UDFImpl,inline
Changes for 0.2.5_02,inline
Removed makeTag functionality in chckout(),inline
Had to modify the image drawer to use the ImageObserver class as Swing uses that to resize components.,inline
Apply fixes outlined in issue  99 lots of extensions to the Ant task and a variety of code cleanups,inline
Dheeru |  282 | Refactored by pulling up common transitional logic to base transition class,inline
Remove some instance variable  reduce visibility,inline
o Extracted a couple of other small classes from the booter  Cleaned up on a few other minor style wise irritations that were left over from the larger refactoring in previous commit  git svn id: https://svn.apache.org/repos/asf/maven/surefire/trunk@1033250 13f79535 47bb 0310 9956 ffa450edef68,inline
" 164: Refactored encryption handling  * Added documentation * Switched from an option    encrypt  to a dedicated agent commad """"encrypt"""" * Switched markers from """"{ ... } """" to """"[[ .... ]]"""" for consistency with jmx4perl encryption markers * Simplified cypher which is sufficient for our needs (especially the salt generation) ",inline
fcrepo 770:  Tidy up FeSL policy validation  Validation now occurs as part of the standard object/datastream validation. All FeSL specific policy validation removed.  Methods with invalid policies will result in the method failing  with no changes made to the policy index.,inline
[JGRP 430]   GossipRouter: support accessing multiple GossipRouters in TUNNEL (in progress) cleanup random policy is default,inline
Further service API refactoring,inline
Refactored servlet and standalone to prepare for eventual non servlet based Ninjas,inline
General improvements to the drawdown calculation    layout changes to the PerformanceView for an easier overview   added tooltips for the risk metrics   calculated and display interval information (from   to)  Issue:  226,inline
Reduced number of listFiles(). Intended to make listing faste.,inline
"next round of implementations. Also added a number of comments""",inline
"some tests were incorrectly setup""",inline
Update notification preferences UI under construction. (B-08706)  Change getPersonModelView to be OAuth-friendly and clean. (D-07030,inline
Cleaned up STGP initialisation classes,inline
Rewrite of QueryResultParser to fix issue #98.,inline
Restructuring of the way Moo classes interact felt too tightly-coupled.  Needed to split create() from update() in the translator to make it happen.,inline
Removed deprecated methods,inline
move components from http to core,pull up
Bunch of methods pulled up,pull up
Added: Two new @Test refactorings (pull to class level push to method level),pull up
[HER 1659] make default WARC size comply with spec; adjust default pool size for fewer odd sized (W)ARCs* ArchiveFileConstants.javaremove superfluous constant* WriterPool.javaDEFAULT_MAX_ACTIVE > 1* WriterPoolMember.javaupdate constant use; remove deprecated+unused methods* WriterPoolProcessor.javapull storePaths up from subclasses but set default via subclass methodset defaultMaxSize via subclass method* WARCWriterProcessor.java ARCWriterProcessor.java(getDefaultMaxFileSize) (getDefaultStorePaths) as appropriate,pull up
HV 441 HV 443: Pulling constraint origin adaption up to MetaDetaBuilder in order to adapt method constraints too.,pull up
Pull out test methods into common areaMoving the test methods that are in DynamicMongoDAOTest that aregeneral into the DAOTestSuite.,pull up
BalajiN | 0 | Refactoring. Pulling up common methods in transitions,pull up
Pulled createSetWith() method to superclass.,pull up
Pull generateSingularMethod implementation up to JavacSingularizer,pull up
pull up some methods,pull up
Push array equality checking up into Subject.The main results: `assertThat(array).isEqualTo(otherArray)` now compares array contents (not array identity) even when the input isn t statically known to be an array. The failure messages for arrays now look more like the standard failure messages. Failure messages for all types include the index of the first mismatch. (This also incidentally fixes a tiny bug: https://github.com/google/truth/blob/ca04f65b91a931c887e98f7062288ce2298b62cd/core/src/test/java/com/google/common/truth/ObjectArraySubjectTest.java L345)Most of the new code in Subject is copied from: PrimitiveByteArraySubject (base16) PrimitiveDoubleArraySubject (doubleArrayAsString) PrimitiveFloatArraySubject (floatArrayAsString) ObjectArraySubject (stringableIterable STRINGIFY checkArrayEqualsRecursive) with minor modifications to use the double/byte methodsBut there are some changes: actualEquals is now describeDifference which returns a string rather than a boolean. I use that string to display the index at which arrays differ and to include both the [1 2 3] and 010203 formats for byte arrays. I ve added formatActualOrExpected which is like actualCustomStringRepresentation but is applied to the expected value as well as the actual. I ve added actualCustomStringRepresentationForPackageMembersToCall which I ve just realized our the float[]/double[] subjects  IterableSubjectWithInheritedToString can call instead of reimplementing it.Fixes https://github.com/google/truth/issues/335Fixes https://github.com/google/truth/pull/336Relnotes: Made `assertThat(array).isEqualTo(otherArray)` compare arrays contents (not array identity) even when the input wasn t statically known to be an array. Tweaked the format of array failure messages. Created by MOE: https://github.com/google/moeMOE_MIGRATED_REVID 187662296,pull up
Pulled out some common functionality from the GL2 text helper implementation.,pull up
Pulled makeRemoteRequest up,pull up
Move Languages Certificates and Year from Film To ContentPull up the languages certificates and year fields from Film to Contentalong with accessors and mutators in both simple and internal model.This is primarily for the LoveFilm CSV ingest.,pull up
Pull up BrandSummary field from simple Item to DescriptionSince series can have parent brands move the field which contains apiece of contents brand summary from Item to Description thesuperclass of Item and Playlist.,pull up
Pull up to AbstractRequestContext,pull up
Pull thumbnail code up to the core class.,pull up
Pull calcRevisionsFromBuild/Poll to AbstractClearCaseScm,pull up
Refactored to pull error log into its own class.,pull up
HV 520: Adding some JavaDoc aligning constructor signatures pulling type and name fields up to AbstractConstraintMetaData.,pull up
HV 1166 Pulling getTypeArgumentConstraints() up to ConstrainedElement,pull up
Pulled reusable code out of the ascii operation impl,pull up
Pulled out common code in my optimization tests into AbstractOptimizationTest.Refactored FippleFactor and Naf optimization tests to use AbstractOptimizationTest.,pull up
Pulled out Lucene specific code into Lucene parent class,pull up
NXP 10116 cleanup: pull up isConnectServerReachable() and remove useless override,pull up
Pulled out the atom event framework now we need to replace it.,pull up
Dheeru | 282 | Refactored by pulling up common transitional logic to base transition class,pull up
Dheeru | 543 | Pulling up common functionality (open/close container) from Pre Treatment & In Treatment controllers to base class,pull up
Pulled out non webapp specific code from WebAppContext into base class (BaseSiteMeshContext) in preparation to be reused by OfflineContext.Renamed WebAppContext.getRequestPath() to getPath() to be less web appy.,pull up
RakeTask.StoppedException RakeTask.run(monitor) and RakeTask.makeJob are pulled up to RunTask,pull up
Pull spunk restart into base class clean up restart usage.,pull up
Fix equality between ConfigObject of different typesBy pulling equals/hashCode up into AbstractConfigObject,pull up
Refactored and optimized batch vertex caches implsThis commit pulls common batch loading vertex cache code intoAbstractIDVertexCache and makes String and ObjectIDVertexCache extendthat abstract base class. LongIDVertexCache uses Colt primitivecollections internally and is not amenable to sharing code with theother Java collections based implementations.This commit also applies the optimization froma0cf0f11d8c4eaf436493f742789142d741ac06e to Object andLongIDVertexCache. However I ve only tested it forStringIDVertexCache.,pull up
pull line information up into NodeInfo,pull up
pull up `excluded` property into NodeInfo,pull up
Finish support for pulling modules,pull up
Refactor to pull up locale handling,pull up
add parameter to resume push or pull from a specified document for java clients,pull up
Added EmbeddedResourceHandler which allows static resources to be embedded inside a jar file. Common stuff has been pulled up into an AbstractResourceHandler. Also deleted dupe StaticDirectoryHttpHandler[Test]. The main purpose of this patch is to embed useful things like DNode straight into the Webbit release jar (or at least a special packaging of it).,pull up
pull up some functionality from ForceElevationCalculator into abstract superclass,pull up
pull getGroundState up into AbstractNetworkWaySeg.W.O.,pull up
Pull typeTextInFile() up to VimTestCase,pull up
o Pulled up AnalyzeMojo functionality into AbstractAnalyzeMojo to allow different Plexus annotations to be specified on subclasseso Changed AnalyzeMojo to @execute phase  test compile for standalone functionalityo Added AnalyzeAttachedMojo to @phase verify for participating in the build lifecycleo Improved Javadocgit svn id: https://svn.apache.org/repos/asf/maven/plugins/trunk@576809 13f79535 47bb 0310 9956 ffa450edef68,pull up
refactor: pull out an abstract base class for deploy mojosgit svn id: https://svn.apache.org/repos/asf/maven/plugins/trunk@1067120 13f79535 47bb 0310 9956 ffa450edef68,pull up
Pulled up more properties to the base type,pull up
Shift further method to parent,pull up
Set up a refactoring moving the base data methods to a base class.,pull up
ResourceFrame now provides default code for revertResource since it is now generic safe and every child was just using the exact same code (so this cuts out the duplicate code). Inheritors may override the method if a custom behavior is needed but this is not needed by any of the existing resource frames yet.git svn id: https://lateralgm.svn.sourceforge.net/svnroot/lateralgm/LateralGM/trunk@477 8f422083 7f27 0410 bc82 93e204be8cd2,pull up
Removing Property DuplicationMethodProperty and FieldProperty have a common superclass but had duplicated code between them. This commit reduces that duplication and pushes common code into the superclass while at the same time adding some additional tests for the functionality.,pull up
the declaration of types too can move up,pull up
FCREPO 839: Allow FeSL relationship resolver to use the resource indexRefactor existing code in prep for implementing RI based resolver movecommon code to abstract base class; remove unused methods.,pull up
Refactor scope updater to share common put methods with other executors,pull up
Moved v0 and s0 and associated methods into base class.,pull up
Push getVisualMotionState() into AbstractvisualModeThis used to be an abstract method so that the different visual modescould pass in the right selection factory but this is now all handledthrough the fixSelection() method.Moving the implementation to the superclass means all visual modes usethe same motions.,pull up
NXCM 5194: Moving method level upInitially I thought I ll need release to be runin the staging scenario but I realized this is notthe case. Closed staging repo is just fine as everythingelse,pull up
cleaned up the profusion of methods in OrientDB implementation. Removed exists() open() create() and put all that functionality into the constructor. Trying to keep the implementation as specific to Blueprints as possible so as not to allow users to depend on non interface based methods. TransactionsTestSuite still causing a problem with concurrent modification of HashMap.,pull up
rhbz1139950 move method to parent class,pull up
added bugfix NSMutableArray. Had limited testing so far. Someone please add the Javadocs. Removed the List methods from ERXMutabeArray (they are now in the superclass),pull up
Include Rentals EOModel in eogen configuration. Refactor EOs from the Rentals model to use superclass methods where possible. Add ERCoreUserInterface implementation to User entity and use this instead of the newly added AppUser entity. Remove AppUser entity from the Movies model and delete the related migration.,pull up
Refactored TCPIP (including NIO support) code for JGRP‑240. TCP_NIO no longer extends class TCP and ConnectionTableNIO no longer extends ConnectionTable. They instead share a common abstract class with shared methods.,pull up
Changes from Brian Remedios.Refactored UseIndexOfChar to extract common functionality into AbstractPoorMethodCall.git svn id: https://pmd.svn.sourceforge.net/svnroot/pmd/trunk@4442 51baf565 9d33 0410 a72c fc3788e3496d,pull up
Completed Method & Type property descriptors and refactored them under a common class that can filter by optional package prefixes. Matching test cases for same.Updated TypeMap to catch errors new test cases.Updated ClassUtil with new functionality for the new descriptors and restored lost indentation formatting.git svn id: https://pmd.svn.sourceforge.net/svnroot/pmd/trunk@6388 51baf565 9d33 0410 a72c fc3788e3496d,pull up
o Refactor the creation of title and summary for the report into a couple of common methods in the parent.git svn id: https://svn.apache.org/repos/asf/maven/plugins/trunk@543277 13f79535 47bb 0310 9956 ffa450edef68,pull up
Shift further method to parent,pull up
Removing Property DuplicationMethodProperty and FieldProperty have a common superclass but had duplicated code between them. This commit reduces that duplication and pushes common code into the superclass while at the same time adding some additional tests for the functionality.,pull up
Push getVisualMotionState() into AbstractvisualModeThis used to be an abstract method so that the different visual modescould pass in the right selection factory but this is now all handledthrough the fixSelection() method.Moving the implementation to the superclass means all visual modes usethe same motions.,pull up
BISERVER 5683 refactored GwtModelerWorkspaceHelper and ModelerWorkspaceHelper to not implement their auto model methods just inherit from BaseModelerWorkspaceHelper.,pull up
FCREPO 576: provide alternative to DBXML tidy up policy index config (single index config for all impls) push common xpath/helper methods up to abstract classes tidy up xpath generation for all resources (was dbxml specific syntax),pull up
FCREPO 839: Allow FeSL relationship resolver to use the resource indexRefactor existing code in prep for implementing RI based resolver movecommon code to abstract base class; remove unused methods.,pull up
Refactor scope updater to share common put methods with other executors,pull up
Refactored TCPIP (including NIO support) code for JGRP‑240. TCP_NIO no longer extends class TCP and ConnectionTableNIO no longer extends ConnectionTable. They instead share a common abstract class with shared methods.,pull up
Changes from Brian Remedios.Refactored UseIndexOfChar to extract common functionality into AbstractPoorMethodCall.git svn id: https://pmd.svn.sourceforge.net/svnroot/pmd/trunk@4442 51baf565 9d33 0410 a72c fc3788e3496d,pull up
Completed Method & Type property descriptors and refactored them under a common class that can filter by optional package prefixes. Matching test cases for same.Updated TypeMap to catch errors new test cases.Updated ClassUtil with new functionality for the new descriptors and restored lost indentation formatting.git svn id: https://pmd.svn.sourceforge.net/svnroot/pmd/trunk@6388 51baf565 9d33 0410 a72c fc3788e3496d,pull up
o Refactor the creation of title and summary for the report into a couple of common methods in the parent.git svn id: https://svn.apache.org/repos/asf/maven/plugins/trunk@543277 13f79535 47bb 0310 9956 ffa450edef68,pull up
Combine processing of primary sponsorsXml s billstat and Ldspon files both specify the primary sponsor. Sobifiles also need to specify the primary sponsor. A new method has beencreated in the AbstractDataProcessor to combine all of this processingat one point to reduce code duplication,pull up
Removed duplicate method implementations.,pull up
Move relatedLinks from Content to DescribedMoves the `relatedLinks` field and related methods up the hierarchy to__Described__ from __Content__ so a __Person__ has can also haverelated links.,pull up
Added getGUILayout() as a full method higher up the infrastructure removing a lot of redundant code further down.git svn id: https://www.evllabs.com/svn/jgaap/trunk@162 bcaee279 2e94 4b2e be96 a1d7c6f3fc26,pull up
* add better support for keypath visibility properties* convert no details eo s to id   pk format instead of >pk< format* attempt to load rest delegate names from properties (ERXRest.<EntityName>.delegate)* attempt to load default rest delegate names <EntityName>RestEntityDelegate to make registration easier* Put request handler session fixes from Ajax s JSONRequestHandler into RestRequestHandler* Added some convenience registration methods to ERXRestRequestHandler* Added some misc javadoc* 1.5ified* moved some generic rendering methods up higher to support generating alternative output formats,pull up
slowly beefing up method symbol tablegit svn id: https://pmd.svn.sourceforge.net/svnroot/pmd/trunk@1155 51baf565 9d33 0410 a72c fc3788e3496d,pull up
This patch merges the identical methods from the JDBC1 and JDBC2connection implementations (org.postgresql.jdbc[1|2].Connection) intotheir superclass (org.postgresql.Connection).It also changes the close() methods of Connection and PG_Stream so thatPG_Stream no longer is responsible for sending the termination packet  X to the backend. I figured that protocol level stuff like that belonged inConnection more than in PG_Stream.Anders Bengtsson,pull up
Attached is a patch to remove some redundant code in the JDBC driver.* Merges identical code from org.postgresql.jdbc[1|2].Statement intoorg.postgresql.Statement.* Moves escapeSQL() method from Connection to Statement (the only placeit s used)* Minor cleanup of the new isolation level stuff.* Minor cleanup of version string handling.Anders Bengtsson,pull up
Adds license and javadoc to the matrix factorizations. Includes wrappers around the matlab and octave implementations.Abstracts some common SVD functionality to a base class.Unit tests NMF and SVD reduction methods.Make some helper functions public.,pull up
Push getVisualMotionState() into AbstractvisualModeThis used to be an abstract method so that the different visual modescould pass in the right selection factory but this is now all handledthrough the fixSelection() method.Moving the implementation to the superclass means all visual modes usethe same motions.,pull up
added bugfix NSMutableArray. Had limited testing so far. Someone please add the Javadocs. Removed the List methods from ERXMutabeArray (they are now in the superclass),pull up
o Refactor the creation of title and summary for the report into a couple of common methods in the parent. git svn id: https://svn.apache.org/repos/asf/maven/plugins/trunk@543277 13f79535 47bb 0310 9956 ffa450edef68,pull up
How I resolved: * Applied the same fix to Datagram transport * Backported all fixes to 1.0 * Moved some common methods to BaseIoSession (AbstractIoSession) git svn id: https://svn.apache.org/repos/asf/mina/tru,pull up
o Added some missing JavaDoc o Moved the getProcessor() method back in the super class o Added a constructor to initialize this IoProcessor member o Minor refactoring git svn id: https://svn.apache.org/repos/asf/mina/trunk@912261 13f79535 47bb 0310 9956 ffa450edef68,pull up
Pushed a little tesselating code up into the common class.,pull up
Significantly restructured the shader package to make it easier to understand and extend.,pull up
Moved  shares  to Transaction super class,pull up
created abstract form item to move common code into and changed form item hierarchy to inherit form DataClass.,pull up
Refactored for improved modularity and extensibility. General cleanup. Updated unit test correspondingly.,pull up
move groovy stuff in a special class to make it reusable,pull up
Refactored out some common code.,pull up
Moved a bunch of setters/getters to the base class git svn id: https://svn.apache.org/repos/asf/maven/surefire/trunk@1368021 13f79535 47bb 0310 9956 ffa450edef68,pull up
Refactored last 2 tests to use common base class,pull up
Minor canidate controller refactoring Added an abstract superclass to house common functionality. This fixes some previously nasty cut & paste code.,pull up
Profiles refactored shared elements in AbstractProfile. WARC Refers To Date now set as long and correctly formated in getWarcHeaders.,pull up
Moved common code between cascading & merging daos to an abstract class. git svn id: https://source.jasig.org/person directory/trunk@2659 f5dbab47 78f9 eb45 b975 e544023573eb,pull up
Move common code to AbstractDataComposer,pull up
RF  samples refactor,pull up
Remove subclasses of VertxHandler and only keep this class,pull up
code cleanup of VJSObject.,pull up
removing all google inject in preference for javax.inject,pull up
Refactor tracing feature into a base class,pull up
Added navigation links to resource calls that don t contain selectors. Updated tests to look for navigation links. Refactored tests so springmvc and resteasy demos use delegate to parent package  ensuring consistency between tests.,pull up
[MJAVADOC 33] refactor out base class  make jar not aggregate  git svn id: https://svn.apache.org/repos/asf/maven/plugins/trunk@388169 13f79535 47bb 0310 9956 ffa450edef68,pull up
Massive refactors. This list isn t complete  but should give you an idea:  A) many things in lombok.eclipse moved to lombok.core to enable reuse with lombok.javac.  B) lombok.javac works now similarly to eclipse s model: We first make big ASTs that are bidirectionally traversable  then we walk through that for annotations.  C) Instead of getting an annotation instance  you now get an object that is more flexible and can e.g. give you class values in an enum as a string instead of a Class object  which may fail if that class isn t on the classpath of lombok.  D) sources to the internal sun classes for javac added to /contrib.,pull up
Fixed minor issues  refactored configuration layout  added new integration tests  upgraded to Thymeleaf 2.1.1,pull up
remove checks for WO54 and reflection for pre WO54 APIs,pull up
Refactored Composite into AbstractComposite  Composite  and DynamicComposite  to disambiguate usage,pull up
[WAGON 350] add unit test for wagon ssh with an embedded ssh server : refactor to be able to share test with scp external module  git svn id: https://svn.apache.org/repos/asf/maven/wagon/trunk@1174025 13f79535 47bb 0310 9956 ffa450edef68,pull up
Reorganize to support transport clients,pull up
Removing Property Duplication  MethodProperty and FieldProperty have a common superclass but had duplicated code between them. This commit reduces that duplication and pushes common code into the superclass  while  at the same time  adding some additional tests for the functionality.,pull up
"Consolidate SenateSiteDumpId class  Previously  there were several types of SenateSiteDumpId that id ed several different types of dump.  Each of these was reflected in an implementation of SenateSiteDumpId.  For simplicity s sake  we reduced this to one single type of dump: the year/session dump.  This commit simplifies the SenateSiteDumpId class and all of its uses to only handle this one case.    Remove SenateSiteDumpSessionId.   Add dumpTime and year fields to SenateSiteDumpId.   Modify Json parsing classes to read the """"year"""" field instead of   """"session"""" to reflect changes in dump code.   Remove range abstract method.  This was primarily used to get updates   ranges and to get a reference date time (the end of the date range).   The updates ranges are no longer used and the reference date time can   be determined by the dumpTime field. ",pull up
Cleanup and thread view updates,pull up
Refactoring   pushed property mgmt functionality into new superclass now shared by the report renderers  git svn id: https://pmd.svn.sourceforge.net/svnroot/pmd/trunk@7294 51baf565 9d33 0410 a72c fc3788e3496d,pull up
Refactored and improved loading of inventories and item schemata  See koraktor/steam condenser 162,pull up
cleanup,pull up
[BACKLOG 1795]   using isEmpty instead of    null for several String properties.  Removing auto levels when creating a measure for the same column.  correcting summary message when hierarchy is empty.,pull up
New files  or files moved from other locations,pull up
Hopefully the last of the big exceptions refactorings. I went through all of the places we re adding context to our Errors object and made sure we re never doubling up    specifing the same injection point or key multiple times.  The new errors have nice  at  lines for parameters  fields and linked bindings. Hopefully this makes it easier to follow the stacktraces. Additional context (such as the binding s origin in a module) could be added later if desired. Currently we have module specific sources in CreationExceptions  and plain old binding sources elsewhere. The end result is messages that can look like this:  com.google.inject.ProvisionException: Guice provision errors:  1) Error injecting constructor  java.lang.UnsupportedOperationException   at com.google.inject.ProvisionExceptionTest$RealD.<init>(ProvisionExceptionTest.java:284)   at binding for com.google.inject.ProvisionExceptionTest$RealD.class(ProvisionExceptionTest.java:284)   at binding for com.google.inject.ProvisionExceptionTest$D.class(ProvisionExceptionTest.java:1)  1 error  git svn id: https://google guice.googlecode.com/svn/trunk@652 d779f126 a31b 0410 b53b 1d3aecad763e,pull up
remove phases from BindingProcessor  refactor so that two different classes do the two different bits  with an abstract superclass managing the shared pieces.  git svn id: https://google guice.googlecode.com/svn/trunk@1527 d779f126 a31b 0410 b53b 1d3aecad763e,pull up
[refactor]: extract write and send method,pull up
rhbz1110627 rhbz1038852   Squashed commit for zanata init command  https://github.com/zanata/zanata client/pull/27  commit 7ab5819cefde4b76a6256cc5ecd5e15435b5df73 Author: Patrick Huang <pahuang@redhat.com> Date:   Thu Aug 21 12:14:46 2014 +1000      rhbz1110627   handle not exist src dir  commit 8dea609e2c52d70bd6c7db501a5d946e3eea7215 Author: Patrick Huang <pahuang@redhat.com> Date:   Thu Aug 21 11:55:58 2014 +1000      rhbz1110627   check server is compatible to init command  commit 61fe130f878e7c29798264c9f8188726730700f4 Author: Patrick Huang <pahuang@redhat.com> Date:   Tue Aug 5 14:57:43 2014 +1000      messages change  commit b493a38bd6c1fc71b4a2a2d61b2c4d586717a96e Author: Patrick Huang <pahuang@redhat.com> Date:   Tue Aug 5 12:25:40 2014 +1000      change message template to match prompt  commit 93173dd4bc829334827a29c759754355889a4584 Author: Patrick Huang <pahuang@redhat.com> Date:   Tue Aug 5 10:25:16 2014 +1000      fix exception type and tests  commit cc4b7d2c62042752e3fc20b58964c28c2ff43e34 Author: Patrick Huang <pahuang@redhat.com> Date:   Tue Jul 29 14:03:11 2014 +1000      change copyright year and a few messages  commit 94ec9adde1e5dbec3d8aa777f4c3736992493d31 Author: Patrick Huang <pahuang@redhat.com> Date:   Tue Jul 29 12:23:29 2014 +1000      improve message  commit f383bd89ab1f3d2e36de8169fee851cbd0533263 Author: Patrick Huang <pahuang@redhat.com> Date:   Tue Jul 29 12:22:04 2014 +1000      remove unique from project id prompt  commit b833d7608cbddc6dbc8e82f5d6a9a07cbf280f79 Author: Patrick Huang <pahuang@redhat.com> Date:   Tue Jul 29 12:15:48 2014 +1000      rhbz1110627   handle when there is no server url in user config  commit cec96f250a5a8ff0ba9588986bb2a65a1d137f9e Author: Patrick Huang <pahuang@redhat.com> Date:   Tue Jul 29 11:51:39 2014 +1000      refactoring  commit 3c4f815f66d48fa539df07606091435a0939d2d5 Author: Patrick Huang <pahuang@redhat.com> Date:   Tue Jul 29 09:15:46 2014 +1000      rhbz1110627   rename method and static import  commit f9e57f8d5fb1de5dd0bdc29f32a5ebc14b64d32c Author: Patrick Huang <pahuang@redhat.com> Date:   Tue Jul 22 08:48:25 2014 +1000      rhbz1110627   refactoring  commit 5909e153ad6fa058e672a994b7b756990b62a628 Author: Patrick Huang <pahuang@redhat.com> Date:   Mon Jul 21 16:03:24 2014 +1000      rhbz1110627   extract methods in UserConfigHandler  commit 04286baa5eab756dc9d025ebbf391046537db253 Author: Patrick Huang <pahuang@redhat.com> Date:   Mon Jul 21 15:58:43 2014 +1000      rhbz1110627   refactor project  source and trans prompt  commit cdf0efc53baeac5192484c7d45548161d539785d Author: Patrick Huang <pahuang@redhat.com> Date:   Mon Jul 21 15:15:39 2014 +1000      add copyright to files  commit d65ed059d8558ab08bca3baa4da21c084110bf98 Author: Patrick Huang <pahuang@redhat.com> Date:   Mon Jul 21 15:10:47 2014 +1000      rhbz1110627   extract methods in ProjectConfigHandler  commit 65a437ddda8afaee24f3880410e53a0982ea7055 Author: Patrick Huang <pahuang@redhat.com> Date:   Mon Jul 21 15:08:35 2014 +1000      rhbz1110627   extract methods in InitCommand  commit c6dbf0b40ef1471ab3b8980d17c8c471561954cc Author: Patrick Huang <pahuang@redhat.com> Date:   Mon Jul 21 14:40:38 2014 +1000      remove UpdateChecker from production code (pending story and RFE)  commit 0fa26af4e5a4068ad5bd5ccbf9c3b92a4c85f4b0 Author: Patrick Huang <pahuang@redhat.com> Date:   Mon Jul 21 14:32:49 2014 +1000      rhbz1110627   missing resource key will log an error  commit 471e5863a49253235892f2f118f4614f7962f0ec Author: Patrick Huang <pahuang@redhat.com> Date:   Mon Jul 21 14:23:40 2014 +1000      rhbz1110627   rename methods in OptionMismatchChecker  commit 19c50ebebd8bc60935deb72469b99268ee973634 Author: Patrick Huang <pahuang@redhat.com> Date:   Mon Jul 21 14:15:25 2014 +1000      rhbz1110627   rename class Mode to DisplayMode  commit ac0cb550bff27c6c647091b8be2815f1299e8c06 Author: Patrick Huang <pahuang@redhat.com> Date:   Mon Jul 21 14:09:07 2014 +1000      rhbz1110627   rename class  commit 8804142bb0c9474bfc4f811da169df2bae7cb204 Author: Patrick Huang <pahuang@redhat.com> Date:   Mon Jul 21 14:07:27 2014 +1000      rhbz1110627   refactor InitCommand: extract method etc  commit 51a6f99f27e55e207cb3f43e0602eb1e9a0553ef Author: Patrick Huang <pahuang@redhat.com> Date:   Mon Jul 21 14:00:19 2014 +1000      rhbz1110627   refactor class that expects user input  commit 9db3a2696f6dcb2e0de58b2276e804d91ade5a09 Author: Patrick Huang <pahuang@redhat.com> Date:   Thu Jul 17 11:55:58 2014 +1000      rhbz1110627   add color output and change some messages  commit 85f9c01a297683251383f7725fc63c831b19ee85 Author: Patrick Huang <pahuang@redhat.com> Date:   Wed Jul 16 09:38:05 2014 +1000      rhbz1110627   able to filter project in long list  commit a8fa92300fee028019a20e2b45acd76aa3d3559f Author: Patrick Huang <pahuang@redhat.com> Date:   Fri Jul 11 13:09:08 2014 +1000      rhbz1110627   check key availability in resource bundle  commit 99a93043201a3ffe34b2596292293de537861576 Author: Patrick Huang <pahuang@redhat.com> Date:   Wed Jul 9 15:51:01 2014 +1000      rhbz1110627   check if there is newer version of client available  commit 5fe89e2a7e90cb6fc15e7fa2906cf53b15c9daf6 Author: Patrick Huang <pahuang@redhat.com> Date:   Thu Jul 3 11:11:12 2014 +1000      rhbz1110627   externalize strings to properties file  commit e57037a32939e0b2629ebfebc56e38b0a9eb289d Author: Patrick Huang <pahuang@redhat.com> Date:   Tue Jul 1 13:36:48 2014 +1000      rhbz1110627   add init to ZanataClient  commit 8c0c01d3b7c8033651b8fa119b04c3add09dcc4f Author: Patrick Huang <pahuang@redhat.com> Date:   Tue Jul 1 13:36:23 2014 +1000      rhbz1110627   fix minor issues and print what s next suggestion to user  commit 60e557a46f9f6682b3054f32cba601f5137f6618 Author: Patrick Huang <pahuang@redhat.com> Date:   Tue Jul 1 11:28:57 2014 +1000      rhbz1110627   refactor and clean up code  commit 549f095f51d81686845c8ced7692b96600d6769a Author: Patrick Huang <pahuang@redhat.com> Date:   Tue Jul 1 10:53:38 2014 +1000      rhbz1110627   refactor to extract project and version prompt to separate classes  commit 769caf5c987988f8b13a3423e0ff7d19bdf9ce14 Author: Patrick Huang <pahuang@redhat.com> Date:   Tue Jul 1 09:32:06 2014 +1000      rhbz1110627   refactor extract project config handling to separate class  commit d001f2be0a906b1f9eb3ed4c228f42fede14edc7 Author: Patrick Huang <pahuang@redhat.com> Date:   Mon Jun 30 16:59:41 2014 +1000      rhbz1110627   refactor extract to separate class  commit 1f11d50717658730f027d1733dc0404e1619cca2 Author: Patrick Huang <pahuang@redhat.com> Date:   Mon Jun 30 16:37:16 2014 +1000      rhbz1110627   refactor test and mock server  commit 11c2d46b65a46d0ec297767e5fc5213644031bdc Author: Patrick Huang <pahuang@redhat.com> Date:   Fri Jun 27 15:59:06 2014 +1000      rhbz1110627   add init mojo as maven goal  commit 531f2cc2769b27ef74f7ba244c8ded383c3359c0 Author: Patrick Huang <pahuang@redhat.com> Date:   Fri Jun 27 15:57:29 2014 +1000      rhbz1110627   prompt user for trans dir  commit 96a86230847a230221a027a54500c9da66d7c41e Author: Patrick Huang <pahuang@redhat.com> Date:   Fri Jun 27 14:40:27 2014 +1000      rhbz1110627   use index number to select project and version  commit 49cb2b632dfc8633baf7d514d275e5b6ae6669dc Author: Patrick Huang <pahuang@redhat.com> Date:   Fri Jun 27 14:08:59 2014 +1000      rhbz1110627   src dir  includes and excludes prompt  commit 9061f89487e2a52cb3e400f2ff7a2982ac3c3fd7 Author: Patrick Huang <pahuang@redhat.com> Date:   Fri Jun 27 12:20:09 2014 +1000      rhbz1110627   refactor ZanataProxyFactory to allow not eager REST version call  commit 508ec9dd508f4e1768682806ddbc85361f24c588 Author: Patrick Huang <pahuang@redhat.com> Date:   Thu Jun 26 14:17:18 2014 +1000      rhbz1110627   add includes and excludes to zanata config  commit c48414a13da6cc787402d28a2ec3c3727b513691 Author: Patrick Huang <pahuang@redhat.com> Date:   Thu Jun 26 10:59:36 2014 +1000      rhbz1110627   pull up includes and excludes to project configuration  commit 2d1a9b34bd110b5b61b1ca419a1535510a60a194 Author: Patrick Huang <pahuang@redhat.com> Date:   Thu Jun 26 10:26:46 2014 +1000      rhbz1110627 rhbz1038852   add src dir and trans dir to zanata config  commit 31319e5ef9629e8b6393658a093c4a4f21661ac8 Author: Patrick Huang <pahuang@redhat.com> Date:   Thu Jun 26 09:13:45 2014 +1000      check for potential wrong src dir in podir project  commit 8e0595017a6d362a9edeb3f8a0d86be6d03cff84 Author: Patrick Huang <pahuang@redhat.com> Date:   Mon Jun 23 09:26:25 2014 +1000      rhbz1110627   create init command  commit c27ebac5da785fd3fc2f31c81212bbecdc9e9709 Author: Patrick Huang <pahuang@redhat.com> Date:   Wed Jun 25 10:17:02 2014 +1000      add friendlier message to inform user server is not up,pull up
move handling of command hooks to top of command hierarchy,pull up
Refactoring to support new test cases in localdiscovery (new) test bundle,pull up
Added type conversion for constants. Optimized ReferenceCache.   Removed null check from ContainerImpl.getInstance(). Added Container.hasBindingFor() to provide comparable functionality.  Made Key public.  git svn id: https://google guice.googlecode.com/svn/trunk@5 d779f126 a31b 0410 b53b 1d3aecad763e,pull up
refactored Parcel and ParcelDTO (now uses AutoValue) central uses Parcel directly,pull up
HV 1103 Removing remaining switches on Java version,pull up
Refactor to add SimpleJavaTypeNode based class for TypeNode interface.  Extracted an AccessNode interface and added base classes SimpleJavaAccessNode and SimpleJavaAccessTypeNode (will need this later one as I expand scope of Type Resolution).  Note: For now please do not change usages of AccessNode to be usages of SimpleJavaAccessNode so that class hierarchy compatibility is preserved.  We can do that post 4.2.  git svn id: https://pmd.svn.sourceforge.net/svnroot/pmd/trunk@5856 51baf565 9d33 0410 a72c fc3788e3496d,pull up
PR: MIDEA 6  Created separate goals for project  module and workspace.  Removed the unit test as it is deprecated with the current form of the plugin. I ll be creating a new more improved set of unit tests anyway.  git svn id: https://svn.apache.org/repos/asf/maven/plugins/trunk@382603 13f79535 47bb 0310 9956 ffa450edef68,pull up
Add Branch Coverage Column including refactoring common coverage column code to an abstract class,pull up
484359 Refactor marker resolutions and quick fixes  Change Id: Ibdcc4cf75cfbb4fd49c27ba3ce187cfb932c47cb Signed off by: Anton Tanasenko <atg.sleepless@gmail.com>,pull up
Added function executions element to gfe data namespace plus more cleanup,pull up
feat: Implement CoreInputLwjgl; chore: minor CoreInput spi refactoring.  Add CoreInputLwjgl  CoreKeyEventLwjgl  CoreMouseEventLwjgl  LwjglMouseEventDriver classes for implementing LWJGL input backend.  Remove several unnecessary methods from CoreInputEvent  CoreKeyEvent  and CoreMouseEvent interface.  Move enable/disable default dispatcher methods to AbsractCoreInput.  Add logging to CoreInputJogl.  Ran auto format on several incorrectly formatted source files.,pull up
Add support for Infinispan remote listeners  * Added support for ISPN remote listeners * Code refactoring of cache listener * Added ISPN 7.0 HotRod service and server config file,pull up
DependencyGraphs cleaned and started to remove removed projects,pull up
Remove duplicate code when handling PING  + simplified constructor,pull up
output describe environments to file as json   AbstractNeedsEnvironment fixed (sort of)   Lookup Logic moved to AbstractBeanstalkMojo instead   DescribeConfigurationSettings/templates working with optionals   CreateEnvirionment: Drop cnamePrefixToCreate    HG                                                                                                                                                                                                                                                                 branch : cnamePrefixForEnvironment,pull up
"Bugfix: JENKINS 10638 Enhancement: JENKINS 10637 Bugfix: JENKINS 10719  including    New feature: Ignore parent stream   can now tell a project to ignore changes made in the basis stream of the actual stream being built.  This can signficantly reduce the time the plugin takes talking to the accurev server.    New feature: Get streams singly   more of an accurev client workaround really; the plugin used to call the server and get """"the streams"""" which included absolutely everything under the sun  and this turns into many megabytes of data  every poll and every build.  This server setting says to get just the streams we care about (our stream  our parent stream etc)  albeit at the cost of potentially making more than one call to the server. Enhancement: Logging improved  which should make debugging accurev client failures a little easier. Enhancement: Now weakly caches the XmlPullParserFactory. Refactor: Extracted out code that runs the accurev client command into its own class  reducing duplicated code and making parsing of command output more consistent. Refactor: Split out many of AccurevSCM s inner classes into their own files in an attempt to make the main class more maintainable. ",pull up
Lots of refactoring    Moved unit tests around    Added support for object expansion    Additional code clean up,pull up
BISERVER 8103: Intitial refactor of editor classes to support block out periods,pull up
350414 separate quick fix for workspace mapping; cleanup  Signed off by: Igor Fedorenko <igor@ifedorenko.com>,pull up
Move ChangeActionTest.doTest() to VimTestCase.  This method is convenient in other tests as well.,pull up
In progress: Using MassiveCraftCore and Allman indentation style and minor refactoring.,pull up
SC  ESILCO 191 some refactors,pull up
refactored PDPRoadModel system,pull up
Clean up meta processing.  Signed off by: Gordon Smith <gordon.smith@lexisnexis.com>,pull up
* GUI:    now preserve last file filter used on load image dialog.    fixed multiple plugin launch from Ribbon plugin button. * ROI:    fixed point removing on polygon.    now selected ROI keep their color (only border is modified).    removed  selected color  property.    added  opacity  property. * ImageJ wrapper: TRACED_ROI (ImageJ) are now converted to ROI2DArea.,pull up
Refactor a bit to help reduce redunancy from  110,pull up
tidy up: remove interface SimulationInput,pull up
Changing EventDrivers to extend other EventDrivers and abstract EventDrivers in place of using underlying events parameters. This will improve speed and reliability This will also simplify logic for EventDriver aware Events,pull up
Make generics usage in MemoryBackend+related much saner  (That means removing as much as possible  because generics suck),pull up
partially moved iCalendar to separate package,pull up
Move video_info to MediaEntity from ExtendedMediaEntity  (for extended_tweet.entities.media and entities on DMs),pull up
XHR transport refactoring and buffer alloc optimization,pull up
moved accessors from TCP/TCP_NIO to BasicTCP,pull up
class hierarchy cleaned,pull up
fixes  14: files are named after JTL results file again. Major internal refactoring of Writer structure  added separate tests,pull up
eliminated some dupe code minor code cleanup,pull up
"Application             * entirely reworked the """"Sequence / Image operation"""" band :     new sequence resize feature.     new C/Z/T operations.     new color conversion feature.     general improvements. * better plugin error report. * better colormap preservation when switching from 2D to 3D canvas. * better Icy to ImageJ ROI conversion. * minors improvements here and there. * modified ROI2DPoint so it now intersects point and do not contains it (more consistent with other ROI). * fixed a minor bug in ROI.getBooleanMask() method. * fixed a minor bug in ROI2D.contains() and ROI2D.intersects() methods. * others bugs fixes.   Developer           * Loader :     added methods to hide the progress bar.     added  getMetaData(File file)  method to retrieve the metadata of an image file.     added  loadImage(File file  int z  int t)  method to load a single image from multi image file. * added IcyBufferedImage.copyData(src  int srcChannel  int dstChannel) to only copy data for a specified channel. * added ExcelTable component to display excel type table. * added abstract method  getViewComponent()  to IcyCanvas so we can always retrieve the display component in a Canvas. * improvements on  SequencePreviewPanel  and  SequenceRangePreviewPanel  components. * added IcyBufferedImageUtil class (general IcyBufferedImage tools). * added methods to SequenceUtil class. * fixed cursor preservation on Canvas2D. * added MainInterface.getSequences(String name) to retrieve sequence by name. * fixed a bug in ImageDataIterator. * added a command line option to remove splash screen. * lot of refactoring and source reorganisation (check deprecations).",pull up
Move versions from Item to Content,pull up
moved canAccess check to MemberInfo,pull up
Refactor JwtProfile and OidcProfile ( 843),pull up
Added move/copy operation for Requirement mappings,pull up
Moved all except bsp()  setup()  and clean() to abstract class GraphJobRunnerBase.  git svn id: https://svn.apache.org/repos/asf/hama/trunk@1382652 13f79535 47bb 0310 9956 ffa450edef68,pull up
Moved more muck to TerminalSupport,pull up
SRAMP 431 moved s ramp client/s ramp server/s ramp wagon integration tests into s ramp test  refactored tests for Arquillian  removed RESTEasy test and TJWS dependencies,pull up
ARTIF 311 extend/redefine coremodel.xsd to add artificer:comment element in BaseArtifactType  split up XJC generation scripts,pull up
Code refactoring in SPRedirect and SPPost valves. Fixed the error page redirect.,pull up
boleto  refactoring tirando interface Datas,pull up
Ended up reworking a lot of the group structures *  Formation and Party now extend ActorGroup *  Inventories are now objects of their own instead of just a HashMap *  Now formations and parties have inventories *  Inventories can be merged to make things easier when adding items after a battle is won *  Battle parties now share the same inventory as their parent party  no longer must I be referencing the engine s party instance to work with items *  You can no longer statically load a party from file  you must first create a party instance then load from file into that instance.,pull up
Fixed  104; cleaned up some classes,pull up
RF add unique&copyable enforcements + some clean up in fieldType hierarchy,pull up
moved accessors from TCP/TCP_NIO to BasicTCP,pull up
refactor JOGLTargetFixedFunction common code to AbstractJOGLTarget,pull up
Abstracted and redesigned the Joiner classeS code (now they are consolidated in one place)  the adaptive joiners are missing though + Overall project code cleanup and formatting,pull up
[FIXED   HUDSON 5574] Removing existing snapshot views often fails [FIXED   HUDSON 4569] Use  cleartool setcs  current  instead of  cleartool update    Better handling of job renaming/deletion and behaviour regarding custom workspace   Plugin will be more resilient in case of existing view tag or view path in the way. Instead of failing  it will remove the view tag and/or rename the view path.   UCM : view config spec should be more consistently sync ed with stream   Dev : new unit tests to cover addition/removal of load rules on an existing view  git svn id: https://svn.dev.java.net/svn/hudson/trunk/hudson/plugins/clearcase@29961 71c3de6d 444a 0410 be80 ed276b4c234a,pull up
SplunkExport  and ImportTool inheirits from SplunkTool.  Removed the duplication between the SplunkExportTool and SplunkImportTool.,pull up
Block2 Option for servers  both Block options for endpoints  bugfix for empty option as last message component  and some code cleanup,pull up
moved parts of the CompoundPrologTerm Implementation into PrologTerm,pull up
DifferenceEngine test refactoring   part 1.,pull up
Removed the obsolete Invenio search handler,pull up
more refactoring of iCalendar property and parameter classes,pull up
Refactor batch test tools ( 484).  * Add simple constructor. * Support model transformer.,pull up
refactor scp/sftp wagon into a common base class  git svn id: https://svn.apache.org/repos/asf/maven/wagon/trunk@312531 13f79535 47bb 0310 9956 ffa450edef68,pull up
Tests: Cleanup and rearrange,pull up
Refactor main CPD class: migration of command line arg handling to separate CPDConfiguration class similar to how PMD does it.  Will eventually formalize the parameters in the same way.  git svn id: https://pmd.svn.sourceforge.net/svnroot/pmd/trunk@7648 51baf565 9d33 0410 a72c fc3788e3496d,pull up
refactoring graphbase and related classes  and adding meaningful errors,pull up
Istvan s refactoring suggestion was done.,pull up
reorg and refactoring of hashCode and equals methods,pull up
Cleaning up workers   inherit from a common base.,pull up
SC QCADOO 133 prioritization and data access refactoring,pull up
Divide Color class to three classes (Color interface  RGBColor class  HSBColor class). Remove ColorMode. Refactoring many sources.,pull up
extracted majority of caching implementation to TimedCache class which can be extended for different stores. might be good to move the store part to use composition in future,pull up
Refactoring  +Tasks introduced + Single scheduling scheme (hybrid of periodic and triggered) + Scheduler + Executor redone,pull up
cleaning up,pull up
removed the pointless User interface and fixed logging messages in ControllerImpl,pull up
FACES 1898 Develop alloy:dialog  alloy:outputTooltip  and alloy:popover components (Added abstract tags in the components ext.xml to avoid unnecessary copy/paste. Moved headerText and autoHide from hidden attributes to generated code by specifying <yui>true</yui> and a <yuiName> for both of them. In OutputTooltip changed the cssClass attribute to be the yuiName of the styleClass attribute. Overrode encodeCssClass() to utilize encodeNonEscapedString().),pull up
* Added ErrorReportFrame for easier generic report. * Major changes in ROI classes (WARNING):    ROI class has more methods.    better 3D  4D and 5D ROI support.    better BooleanMask integration in ROI.    many others changes related to ROI and BooleanMask in general. * Base kernel ROI are now plugins. * Point3D / Point4D / Point5D classes improvements. * Rectangle3D / Rectangle4D / Rectangle5D classes improvements. * Colormap tabs are now colored to reflect the channel colormap. * Prelemenary Bio Formats automatic error report. * Added many color conversion methods and tools in ColorUtil class. * Added Overlay.isAttached(Sequence) method. * Added ByteArrayConvert.read/writeXXX() methods (handy to serialization). * Rewrote SequenceChooser class (cleaner and updated to new method). * Removed the useless ROI tooltips. * Severals fixes and tweaks. * Some refactoring.,pull up
HV 274 Added documentation and moved message  groups and payload into the ConstraintDef base class  git svn id: https://svn.jboss.org/repos/hibernate/validator/trunk@19639 1b8cb986 b30d 0410 93ca fae66ebed9b2,pull up
DF ESILCO 483   Fixed problem with overriding all records with given pallet number instead of selected ones when moving between storage locations,pull up
observer/observable pattern for UI view; interfaces Moveable and MoveableContainer; refactoring (mega commit due to problems with remote branching),pull up
Refactoring,pull up
Added lookup tables and caches  removed unecessary build files  modified database to include a preferences table  and tested.,pull up
Refactoring Java code generation utils.,pull up
SGF 18 + added basic lookup factory bean + refactored existing schema + added namespace parsers + added integration tests,pull up
refactor code to simplify the resource handling,pull up
Initial commit of inline content refactoring,pull up
Refactoring model for better abstraction. Lots of duplicat functionality from OPMObject and OPMProcess united in OPMThing,pull up
First iteration at removing code duplication,pull up
Refactor Math defineReadOnlyProperty and Math defineNonEnumerableProperty for use in JSON,pull up
refactored tests to make them more readable,pull up
NXP 7279: cleanup rights on public / private Social Workspace. Cleanup unit tests,pull up
Refactored FilterControls  moving some logic in the superclass.,pull up
Factor out common unit test code. It looks like the code might have been designed to be more generic but was never abstracted. I know that the swing interface to JUnit  JRunnder  sometimes causes problems since it uses its own class loaded. But since we use ant here there is no problem.   git svn id: https://svn.apache.org/repos/asf/jakarta/commons/proper/validator/trunk@140088 13f79535 47bb 0310 9956 ffa450edef68,pull up
Updated dialog to edit account transactions  This change adds a dialog that can edit deposits  removals  interest  taxes  tax refunds  fees and dividends.  Issue:  14,pull up
Added HistogramOperationStats  and refactored bar chart generation * mean and stddev retrieved from HistogramOperationsStats seems sometimes suffering from some HdrHistogram bug,pull up
[LOGTOOL 21] Initial work for supporting the new @Param annotation with some major refactoring.,pull up
Created Matrix3x3   Homography new extends Matrix3x3,pull up
FACES 2201 Bridge does not remove the id of the PortletNamingContainerUIViewRoot from the list of execute and render ids from AjaxBehaviors (backport compatibility layer / minimize diffs across branches),pull up
o Added some missing JavaDoc o Moved the getProcessor() method back in the super class o Added a constructor to initialize this IoProcessor member o Minor refactoring  git svn id: https://svn.apache.org/repos/asf/mina/trunk@912261 13f79535 47bb 0310 9956 ffa450edef68,pull up
Move getEntries() to AbstractVector  git svn id: https://svn.apache.org/repos/asf/incubator/hama/trunk@701970 13f79535 47bb 0310 9956 ffa450edef68,pull up
First refactor of TAL support,pull up
wcet: Refactor supergraph,pull up
Refactor to use interfaces in core model  for easy GWT replacement,pull up
New jDEECo core implementation  TODO: +tests +Runtime.deploy +JPF   RuntimeJPF +DiscreteScheduler +KnowledgeRepository + KnowledgeManager refactoring,pull up
support for loading schema and dataset based on CQL   removed dependencies from hector in CQL related classes,pull up
removing interface on seam component: pnly use interfaces when they actually bring something useful  not just boilerplate code,pull up
Refactored note.bind tests to better support near future geometry.bind tests.,pull up
refactoring CyclicBufferTracker and AppenderBufferTracker into the more generic ComponentTracker,pull up
Preparations for new BiomeMode  A new biome mode will soon be added to simulate the old pre biomegroup behaviour. A little bit of refactoring is useful for this.  To avoid code duplication an abstract LayeredBiomeGenerator class has been added. NormalBiomeGenerator and FromImageBiomeGenerator now inherit from this.  BiomeMode:FromImage is no longer handled by special cases in the biome code. The Layer creation code has been moded to a new class  LayerFactory.,pull up
feat: support execute statements via simple  Q  command  To execute a query in simple mode  QueryExecutor.QUERY_EXECUTE_AS_SIMPLE flag should be used. Alternatively  preferQueryMode can be used to control the desired execution mode.  preferQueryMode can have the following values:   extended (default): send all queries as extended (parse  bind  exec)   simple: send all queries as simple  Q    extendedForPrepared: send prepared statements as extended  and non prepared statements as  Q   Note: simple execution mode does not support binary formats  it does not support statement metadata  etc.  Other changes: support timestamp  timestamptz  date  time  timetz  point  box  and uuid types in simple execution mode  closes  558 closes  618,pull up
FACES 1894 Add general utilities for Liferay Faces Alloy Components (Refactored/regenerated components  added module attribute to YUI components) FACES 1896 Develop alloy:button  alloy:commandButton  and alloy:icon component (Refactored/regenerated alloy:button  alloy:commandButton  and alloy:icon component) FACES 1942 Develop alloy:field component (Regenerated alloy:field) FACES 1935 Develop alloy:fieldset component (Refactored/regenerated alloy:fieldset) FACES 1929 Develop alloy:row and alloy:column components (Regenerated alloy:row and alloy:column) FACES 1943 Develop alloy:dataTable and alloy:panelGrid components (Regenerated alloy:panelGrid) FACES 1944 Develop alloy:message and alloy:messages components (Regenerated alloy:messages and alloy:message),pull up
trying to clean up code  to trim unneeded code,pull up
Small refactoring. Excluded some code duplications within reports providers.,pull up
CASC 108  commit before we move to the new repository.  We cannot release this yet because we re missing a contributor license agreement.,pull up
Refactored test driver.,pull up
[refactor] security client,pull up
Big Refactoring: Changed: Not dealing with shapes  but SVGElements and ShapeElements Fixed: Transforming in Path of Shapes is respected Bugs: removeSelectedElement in Menu doesn t work,pull up
This update adds a message queue listener to ServiceMonitor to detect when a running service is undeployed. On undeploy  the previously started ServicePoller is now stopped. Additionally  this update refactors the duplicate code across the ServiceAdvice tests.    git svn id: https://svn.duraspace.org/duracloud/trunk@483 1005ed41 97cd 4a8f 848c be5b5fe45bcb,pull up
Changes Made: 1) Client level refactoring 2) Lucene search related bug fixes,pull up
refactor some code,pull up
FACES 1925 Develop alloy:outputText component tag (extend generated base class for consistency),pull up
updated to conform to the ioos milestone 1.0 schema. removed hardcoded strings throughout the code.,pull up
New parent class AbstractContentDigestHistory for implementations to extend * AbstractContentDigestHistory.java     abstract methods load()  store(); non abstract persistKeyFor(); javadocs * BdbContentDigestHistory.java     extend AbstractContentDigestHistory * ContentDigestHistoryLoader.java  ContentDigestHistoryStorer.java     use AbstractContentDigestHistory,pull up
Refactoring some of the entity code in preparation of the minecart hooks.,pull up
"* added Importer and Exporter interfaces and classes.    Importer: base importer class    FileImporter: base interface for resource import from file    SequenceImporter: base interface for sequence import    SequenceFileImporter: base interface for sequence import from file    SequenceExporter: base interface for sequence export (not yet fully supported)    SequenceFileExporter: base interface for sequence export to file (not yet fully supported)    PluginImporter: plugin abstract class for the import interface    PluginFileImporter: plugin abstract class for the file import interface    PluginSequenceImporter: plugin abstract class for the sequence import interface    PluginSequenceFileImporter: plugin abstract class for the sequence import interface    PluginSequenceFileExporter: plugin abstract class for the sequence export (not yet supported) interface * added ImageProvider interface and AbstractImageProvider class.   Describes a flexible image access which is used as base for the SequenceImport interface. * added LociImporter and LociImporterPlugin classes.   BioFormat library implementation for the new Importer interface. * Loader: major rewrite to use the new Importer interface. * Change the SerieSelectionDialog to use the new Importer interface. * Saver: minor changes  not yet adapted to the new Exporter interface.  * ImageSaverDialog: only accept to select FILE as destination so file name is not lost when changing directory. * ROI:    added a basic implementation of .contains(ROI) and .intersects(ROI)    severals bug fixes with boolean operations. * ROIUtil: added getMassCenter() method. * IcyBufferedImageUtil and SequenceUtil: added rotate(..) method. * Sequence: fixed metadata load/save for multi serie images. to define serie attached to this sequence (used for persistent data file).     * TaskFrameManager: complete rewrote as the old code was lazely done. Hopefully this fixed some issues. * ActionDialog: added isCanceled() method to know if the operation has been canceled.   * added EditRepositoryDialog to replace the old one which contained bugs. * FileAction: fixed new image create and added """"save metadata"""" action. * ROIAction:    ROI subtraction now produces the 2 possible results.    XLS export now always export all ROIs.    some minors issues fixed. * ROIPanel: fixed some issues in refreshing data or actions. * Rectangle3D/4D/5D: severals fixes with infinite dimension. * FileUtil: added toFiles(..) and toPaths(..) File <  > String conversion methods. * several improvements in the Exception/Error catcher and report. plugin causing the exception). * Anchor2D: added Anchor2DPositionListener to replace the old deprecated Anchor2DListener * added support for local plugin repositories. * others fixes  cleanup and refactoring.  ",pull up
Refactored CriterionView to be better structured & use ProfilesView,pull up
Refactoring  +TimeStamps added +General refactoring,pull up
Tests refactoring.,pull up
getDeclaringType moved up to be reused   git svn id: https://pmd.svn.sourceforge.net/svnroot/pmd/trunk@3292 51baf565 9d33 0410 a72c fc3788e3496d,pull up
Refactored so that the plugin class contains less lines of code.,pull up
Moved ResultOption handling to OperationMetric,pull up
moved measured inflow into abstract,pull up
177   Add support for Android refactored property loading/writing to be OSGi service based and extensible. The actual android support will be supplied by a plugin,pull up
UI tests refactoring,pull up
Refactored tests hierarchy to simplify adding tests for new bug patterns.,pull up
[HER 1604] Springify/restletify: offer web interface to view/edit beans in running crawl * BeanBrowseResource.java     offers browsing (and limited editting of simple values) of beans in built crawl * JobRelatedResource.java  ReportGenResource.java     refactor for reuse by other job sub resources * JobResource.java     link to job/beans and job/script * DescriptorUpdater.java     helper for marking up PropertyDescriptors to aid UI bean access * CrawlJob.java     don t auto instantiate context on request * EngineApplication.java     add uri routes * FetchHTTP.java  BdbCookieStorage.java  LongWrapper.java WorkQueueFrontier.java  BdbUriUniqFilter.java    improve display when browsed (esp. before launch),pull up
HV 1239 Moving shared code up to CascadableConstraintMappingContextImplBase,pull up
Refactor query and creation fetcher,pull up
Benchmark stages now separated into their own namespaces  * removed all the separate symlinks to XSD files; replaced by single symlink to schema directory * moved radargun 3.0.xsd to radargun benchmark 3.0.xsd (fits better to the urn:radargun:benchmark:3.0 namespace) * moved radargunScenario 3.0.xsd to radargun scenario 3.0.xsd and changed the namespace to urn:radargun:scenario:3.0 * core stages are now in radargun core 3.0.xsd * reduced code dependency on Directories.LIB_DIR; AnnotatedHelper renamed to ClasspathScanner  now scanning whole classpath,pull up
Bugfix  dockablesRepositioned was not called by StackDockStation and FlapDockStation on a call to move()  git svn id: http://svn.javaforge.com/svn/DockingFrames/trunk@671 3428d308 0d2e 0410 b3d4 94d0fefcacdf,pull up
Removed the useless inner Invokedtask interface  and renamed the InvokedTaskImpl to InvokedTask.  git svn id: https://svn.apache.org/repos/asf/mina/trunk@708228 13f79535 47bb 0310 9956 ffa450edef68,pull up
more refactoring,pull up
Add MojoSupport to sort out the common setup exception handling/cleanup muck. Refactor MojoLogger so that we can make this a final field reference.,pull up
Added support for HazelcastWorkManagedContext   working on task re balancing... not done... just switching machines   Starting a Refactor using the new ManagedContext to allow me to                                                                                                                                                                                                                                                                 simplify the internal API,pull up
Update version 0.1.1 SNAPSHOT.  commit dde54b61f6641d933d2f9073d8aa617d8d075a55 Author: Toshiki Takeuchi <take@xcoo.jp> Date:   Fri Mar 30 21:44:03 2012 +0900      Add CMYKColor class.     Add 2 enum classes for texture.  commit 5afbef4651220c3790fc5705da74aa1af78d3319 Author: Toshiki Takeuchi <take@xcoo.jp> Date:   Fri Mar 30 01:41:39 2012 +0900      Integrate mouseWheelEvent with mouseEvent.  commit 4aab2d45d5f9328927fab01240b89f572f9081ec Author: Toshiki Takeuchi <take@xcoo.jp> Date:   Thu Mar 22 20:24:17 2012 +0900      Fix a bug of SQL.     Modify ArrayList of GraphicsObject to CopyOnWriteArrayList.  commit 080c5192978a4cbf710447a73c9e80d87fb510d6 Author: Toshiki Takeuchi <take@xcoo.jp> Date:   Tue Mar 20 12:19:39 2012 +0900      Update pom.xml to use latest OpenNI and NITE.  commit 9ace0525d9f4d14a21704df1a71dc721c9cc0487 Author: Toshiki Takeuchi <take@xcoo.jp> Date:   Tue Mar 20 10:41:01 2012 +0900      Modify Trackball.  commit 78ab5ddfdd84e748131de12487e4fe6cbc4a0f5f Author: Toshiki Takeuchi <take@xcoo.jp> Date:   Fri Mar 16 00:49:27 2012 +0900      Add Mouse class.  commit a3152207d195bf41af6369b2beadd4f99d16442a Author: Toshiki Takeuchi <take@xcoo.jp> Date:   Thu Mar 15 16:13:46 2012 +0900      Fix a reshape bug.  commit 396afe9e46e2e505b45303a40de89d32db12f12e Author: Toshiki Takeuchi <take@xcoo.jp> Date:   Sat Mar 10 18:32:31 2012 +0900      Add reset method to Trackball class.     Refactoring Applet and CursorMode classes.  commit 1bfbab9ddc3c23ffa4cfaf653a179dda062537e6 Author: Toshiki Takeuchi <take@xcoo.jp> Date:   Sat Mar 10 15:16:34 2012 +0900      Add Trackball class.  commit 7e113c4d3fadf7df01dcadd472f471a00db5c9d5 Author: Toshiki Takeuchi <take@xcoo.jp> Date:   Fri Mar 9 14:37:34 2012 +0900      Fix Box class.  commit 01fe299dbb2ef0c2ef24b1da46c3888d559edaa1 Merge: 5022846 55ed6df Author: Yuki Ban <yuki@xcoo.jp> Date:   Wed Mar 7 09:09:37 2012 +0900      Merge branch  dev  of github.com:casmi/casmi into dev  commit 50228467f0fb686e92ce517772c4e5372cff5cef Author: Yuki Ban <yuki@xcoo.jp> Date:   Wed Mar 7 09:09:28 2012 +0900      Modified TimeLine class  commit 55ed6df1f21a258ec3ced88677de2d08ca5cb2cf Author: Toshiki Takeuchi <take@xcoo.jp> Date:   Tue Mar 6 14:22:05 2012 +0900      Remove warnings of CPopup.  commit d5663c385afd986f24ce55fed7ac64b02193452b Author: Toshiki Takeuchi <take@xcoo.jp> Date:   Fri Mar 2 14:51:54 2012 +0900      Add license and javadoc comments.  commit 096fec8a5adf5504068eac0b4fba49275c09009b Author: Yuki Ban <yuki@xcoo.jp> Date:   Fri Mar 2 14:35:54 2012 +0900      Modified selection buffer  commit 3cf0da85cd3259f38309dc1f5463f0f0abdc74e3 Author: XcooDev <developer@xcoo.jp> Date:   Sat Feb 25 23:37:00 2012 +0900      add synchronized block in rendering  commit b05135396611aa4409d9ca1690f6331604427aad Merge: 4df978d 8ba4300 Author: XcooDev <developer@xcoo.jp> Date:   Sat Feb 25 22:28:24 2012 +0900      Merge branch  dev  of github xcoo:casmi/casmi into dev  commit 4df978d2d072a24bced11e61b192a8515c2de92c Author: XcooDev <developer@xcoo.jp> Date:   Sat Feb 25 22:28:02 2012 +0900      add function to show a alert dialog box  commit 8ba430072ab801e1b1ed1ce337cb1d5b8424e4eb Author: Toshiki Takeuchi <take@xcoo.jp> Date:   Sat Feb 25 21:24:01 2012 +0900      Refactoring some classes.  commit 2e250a563c4efc9e2b2abb892ebb266ef6e7a93b Author: XcooDev <developer@xcoo.jp> Date:   Sat Feb 25 19:26:10 2012 +0900      fix bug in Polygon class  commit c29f1f1167281c5fd306618b2c76a25675872275 Author: Toshiki Takeuchi <take@xcoo.jp> Date:   Sat Feb 25 17:54:35 2012 +0900      Add GrayColor class.  commit 1f7a40470439fda330cffb15bce51bbd282dd92a Author: XcooDev <developer@xcoo.jp> Date:   Sat Feb 25 17:53:28 2012 +0900      fix bug in Line class  commit 578f12c89869ab394a5595817e3fd0197890d21c Author: Yuki Ban <yuki@xcoo.jp> Date:   Wed Feb 22 15:23:57 2012 +0900      add Mouse Wheel Event.  commit e46b2a55bc08505f11ff6f64533c861f61defef7 Author: shigeodayo <shigeo.yoshida.shigeo@gmail.com> Date:   Fri Feb 17 14:59:17 2012 +0900      Add CPopupmenu      Add CPopupmenu  easy to create popup menu.  commit ce5bf19848573173440f03a0dc08da8cfd1e8701 Author: Toshiki Takeuchi <take@xcoo.jp> Date:   Fri Feb 17 13:18:33 2012 +0900      Fix bugs about Primary Key and Short/Long type.  commit 18c992fe2121a6538f0aa33a8035ff0af1f516c3 Author: Toshiki Takeuchi <take@xcoo.jp> Date:   Tue Feb 14 05:11:16 2012 +0900      Divide Color class to three classes (Color interface  RGBColor class  HSBColor class).     Remove ColorMode.     Refactoring many sources.  commit 469f0e6cd6d5985e799e54ca87892c2620685872 Author: XcooDev <developer@xcoo.jp> Date:   Thu Feb 9 17:29:17 2012 +0900      fixed version reference in README  commit 814de6bf236f866956003c9e72073ca5caf26103 Author: Toshiki Takeuchi <take@xcoo.jp> Date:   Sat Feb 4 17:07:36 2012 +0900      Update version to 0.1.1 SNAPSHOT.  commit 58b4744ef60cc435965aec28e40c639948637270 Author: Toshiki Takeuchi <take@xcoo.jp> Date:   Sat Feb 4 16:46:46 2012 +0900      Rename Roundrect.java to RoundRect.java.     Add maven compiler plugin version to pom.xml.  commit b31e6ae4be80737254690e05086121de8652a955 Author: Yuki Ban <yuki@xcoo.jp> Date:   Sat Feb 4 15:16:20 2012 +0900      Add repeat function to TweenGroup  commit 50c6950486df6bbf13a6c6c236ce2fffe2b5f85e Author: Toshiki Takeuchi <toshiki@Prima Alice.local> Date:   Sat Feb 4 14:31:09 2012 +0900      Add a repository icon.,pull up
cleaned up the profusion of methods in OrientDB implementation. Removed exists()  open()  create() and put all that functionality into the constructor. Trying to keep the implementation as specific to Blueprints as possible so as not to allow users to depend on non interface based methods. TransactionsTestSuite still causing a problem with concurrent modification of HashMap.,pull up
Implement a conversationDate property. Also remove duplicated code from the implementations of ConversationModel,pull up
Refactoring node visit with class checking.,pull up
Move  people  field from Item to Description in simple model,pull up
refactored uploading to attempt upload 5 times (rather than connection),pull up
* Added an abstraction layer for connectionless polling acceptors   AbstractPollingConnectionlessIoAcceptor * DatagramAcceptor now extends AbstractPollingConnectionlessIoAcceptor    git svn id: https://svn.apache.org/repos/asf/mina/trunk@596909 13f79535 47bb 0310 9956 ffa450edef68,pull up
refactoring etc,pull up
Extract the main bindingimpl/factory implementation of ProviderMethod into an abstract base class.  This is a prefactoring for moving multibinders into the core.  All the multibinder factories will share a lot in common with ProviderMethods * They are ProviderInstanceBindings * The providers implement ProviderWithExtensions * The  userSuppliedProvider  is a bit of a misnomer  so we provide a standard   implementation  This also removes the ProviderLookups from every ProviderMethod  which were pretty much unneeded.                Created by MOE: https://github.com/google/moe MOE_MIGRATED_REVID 129401048,pull up
Merged revisions 20025 20055 20062 20109 20140 20158 20164 20165 20170 20171 20218 20220 20246 20247 20283 20321 20323 20441 20467 20486 20490 20510 via svnmerge from https://svn.jboss.org/repos/richfaces/branches/RF 8742 1  ........   r20025 | alexsmirnov | 2010 11 10 14:36:12  0800 (Wed  10 Nov 2010) | 2 lines      CODING IN PROGRESS   issue RF 9799: CSV code review    https://jira.jboss.org/browse/RF 9799 ........   r20055 | alexsmirnov | 2010 11 15 16:20:58  0800 (Mon  15 Nov 2010) | 3 lines      CODING IN PROGRESS   issue RF 9799: CSV code review    https://jira.jboss.org/browse/RF 9799   validator impl project removed ........   r20062 | alexsmirnov | 2010 11 16 16:13:58  0800 (Tue  16 Nov 2010) | 2 lines      CODING IN PROGRESS   issue RF 9799: CSV code review    https://jira.jboss.org/browse/RF 9799 ........   r20109 | alexsmirnov | 2010 11 18 16:24:09  0800 (Thu  18 Nov 2010) | 2 lines      CODING IN PROGRESS   issue RF 9799: CSV code review    https://jira.jboss.org/browse/RF 9799 ........   r20140 | alexsmirnov | 2010 11 22 15:44:11  0800 (Mon  22 Nov 2010) | 2 lines      CODING IN PROGRESS   issue RF 9799: CSV code review    https://jira.jboss.org/browse/RF 9799 ........   r20158 | pyaschenko | 2010 11 24 05:31:12  0800 (Wed  24 Nov 2010) | 2 lines      http://jira.jboss.com/jira/browse/RF 9329   DoubleRangeValidator  LongRangeValidator and tests was added ........   r20164 | alexsmirnov | 2010 11 24 15:17:41  0800 (Wed  24 Nov 2010) | 2 lines      CODING IN PROGRESS   issue RF 9799: CSV code review    https://jira.jboss.org/browse/RF 9799 ........   r20165 | alexsmirnov | 2010 11 24 15:24:52  0800 (Wed  24 Nov 2010) | 1 line      remeve accidently added folders ........   r20170 | pyaschenko | 2010 11 25 06:19:25  0800 (Thu  25 Nov 2010) | 3 lines      http://jira.jboss.com/jira/browse/RF 9329   RegexValidator and tests was added   bugfix ........   r20171 | pyaschenko | 2010 11 25 07:28:35  0800 (Thu  25 Nov 2010) | 2 lines      http://jira.jboss.com/jira/browse/RF 9329   RequiredValidator and tests was added ........   r20218 | alexsmirnov | 2010 11 29 15:32:20  0800 (Mon  29 Nov 2010) | 2 lines      CODING IN PROGRESS   issue RF 9799: CSV code review    https://jira.jboss.org/browse/RF 9799 ........   r20219 | alexsmirnov | 2010 11 29 16:05:46  0800 (Mon  29 Nov 2010) | 2 lines      RESOLVED   issue RF 9565: Optimize JavaScript utils   https://jira.jboss.org/browse/RF 9565 ........   r20220 | alexsmirnov | 2010 11 29 16:36:07  0800 (Mon  29 Nov 2010) | 2 lines      CODING IN PROGRESS   issue RF 9612: Create JSF 2.0 resource loading extension to dynamically add scripts and its dependencies.    https://jira.jboss.org/browse/RF 9612 ........   r20246 | alexsmirnov | 2010 11 30 16:40:36  0800 (Tue  30 Nov 2010) | 2 lines      CODING IN PROGRESS   issue RF 9612: Create JSF 2.0 resource loading extension to dynamically add scripts and its dependencies.    https://jira.jboss.org/browse/RF 9612 ........   r20247 | alexsmirnov | 2010 11 30 16:41:27  0800 (Tue  30 Nov 2010) | 2 lines      CODING IN PROGRESS   issue RF 9612: Create JSF 2.0 resource loading extension to dynamically add scripts and its dependencies.    https://jira.jboss.org/browse/RF 9612 ........   r20283 | alexsmirnov | 2010 12 01 16:50:34  0800 (Wed  01 Dec 2010) | 2 lines      RESOLVED   issue RF 9612: Create JSF 2.0 resource loading extension to dynamically add scripts and its dependencies.    https://jira.jboss.org/browse/RF 9612 ........   r20321 | alexsmirnov | 2010 12 02 15:10:02  0800 (Thu  02 Dec 2010) | 2 lines      RESOLVED   issue RF 9612: Create JSF 2.0 resource loading extension to dynamically add scripts and its dependencies.    https://jira.jboss.org/browse/RF 9612 ........   r20322 | alexsmirnov | 2010 12 02 16:26:26  0800 (Thu  02 Dec 2010) | 2 lines      CODING IN PROGRESS   issue RF 9799: CSV code review    https://jira.jboss.org/browse/RF 9799 ........   r20323 | alexsmirnov | 2010 12 02 16:28:30  0800 (Thu  02 Dec 2010) | 2 lines      RESOLVED   issue RF 9612: Create JSF 2.0 resource loading extension to dynamically add scripts and its dependencies.    https://jira.jboss.org/browse/RF 9612 ........   r20441 | alexsmirnov | 2010 12 07 16:59:05  0800 (Tue  07 Dec 2010) | 2 lines      CODING IN PROGRESS   issue RF 9217: CSV: development tests for client side(qunit)    https://jira.jboss.org/browse/RF 9217 ........   r20467 | alexsmirnov | 2010 12 08 16:56:15  0800 (Wed  08 Dec 2010) | 2 lines      CODING IN PROGRESS   issue RF 9217: CSV: development tests for client side(qunit)    https://jira.jboss.org/browse/RF 9217 ........   r20486 | alexsmirnov | 2010 12 09 10:51:56  0800 (Thu  09 Dec 2010) | 2 lines      CODING IN PROGRESS   issue RF 9217: CSV: development tests for client side(qunit)    https://jira.jboss.org/browse/RF 9217 ........   r20490 | alexsmirnov | 2010 12 09 18:25:27  0800 (Thu  09 Dec 2010) | 3 lines      RESOLVED   issue RF 9217: CSV: development tests for client side(qunit)    https://jira.jboss.org/browse/RF 9217 ........   r20510 | alexsmirnov | 2010 12 10 10:21:31  0800 (Fri  10 Dec 2010) | 2 lines      CODING IN PROGRESS   issue RF 9217: CSV: development tests for client side(qunit)    https://jira.jboss.org/browse/RF 9217 ........,pull up
[core] Move returncode handling to OneMeasurement  * returncodes  > OneMeasurement * HashMap  > ConcurrentHashMap  Closes gh 353,pull up
Refactored  to fix broken unit test (issue with cross package access of package private data).  Result is even cleaner than before.,pull up
Saving work. Added default width/height to preferences. Fixed ShapeStyle preference persistence. Fixed Lane moving algorithms. Factored out some more stuff from ModelHandler that is only used in MoveLaneFeature. Started adding context menu to Outline viewer.,pull up
Dependency Fixing: Added LaxHttpParser which can be used explicitly when using the lax header parsing functionality. Added HttpParser which just extends LaxHttpParser in the original httpclient package to avoid breaking compatibility with code which may still reference HttpParser. Explicit commons code changed to use LaxHttpParser in arc/warc record reading,pull up
A few small code cleanups and simplifications.,pull up
minor refactoring,pull up
Moved cookie code fix for WO5.1 to Common Framework and refactored Application.java in main app,pull up
"NXCM 5194: Moving method level up  Initially I thought I ll need """"release"""" to be run in the staging scenario but I realized this is not the case. Closed staging repo is just fine as everything else ",pull up
Major refactoring for PropertyDescriptors.  Changes include:  1) Genericization of PropertyDesciptors  which facilitates the DRY principle 2) Split multi valued PropertyDesciptors into separate classes  to take full advantage of Generics 3) Remove simple String property accessors from the Rule interface  only PropertyDescriptor are supported now 4) Properties are defined via Rule.definePropertyDescriptor(PropertyDescriptor) interface  normally called in a Constructors 5) RuleSet XML enhanced to support PropertyDescriptor defining 6) RuleSetFactory and RuleSetWriter account for the more robust property definitions 7) All RuleSet XMLs corrected to move definitions to Java classes where needed  and to including necessary Type information where missing   git svn id: https://pmd.svn.sourceforge.net/svnroot/pmd/trunk@6431 51baf565 9d33 0410 a72c fc3788e3496d,pull up
Moved getter and setter for layout to AppenderBase.  Removed unused methods from subclasses,pull up
Aravind/Sharvani |  00 | Removed ReportGateway interface.,pull up
Refactoring and cleanup f the index deligate code.,pull up
NXP 19061: refactor test and introduce base class,pull up
RFC 7231: redesign of HTTP authenticator and related classes  git svn id: https://svn.apache.org/repos/asf/httpcomponents/httpclient/trunk@1689155 13f79535 47bb 0310 9956 ffa450edef68,pull up
OPEN   issue FLEXMOJOS 140: Move test runner into a separated component  https://issues.sonatype.org/browse/FLEXMOJOS 140,pull up
Refactor client into TwilioClient and extend it for subdomains,pull up
Merged decorator refactoring branch  git svn id: https://svn.apache.org/repos/asf/httpcomponents/httpclient/trunk@1370953 13f79535 47bb 0310 9956 ffa450edef68,pull up
Removed JdbcConnectionCloseOperationCollectionAspectTest testCloseException due to JDK version behavior issues  * There are some weird behavior issues between 1.7.0_10 and 1.7.0_15,pull up
NXP 7453: add AbstractActivityPageProvider to be extended by PageProvider handling activities. Migrate JSON generation of Mini Messages into MiniMessageHelper,pull up
rhbz1139950   move method to parent class,pull up
SC 123 view definition refactoring,pull up
Extended FunctionParser to work for Boolean and Double data types and renamed multiplexer model packages.,pull up
made an abstract BaseDatabaseConnection that can be extended for various ways of setting up connections,pull up
Refactored last 2 tests to use common base class,pull up
refactoring df4j nio* continued.,pull up
fixed new API stub generation: completely forgot about member annotations! Some refactoring later  model and code generator are able to handle them.,pull up
Refactor backends to use PermissionData architecture  use Lists instead of arrays in a lot of places,pull up
SGF 289   Enumeration restrictions (xsd:enumeration) should be avoided in the XML schema.  Removed the  evictionActionType  XSD simple type definition and subsequently  all EvictionAction enumeration restrictions on all SDG Region element types in the SDG XML namespace (e.g. gfe:partitioned region) that define and declare an eviction policy and corresponding  action .  In addition  performed refactoring and cleanup on serveral new SDG enumeration types  like EvictionType and ExpirationActionType  along with the corresponding Converter implementations and bean properties on their respective FactoryBeans (EvictionAttributesFactoryBean and ExpirationAttributesFactoryBean).,pull up
Refactor OAuth2 tests and write test for eventbrite,pull up
"Enhance mismatched block  stache errors  Previously we only highlighted the close mustache in the case of a mismatch  and we did not provide a quick fix (which users probably expect if they are used to the XML/HTML editing capabilities).  Move the mismatch detection out of the parser and into an Annotation object (and """"Inspection"""") and add quick fixes for making the names match.  Also smarten up the check to cover complex ids.  Previously we were only ensuring that """"foo"""" matched in """"{{ foo.bar}}{{/foo.baz}}"""" and hence missing errors in cases like these. ",pull up
Move getGlobalArtifact() one level up,pull up
Split the calculation cohort definition into regular and date based calculations * Added unit tests for the evaluator * Moved report unit tests into the correct packages,pull up
implemented subqueries and refactored model.,pull up
Statistics & Reporting * all stats now account either to: ** tests   these provide operations statistics  can include more iterations ** timeline   information about events / property values during whole benchmark execution * operations are generic: any call to trait s method may be an operation * reporting moved to separate modules ** providing default reporter module with CSV and HTML reporters * displaying histograms is TODO * operations for MapReduce and DistExec are TODO (+ minor fixes in other parts),pull up
336555 moved core ui code to a separate bundle  Signed off by: Igor Fedorenko <igor@ifedorenko.com>,pull up
Refactor.,pull up
OOZIE 734 Simplify Kerberos/HadoopAccessorService code and remove Kerberos/DoAs code (tucu)  git svn id: https://svn.apache.org/repos/asf/incubator/oozie/trunk@1297282 13f79535 47bb 0310 9956 ffa450edef68,pull up
Added one more class to move the charting logic there. This is the kind of code where you have to wonder if Java is really helping or getting in the way.,pull up
SGF 408   Provide support in the SDG XML namespace to load a pre defined data set using GemFire Snapshot Service for development and testing purposes.  Refactored the SnapshotApplicationEvent into 2 separate ApplicationEvent classes to handle import and exports. Refactored the SnapshotServiceFactoryBean class to handle import/export SnapshotApplicationEvents in onApplicationEvent(:SnapshotApplicationEvent). Added integration tests for the archive file handling capabilities of the SnapshotServiceFactoryBean.SnapshotServiceAdapterSupport class. Added additional unit tests.,pull up
added list of experimental designs to the IDF views,pull up
o Refactoring: Extract abstract super class.  git svn id: https://svn.apache.org/repos/asf/maven/plugins/trunk@1056100 13f79535 47bb 0310 9956 ffa450edef68,pull up
* Loader dialog:    added Z and T range selection    added channel selection    added resolution level selection    improved preview loading * Saver dialog:    removed Z and T range selection (better to do adjust range before)    added SaverOptionPanel for easier setting definition    setting are now preserved in XML preferences.    display warning if output format can loss information (conversion is now automatically done) * Loader:    added checkOpening(..) method to check we have enough resource to open an image    added methods to load only sub part (Z  T and C) and sub resolution of the image.    fixed issues while using Importer on non image files.    many changes in general  new methods  refactoring... * Bio Format importer:    added multi thread support.    added tile loading for large image and sub resolution loading.    better thumbnail loading. * Saver:    added many new methods to check compatibility image writing compatiblity.    reverted channel combination for 3 channels image saving in TIF format (better for RGB image preview)    methods doing Z/T range saving operation are now deprecated (better to do it before)    added method getCompatibleSequenceForWriter(..) to automatically convert a Sequence so it can be save by a given writer (possible data loss) * ROI3D: added add(..)  exclusiveAdd(..)  intersects(..) and subtract(..) operations * ROIUtil: added split(ROI  Line2D) to cut/split a ROI from a given Line2D * GUI: reorganized  File & ROI tools  menu    added  open region  command to load a specific region of an image at a given resolution level.    added ROI 2D to 3D stack conversion    added ROI Shape to Mask conversion    added ROI Mask to Shape conversion    added ROI component separation tool    added ROI line cutter tool * Sequence:    added position X  Y  Z information (metadata)    added  origin  resolution  XY region  Z range  T range  channel information (when loading sub part of an image)    added getOutputBaseName() / getOutputExtension() and getOutputFilename() to obtain wanted output filename given  origin  informations    trying to load too large array of data throw a TooLargeArrayException exception * SequencePersistent: added isValidXMLPersitence(..) methods * SequenceUtil:    sequence merging operation is now possible with Sequence of different type.    fixed possible memory leak issues with some methods    better colormap / metadata preservation    added getOriginPoint(..) / convertPoint(..) for point position conversion operation    added getOriginRectangle(..) / convertRectangle(..) for rectangle position conversion operation * AbstractImageProvider / PluginSequenceFileImporter / PluginSequenceIdImporter :    improved default getThumbnail(..) implementation    added getImageByTile(..) method to load an image by tile (useful for large image) * IcyBufferedImage:    trying to load too large array of data throw a TooLargeArrayException exception    added copyData(array  ..) method to copy data from an array * IcyBufferedImageUtil: added fast downscaleBy2(..) methods to quickly downscale image by a factor of 2 * SystemUtil: reworked a bit memory methods  they should return more accurate values.    getJavaFreeMemory() return the total amount of free memory available to the JVM     getJavaMaxMemory() return the maximum amount of memory the JVM will attempt to use     getJavaAllocatedMemory() return the memory currently *allocated* by the JVM    getJavaUsedMemory() return an estimation of the memory currently *used* by the JVM    getJavaTotalMemory() is deprecated (replaced by getJavaAllocatedMemory()) * ROIDescriptor: added getDescriptor(descriptors  descriptorId) method * MetaDataUtil: replaced OMEXMLMetadataImpl class by OMEXMLMetadata (more generic  check if that bring issue) * ImageJUtil: added convertToIcyBufferedImage(..) method to convert a single image from an ImagePlus to an IcyBufferedImage * Polygon3D / Polygon2D / Polyline2D: fixed adding new point on an empty Polygon / Polyline * Improved memory usage estimation in memory monitor. * DefaultSequenceEdit: default undo operation on Sequence also preserve ROI and Overlays now (reference only) * added Rectangle2DUtil and Line2DUtil classes. * many bug fixes. * several tweaks and optimizations. * some code cleanup.,pull up
Changing reference lookup and moving it to the first position,pull up
Refactored remaining usages of fees and taxes to use transaction units  Issue:  14,pull up
Commiting the code of v1.3    New Features: Custom commands now use my parser Added entity data (e.g. one can now use angry wolves  powered creepers  different villagers  etc.) Added a /skript reload command to reload the main config and all scripts Added expressions  last spawned entity  and  line   of <block>   whereas the latter can currently only be read and cleared  but not set    Changes:  Trigger files  are now called  scripts   end in  .sk  and are located in the  scripts/  folder The main config also now ends in  .sk  Variables are now stored in a csv file Merged right and leftclick into one event such that one can now use  on click on ...   The entity/player/etc.  cannot be used in damage events anymore  one has to use  attacker  or  victim  respectively Several changes in the API  e.g. removed LoopExpr   all expressions can now be looped Block loops now loop from bottom to top and not from left to right (whatever  left  or  right  is)  Argument    can now also be accessed as  argument <type>  or  <type> argument   e.g.  arg player  or  player argument   Targeted block  is now stored during an event  resulting in faster execution and no unexpected results when changing any blocks in the player s LOS. The current targeted block can still be accessed with  future targeted block  or  targeted block will be/will not be/etc. .    Fixes: Fixed CheckedIterator and BlockSphereIterator (and AABB for that matter) Skript now throws an error if it is reloaded by some plugin manager that doesn t reload the plugin like CraftBukkit does Fixed inventory handling  e.g.  can hold  does not change the inventory anymore Improved the handling of items that have multiple IDs  e.g. cauldron block/item or redstone torch on/off The parser doesn t exit anymore if an expression s init() method printed an error  allowing for more complex patterns Fixed expressions   and  state   most expressions don t even have it and others inherit it from others Fixed furnace slots Fixed clickint on air not being checked for being cancelled by other plugins correctly Fixed clicking on an entity causing 2 click events   one for the entity and one for air Fixed ambiguity of variables that have expressions in their name Fixed not being able to heal or damage an entity by    hearts  Fixed the expression    of <item>  conflicting with ItemType s    of <alias>  And many other small fixes    Drafts: Added drafts for unit testing    Known Issues: The default location of many block events is at an entity and vice versa. I know the cause but not how to fix this tidily. The damage in damage events is still the raw damage  i.e. without any armour/critical/enchantment modifidicators applied.,pull up
starting to refactor showcase,pull up
Created a superclass BaseContainerBlock for all the things shared between Chests and Furnaces (which is pretty much everything).  Also fixed a small typo in Sign.toString (had one %d too many)  and removed a few function duplicates I had missed.,pull up
"* Canvas:    mouse canvas position moved in base IcyCanvas class.    2D mouse image position moved in IcyCanvas2D class. * IcyTextField : removed the consumeCharKeyPressEvent property. * IcyFrame: added getInputMap(..) and getActionMap() methods. * ROI:    general performance improvement on draw and mouse events.    removed useless mouse position information. * fixed shift combination shortcuts accidently enabled on text fields. * better headless support. * fixed wrong """"null sequence"""" report. * limited maximum memory to 1024 MB for 32 bits JVM to reduce the """"cannot create native thread"""" error. * minors others fixes.",pull up
Begun refactoring towards making WAR deployable.,pull up
Moving tests around  nothing important.,pull up
Refactor variables resolving  allow custom variable parser implementations  update test cases. Signed off by:  <ghislain.touratier@gmail.com>,pull up
deprecation  fixed a few MOVEMes   Added ERXToManyQualifer   implemented evaluateWithObject on ERXInQualifier,pull up
Convert generation of JS to listener. Compiles. Tests green. Needs cleanup.,pull up
DefaultDifferenceEngine removed.,pull up
[OPEN HUDSON 6227] Allowing view path not to be the same as view tag Refactoring : include most cleartool commands under ClearTool abstraction. Removed most of specific implementations of ClearTool to centralize in CleartoolExec   git svn id: https://hudson.dev.java.net/svn/hudson/trunk/hudson/plugins@32008 71c3de6d 444a 0410 be80 ed276b4c234a,pull up
Removed end condition interfaces: unnecessary complexity.,pull up
morphology implementation for text display + removing apache commons,pull up
FACES 1805 Develop alloy:inputText component (extend generated base class for consistency),pull up
removed reduntant part of all S3 functions to class S3Function,pull up
Moved toKeyStrokes() to VimTestCase,pull up
[SUREFIRE 592] Partial refactoring  o Need to refactor further to remove isolate the extra dummy accessors in each of the three mojos  git svn id: https://svn.apache.org/repos/asf/maven/surefire/trunk@945127 13f79535 47bb 0310 9956 ffa450edef68,pull up
[FIXED HUDSON 4674] Added support for creation/removal of dynamic views  and tweaks to view removal when a job is deleted/renamed or workspace is wiped.  git svn id: https://hudson.dev.java.net/svn/hudson/trunk/hudson/plugins@22953 71c3de6d 444a 0410 be80 ed276b4c234a,pull up
moving setEditingContext()/setObject()/locking up to ERD2WPage,pull up
clean up,pull up
[NGRINDER 713] Remove the unncessary local agent db query.,pull up
WIP: Refactor of candidate services  This now uses the new authentication filter  and I ve converted the existing session token idea so that it works like an XSRF token.  Needs testing and tidying next.,pull up
Removal of deprecated drafts  Removed Draft_10  Draft_17  Draft_75  Draft_76,pull up
move AAssociateRQ.userIdentity to AAssociateRQAC.userIdentityRQ move AAssociateAC.userIdentity to AAssociateRQAC.userIdentityAC,pull up
SC QCADOOMESCLS 183 refactor test data and currency,pull up
remove Simulator interface,pull up
refactoring rhohub part and final bug fixes,pull up
Abstracted out some color helper functionality and cleaned up the image shader pipeline.,pull up
Participants now handle merging too (https://issues.jboss.org/browse/JGRP 2092)   Added test for JGRP 2092 (MergeTest5)   Changed Util.waitUntilAllChannelsHaveSameView(): it is correct now   Removed MergeStressTest (same as LargeMergeTest)   Moved code of Merger2 into Merger   Removed Merger2 and GMS.use_merger2   TP: increased thread_pool.max_threads to 100 (from 20) [default]   Merger now uses participants as merge leaders if there are no coordinators found in all subviews,pull up
refactored ERXStatelessComponent to extend new ERXNonSynchronizingComponent (which makes more sense  as the statelessness has nothing to do with the binding resolution per se)  deprecated valueForXXXBinding  created xxxValueForBinding which is more consitent with the rest of the API,pull up
pipeline stuff moved to separate repository,pull up
Made TarUnArchiver not subclass AbstractZipUnArchiver  Refactoring suggested by Viktor Sadovnikov,pull up
moved the font finding code into a FontResolver class added support for Text Inputs and refactored the form code a bit Issue number: Obtained from: Submitted by: Reviewed by:,pull up
cleanup in graphs; removed cross package graph; simplified class graph,pull up
ContentProcessor   moved orginal/processed fields onto each tree node  rather than root Content object  so each chunk can have both the original and processed. Removed wrapping Content object as it no longer serves a purpose.    HG   rename : src/main/java/com/opensymphony/sitemesh3/InMemoryContent.java  > src/main/java/com/opensymphony/sitemesh3/InMemoryContentProperty.java,pull up
Remove awt references for android compatibility,pull up
#NAME?,pull up
Refactor cpd.FileFinder to pmd.util.FileFinder.  Old class is now @deprecated (and unused within PMD itself).  git svn id: https://pmd.svn.sourceforge.net/svnroot/pmd/trunk@5753 51baf565 9d33 0410 a72c fc3788e3496d,pull up
Moved handling of function equality to FunctionNode to simplify functions writing.,pull up
move command hooks to top level of Options hierarchy,pull up
JenaConnects: Moved truncate() implementation to JenaConnect since all were the same (also  now activates listeners >.>),pull up
Added GetIndexedScript action.   Refactored IndexedScript actions to use a common abstract class.   Refactored IndexedScript action integration tests to use ES client for prepare and confirm actions.,pull up
Added   nodes to nimbusAdmin which shows which vm ids are running on which nodes moved helpconfig to RMIConfig,pull up
Header Refactoring  ReaderProfile validation  IFileImportStep,pull up
Unsubscribe from node notification events working  moved getDocumentHelper() to abstract,pull up
removing scraping qa design  adding support for lbdc file parsing  missing data reporying and related storage mechanisms,pull up
remove the subscribe commands  move zrank to the base and fix an issue with error handling,pull up
reuse toString method between OAuth1 and OAuth2 and move getLocaleFromString helper method,pull up
Refactored to improve quality,pull up
[refactor],pull up
Some refactorings in the translator  moved duplicated code to super class,pull up
Move classes and files around,pull up
* finalized Sync/Async GAE implementation with Query/Batch (lots of code re organized) * finalized Sync JDBC implementation with Query/Batch (lots of code re organized * moved all static functions in static class containers * JDBC Async is not yet implemented * some batch functions (update) are not yet implemented * added lots of unit tests,pull up
* new SequenceBuilder class to help in building a sequence with multi threaded algorithms. * IcyBufferedImage:    added method to load only a sub part of an image.    minor speed improvement in loading some multi channel image.    better default channel colors. * improved error handling with NetworkUtil.download(..) method. * modified classpath & manifest to reflect libraries changes. * refactoring.,pull up
Move simpleservlets to webapp web directory,pull up
refactor: pull out an abstract base class for deploy mojos  git svn id: https://svn.apache.org/repos/asf/maven/plugins/trunk@1067120 13f79535 47bb 0310 9956 ffa450edef68,pull up
move hashCode to Content,pull up
Merged parallel tests branch into master. Fixes lazy initialisation bugs  improves UUID reservoir design  and adds tests  which now all run in parallel.,pull up
"Bug fixes and utility improvements to the arrays in preparation for a Trove based overhaul  	new file:   src/edu/ucla/sspace/clustering/CandidateCluster.java    Ripped out the common code from Streemer and FastStreamingKMeans into its own   class  	modified:   src/edu/ucla/sspace/clustering/FastStreamingKMeans.java    Fixed some bugs    Added more comments and javadoc    Uses CandidateCluster instead of Facility  	modified:   src/edu/ucla/sspace/clustering/Streemer.java    Uses the external CandidateCluster class now    This class is still not well tested  	modified:   src/edu/ucla/sspace/clustering/seeding/GeneralizedOrssSeed.java    Added some minor modifications to handle double accumuluation  	modified:   src/edu/ucla/sspace/graph/LinkClustering.java    Commented out debug code  	modified:   src/edu/ucla/sspace/matrix/AbstractMatrix.java    Made the class easily implement a read only variant  	modified:   src/edu/ucla/sspace/text/TermAssociationFinder.java    Added some much needed javadoc  but this class is still a mess...  	modified:   src/edu/ucla/sspace/util/SparseDoubleArray.java 	modified:   src/edu/ucla/sspace/util/SparseIntArray.java 	modified:   src/edu/ucla/sspace/util/SparseLongArray.java 	modified:   src/edu/ucla/sspace/util/SparseNumericArray.java    Added new methods to support in place multiplication and division of elements  	modified:   src/edu/ucla/sspace/util/primitive/AbstractIntSet.java    Removed newline  	modified:   src/edu/ucla/sspace/vector/AbstractDoubleVector.java    now extends AbstractVector    Made the class better support read only vectors that just want to implement   get()    Added a magnitude implementation    Updated equals() to call the AbstractVector code for non DoubleVectors  	new file:   src/edu/ucla/sspace/vector/AbstractIntegerVector.java    Added a parallel base class for IntegerVectors  	new file:   src/edu/ucla/sspace/vector/AbstractVector.java    Added an implementation of the most basic vector operations of equals()    hashCode()  mangitude  and toString()  	modified:   src/edu/ucla/sspace/vector/CompactSparseIntegerVector.java 	modified:   src/edu/ucla/sspace/vector/DenseIntVector.java    Removed code already in the base class  	modified:   src/edu/ucla/sspace/vector/SparseHashVector.java    Now extends AbstractVector    Removed code already in the base class  	modified:   src/edu/ucla/sspace/vector/Vector.java    Clarified the contracts for equals() and hashCode() ",pull up
Moved session explosion code into CandServiceBase,pull up
Getting closer to something useful. Still need to clean up the RunnerOptions somehow.  git svn id: https://scm.ops4j.org/repos/ops4j/projects/pax/runner@4527 9b982a3c 3ae5 0310 a4bc d9a3335569bd,pull up
"Cleanup and reorganization.     Added a private api layer (org.postgresql.core.Base*)     Cleaned up public api (org.postgresql.PG*)     Added consistent headers and copywrite info     Removed deprecated Serialize functionality     Cleaned up imports     Moved some files to more appropriate locations   Modified Files:  	jdbc/org/postgresql/Driver.java.in  	jdbc/org/postgresql/PGConnection.java  	jdbc/org/postgresql/PGNotification.java  	jdbc/org/postgresql/PGStatement.java  	jdbc/org/postgresql/core/Encoding.java  	jdbc/org/postgresql/core/Notification.java  	jdbc/org/postgresql/core/QueryExecutor.java  	jdbc/org/postgresql/core/StartupPacket.java  	jdbc/org/postgresql/fastpath/Fastpath.java  	jdbc/org/postgresql/fastpath/FastpathArg.java  	jdbc/org/postgresql/geometric/PGbox.java  	jdbc/org/postgresql/geometric/PGcircle.java  	jdbc/org/postgresql/geometric/PGline.java  	jdbc/org/postgresql/geometric/PGlseg.java  	jdbc/org/postgresql/geometric/PGpath.java  	jdbc/org/postgresql/geometric/PGpoint.java  	jdbc/org/postgresql/geometric/PGpolygon.java  	jdbc/org/postgresql/jdbc1/AbstractJdbc1Connection.java  	jdbc/org/postgresql/jdbc1/AbstractJdbc1DatabaseMetaData.java  	jdbc/org/postgresql/jdbc1/AbstractJdbc1ResultSet.java  	jdbc/org/postgresql/jdbc1/AbstractJdbc1ResultSetMetaData.java  	jdbc/org/postgresql/jdbc1/AbstractJdbc1Statement.java  	jdbc/org/postgresql/jdbc1/Jdbc1CallableStatement.java  	jdbc/org/postgresql/jdbc1/Jdbc1Connection.java  	jdbc/org/postgresql/jdbc1/Jdbc1DatabaseMetaData.java  	jdbc/org/postgresql/jdbc1/Jdbc1PreparedStatement.java  	jdbc/org/postgresql/jdbc1/Jdbc1ResultSet.java  	jdbc/org/postgresql/jdbc1/Jdbc1ResultSetMetaData.java  	jdbc/org/postgresql/jdbc1/Jdbc1Statement.java  	jdbc/org/postgresql/jdbc2/AbstractJdbc2Blob.java  	jdbc/org/postgresql/jdbc2/AbstractJdbc2Clob.java  	jdbc/org/postgresql/jdbc2/AbstractJdbc2Connection.java  	jdbc/org/postgresql/jdbc2/AbstractJdbc2DatabaseMetaData.java  	jdbc/org/postgresql/jdbc2/AbstractJdbc2ResultSet.java  	jdbc/org/postgresql/jdbc2/AbstractJdbc2ResultSetMetaData.java  	jdbc/org/postgresql/jdbc2/AbstractJdbc2Statement.java  	jdbc/org/postgresql/jdbc2/Array.java  	jdbc/org/postgresql/jdbc2/Jdbc2CallableStatement.java  	jdbc/org/postgresql/jdbc2/Jdbc2Connection.java  	jdbc/org/postgresql/jdbc2/Jdbc2PreparedStatement.java  	jdbc/org/postgresql/jdbc2/Jdbc2ResultSet.java  	jdbc/org/postgresql/jdbc2/Jdbc2ResultSetMetaData.java  	jdbc/org/postgresql/jdbc2/Jdbc2Statement.java  	jdbc/org/postgresql/jdbc3/AbstractJdbc3ResultSet.java  	jdbc/org/postgresql/jdbc3/Jdbc3CallableStatement.java  	jdbc/org/postgresql/jdbc3/Jdbc3Connection.java  	jdbc/org/postgresql/jdbc3/Jdbc3PreparedStatement.java  	jdbc/org/postgresql/jdbc3/Jdbc3ResultSet.java  	jdbc/org/postgresql/jdbc3/Jdbc3ResultSetMetaData.java  	jdbc/org/postgresql/jdbc3/Jdbc3Statement.java  	jdbc/org/postgresql/largeobject/BlobInputStream.java  	jdbc/org/postgresql/largeobject/BlobOutputStream.java  	jdbc/org/postgresql/largeobject/LargeObject.java  	jdbc/org/postgresql/largeobject/LargeObjectManager.java  	jdbc/org/postgresql/test/jdbc2/Jdbc2TestSuite.java  	jdbc/org/postgresql/test/jdbc2/optional/BaseDataSourceTest.java  	jdbc/org/postgresql/util/MD5Digest.java  	jdbc/org/postgresql/util/MessageTranslator.java  	jdbc/org/postgresql/util/PGbytea.java  	jdbc/org/postgresql/util/PGmoney.java  	jdbc/org/postgresql/util/PGobject.java  	jdbc/org/postgresql/util/PGtokenizer.java  	jdbc/org/postgresql/util/PSQLException.java  	jdbc/org/postgresql/util/UnixCrypt.java  Added Files:  	jdbc/org/postgresql/core/BaseConnection.java  	jdbc/org/postgresql/core/BaseResultSet.java  	jdbc/org/postgresql/core/BaseStatement.java  	jdbc/org/postgresql/core/Field.java  	jdbc/org/postgresql/core/PGStream.java  Removed Files:  	jdbc/org/postgresql/Field.java  	jdbc/org/postgresql/PG_Stream.java  	jdbc/org/postgresql/test/jdbc2/SerializeObject.java  	jdbc/org/postgresql/test/jdbc2/SerializeTest.java  	jdbc/org/postgresql/util/Serialize.java ",pull up
Removed ActiveMQ implementation from Messaging and added Messaging to Ivory Feed,pull up
Added move animations to the growls when they fall down.,pull up
Add test for redis cluster max redirections and refactor JedisClusterCommand exception handling,pull up
core: MultipleTestCorrection: Bonferroni  BH FDR ui: MTC  WelcomeView  MTC Action & Command  Refactorings  git svn id: https://bg.upf.edu/svn/gitools/trunk@82 1b512f91 3386 4a98 81e7 b8836ddf8916,pull up
TFJ 147 retire ExtendedUser and UserWithStatus  git svn id: http://yusuke.homeip.net/svn/twitter4j/trunk@294 117b7e0d 5933 0410 9d29 ab41bb01d86b,pull up
base classes refactored: AcynchronousCall extracted,pull up
Cleaned up and refactored all Action subclasses.,pull up
refactored WebProcessor: extracted AbstractProcessorDecorator which handles the core of the implementation of a XFormsProcessor,pull up
Move thread pools from FreemailPlugin to Freemail  This allows both MessageHandler and Channel to deal only with the Freemail class  making it possible to break more dependencies without passing in even more objects.,pull up
very minor refactoring,pull up
more code consolidation/cleanup,pull up
Big refactoring to simplify user method names (protected api of MVC parts),pull up
Changed the way how Exceptions was handled to have something more general   Cleaned some of the API  that was sometimes inconsistent   Refactored ERMailDelivery with the introduction of a new class: ERMailDeliveryComponentBased.,pull up
Removed duplicate method implementations.,pull up
refactoring: collapse input classes,pull up
Immutable Location and Move. Changes to Location services to reflect...     Location & subclasses are now immutable  therefore add method is depreciated and new implementation of static add to create a new Location with updated coordinates.    HasLocation now has a setter to allow Locations to be changed through the shared state.    Updated tests.    Location is now stored in shared state via the HasLocation interface as the underlying Location will change.    LocationService has new setAgentLocation() method for changing the underlying Location in shared state. This function is disabled for ParticipantLocationService.    CannotSeeAgent now a RuntimeException so doesn t have to be checked.    MoveHandler updated for new APIs.,pull up
Refactored the Transactions package a whole lot.  34 74,pull up
refactor out the abstract class OverlayEndpoint and use it to share functionality between overlaytransport and service connection,pull up
Move CountingNodeTester to examples,pull up
Introduced non String EXML constants. Some refactoring allows the IDEA plugin to reuse utilities needed to guess the constant s type (if not given explicitly) and to render the constant value correctly (e.g. String quoting).,pull up
Added state to connection entry  going to CLOSING state before removing connection (https://issues.jboss.org/browse/JGRP 1594),pull up
Added some iCalendar variables to RepeatableAppointment  removed repeatFieldsEquals from RepeatableAppointment,pull up
* Java:    * Changed RCONSocket.getReply to accept split response packets    * Added RCON tests for long responses (e.g. cvarlist)    * Fixed detection and decompression of bzip2 compressed packets    * Moved receivePacket() from QuerySocket to SteamSocket,pull up
Unit test refactoring,pull up
* Refactored LoadStage into LoadStage (base) and LoadDataStage * JIT avoidance moved into Blackhole,pull up
added backquote t for tag call and backquote a for action call. Some internal refactoring that prepares for Play independent templates,pull up
General java refactoring  test improvements.,pull up
another day  another design change... oh and M30 parser,pull up
Removed assertStructureEquals from doc,pull up
big refactor commit. 1) all classes which were no longer necessary are either removed (no longer usable) or marked deprecated (usable but legacy) 2) modified classes now use the new headerresponse implementation and the jquery backing library which wicket uses. the library now compiles but not guarenteed to work,pull up
Refactoring added OutrankingCriterion,pull up
"Extended map display shader mechanism.    Inverted shader call logic 	  Instead of mapDisplay calling shader() on itself  the mapDisplay is passed to the Shader 	  Allows more complex shading behaviour  e.g. a two pass Gaussian Blur.    Created super class MapDisplayShader    Two shade() methods can be implemented  shadeWithMarker and shadeWithoutMarker 	  Which are called at different positions in postDraw() from mapDisplay.    Enhanced MaskedMapDisplayShader  now has two options: 	a) use dynamic mask canvas 	b) use mask image    Added Blur and Deform shader    Added shading examples ",pull up
CoGrouper now extends ConfigBuilder.This permits easy testing of CoGrouperConfig,pull up
split out into ERXAjaxContext so you can extend without getting all of ERXWOContext,pull up
Standardize usage of FilenameFilter to use Filter APIs.  Add File extension and Directory searching to Filter APIs.  This is an incremental cleanup.  The real cleanup is the unify all these Language specific concepts across the entire PMD code base.  Specifically  the CPD Language stuff  SourceType  SourceTypeHandler  TargetJDK  Parsers  AST nodes  and anything else I missed.  That change will wait until we re ready to do a major PMD internal refactoring.  git svn id: https://pmd.svn.sourceforge.net/svnroot/pmd/trunk@5755 51baf565 9d33 0410 a72c fc3788e3496d,pull up
Warning eliminations; hazard model generations; removing AML,pull up
first compiling code dump after refactor,pull up
Refactor JWT code and add TaskRouterCapability,pull up
* Added WriteRequestFilter that helps implementation of data transformation filters * Changed CompressionFilter and RequestResponseFilter to extend WriteRequestFilter (NOTE: SslFilter and ProtocolCodecFilter is somewhat different from usual data transformation filters in that it can generate more than two messages.)    git svn id: https://svn.apache.org/repos/asf/mina/trunk@580644 13f79535 47bb 0310 9956 ffa450edef68,pull up
Item retract handled  refactored some code,pull up
Reconciled dependency update and configuration update actions  Introduced MavenProjectActionSupport to handle project selection during depenency and configuration update consistently.  Introduced IProjectConfigurationManager.updateProjectConfiguration(MavenUpdateRequest  IProgressMonitor)  Some cleanup of updateProjectConfiguration implementation.  Signed off by: Igor Fedorenko <igor@ifedorenko.com>,pull up
moved ModelVersion up to a top level class (ERXModelVersion) ... ERXMigrator.ModelVersion now extends ERXModelVersion and is marked @deprecated.  It s just too common to make you type the fully qualified import all the time.,pull up
adds more tests for the retrieval tool   adds the option to specify a store ID   adds number of attempts to the output file   various other small fixes/refactorings  git svn id: https://svn.duraspace.org/duracloud/trunk@191 1005ed41 97cd 4a8f 848c be5b5fe45bcb,pull up
Refactored the Derivers to share some of the boilerplate.,pull up
Move default implementations of the majority of abstract classes from DefaultHttpClient to AbstractHttpClient  git svn id: https://svn.apache.org/repos/asf/httpcomponents/httpclient/trunk@1056277 13f79535 47bb 0310 9956 ffa450edef68,pull up
Move isNull to abstract,pull up
Refactored Operations to improve correctness of vbucket aware ops  Previously we had operations that implemented classes that they should not have been implemented. For example  there were ASCII operations that implementing the VBucketAware interface. Since ASCII operations must go through moxi and don t contain vbucket numbers there is no reason for them to implement this interface.  This commit also contains the addition of SingleKeyOperationImpl and MultiKeyOperationImpl which subclass OperationImpl and are superclasses to binary operations that contain one or more keys correspondingly. This abstraction allows these type of operations to deal with vBucket awareness and the amount of keys the operation contains in different ways.  Change Id: Ic7d002ec8e77e2fccc31987fcb1cba1ca14715da Reviewed on: http://review.couchbase.org/7801 Reviewed by: Michael Wiederhold <mike@couchbase.com> Tested by: Michael Wiederhold <mike@couchbase.com>,pull up
Extend tests to cover ResultsReader.getNextEvent2().,pull up
changes to committee dao and api controller.  Reworked committee caching.  Moved some packages around,pull up
refactor PTF ifc;    clearer separation of duties between Resolver and Evaluator.   document ifc.   provide a PItr to execute method.   linking to LeadLag done in Executor. WindowTblFunc:   hold onto WindowFnDefs   QDeserializer  no special handling for WindowTblFunc,pull up
More refactoring  upversioned to 1.1.0,pull up
moved equals and hashCode to VParentBase,pull up
pmd: refactored PLSQL integration  * Using now javacc during build time to regenerate most of the AST nodes    and the parser  * all AST nodes inherit now from the new class AbstractPLSQLNode. This    class replaces the former SimpleNode. This class implements    the interface PLSQLNode which inherits from PMD s Node.  * Deleted all AST nodes that didn t have any modification after    generating them.  * PLSQL integration is now more like the Java integration,pull up
Actor  Port and Source hierarchy refactored.,pull up
refactoring community server operations,pull up
lots of comments  some interface cleanups  remove class implementation,pull up
replace area.intersect by SutherlandHodgmanPolygonClipper  for now  this has no advantage  but it allows to move the shape merger up in the chain which is needed when we want to optimize wrong angles in shapes. img size increases a bit compared to r3009 because filters are not yet  working properly.  git svn id: http://svn.mkgmap.org.uk/mkgmap/branches/high prec coord@3014 25d90789 57f7 4ee0 8453 03a3dfeeeb22,pull up
Refactor to allow a method to be added to the Service to show a plot dialog.,pull up
heavy refactorization of SiftingAppender,pull up
code cleanups   structure view is still broken,pull up
refactored some date to jdk time methods out of SqlBaseDao. Added preliminary law processor code. Optimized imports.,pull up
Refactor BasicCFindSCP,pull up
FACES 1806 Develop alloy:inputTextArea component (extend generated base class for consistency),pull up
Added AbstractRemoteService and refactored implementations to use it.,pull up
Nearing end of another major refactor.,pull up
BIG UPDATE: moving emphasis to book  and updaing GUI,pull up
Delombok   add ListImpl class in order to remove duplicates from two classes,pull up
Refactored customizable classes.     Added simple attributes that work like patient attributes.     Added base classes for all attributes classes.     Updated instance attribute classes to use base classes.     Added simple attribute resources.     Added base classes for all attribute resources.     Updated instance attribute resources to use base classes.     Refactored instance attribute generic type definitions to be simpler.,pull up
Feature  97: Remove p2 repository dependencies from profiles  too.,pull up
Remocação da classe SecurityConfigImpl e movendo o código para SecurityConfig.,pull up
more refactoring  added unit tests,pull up
Refactored for better reuse  Moved some stuff around for better reuse,pull up
LinkUrlProcessor: remove input _HDIV_STATE_ parameter if it exists.,pull up
Refactoring Test.,pull up
moved isEntityReadOnly eval to ERD2WPage,pull up
Cleanup up the unit tests   tests are now broken up into auditing and non auditing versions.  Most of all our repo tests now disable auditing   only the auditing specific tests will enable it.  This should reduce the number of tests dependent on asynchronous processing (ie auditing).,pull up
ClearCase plugin: Refactoring PollAction and ChangeLogAction into common HistoryAction  git svn id: https://svn.dev.java.net/svn/hudson/trunk/hudson/plugins/clearcase@13989 71c3de6d 444a 0410 be80 ed276b4c234a,pull up
Redesign of classic (blocking) connection management APIs  git svn id: https://svn.apache.org/repos/asf/httpcomponents/httpclient/trunk@1784138 13f79535 47bb 0310 9956 ffa450edef68,pull up
Added callgraph classes lots of bugfixes and extendsions for struct and invokes,pull up
Clients refactored,pull up
Refactor the clustered event bus tests to reduce the number of tests  Signed off by: Clement Escoffier <clement.escoffier@gmail.com>,pull up
This update primarily modifies the RackStorageProvider due to issues surfaced in working: https://jira.duraspace.org/browse/DURACLOUD 588 . It refactors retry patterns up from S3StorageProvider into StorageProviderBase.    git svn id: https://svn.duraspace.org/duracloud/trunk@828 1005ed41 97cd 4a8f 848c be5b5fe45bcb,pull up
Fix issue in EnterHandler and refactor ActionHandler tests  Fix an issue where if the caret is at the end of the file and the user presses enter after an open block tag  we error trying to find a close block tag past the end of the file.  Also added testing around this functionality.  While adding testing around this  refactor tests to make it easier to write action handler tests.,pull up
fix lightning (normal matrix computation)  add material colors  cleanup code,pull up
* Added writeRequestQueue to AbstractIoSession because most implementations needs it. * Removed getWriteRequestQueue() from IoSession final implementations    git svn id: https://svn.apache.org/repos/asf/mina/trunk@576054 13f79535 47bb 0310 9956 ffa450edef68,pull up
progress on constraint/expression parser ; working on refactoring content assist processing,pull up
Added messaging to duraservice at the ServiceResource level   Refactored  git svn id: https://svn.duraspace.org/duracloud/trunk@396 1005ed41 97cd 4a8f 848c be5b5fe45bcb,pull up
Further refactor of SelectorParser,pull up
Refactoring matcher lookup yet again,pull up
Massive refactoring to separate unit tests from integration tests,pull up
Remove all AuctionServerManager references to the entryList  so all auction references through it are done directly to the database!  Not done yet  it s still a bit dangerous...   git svn id: svn://svn.jbidwatcher.com/jbidwatcher/trunk@512 b1acfa68 eb39 11db b167 a3a8cd6b847e,pull up
Move Languages  Certificates and Year from Film To Content  Pull up the languages  certificates and year fields from Film to Content along with accessors and mutators in both simple and internal model. This is primarily for the LoveFilm CSV ingest.,pull up
prepared RESTServlet definition to Debug project  refactored class structure and comments for cleanup.  kept REST commented out as it throws an NPE so probably I m missing something in the config,pull up
Refactor,pull up
Removed previously added dependency injection since it just made the code more complex and IMHO didn t give any value.,pull up
Removing com.apple.eawt package import. No idea where that came from.,pull up
Changes in the NIO implementation and re implementation of GossipRouter/RouterStub   Added PubServer and PubClient   Added send(null) to send to all   Added GossipRouterNio   Added static creator methods for NioServer and TcpServer   Added code to create client servers   TCPGOSSIP and TUNNEL can now choose between blocking and non blocking connections to GossipRouter (use_nio)   Request and response types between RouterStubs and GossipRouters are now in a separate enum GossipType   Removed GossipRouterNio: non blocking IO will be implemented in GossipRouter itself using NioServer/TcpServer   Added Util.bufferToArray()   Moved ConnectionListener out of BaseServer   Removed Server   Added List<PingData> to GossipData   ReceiverAdapter now uses Util.bufferToArray()   TCPGOSSIP now implements RouterStub.MembersNotification callback   RouterStub now uses BaseServer to connect to GosipRouter   GossipRouter now uses BaseServer to implement connection management   Added TcpClient and NioClient   Moved all client server related classes to org.jgroups.blocks.cs   Added TcpClient and NioClient   Moved all client server related classes to org.jgroups.blocks.cs   De genericized BaseServer et al   Moved to package org.jgroups.blocks.cs   Reconnects in RouterStubManager now work   Use peer connections to make unit tests pass   Added suspect handling in GossipRouter: when a connection to P is closed  then a SUSPECT(P) will be sent to all members of that group   Made marshallinf of GossipData for type MESSAGE more efficient   Removed copying of messages in GossipRouter   Setting parameters in sockets/channels before connecting them   TcpConnection.isOpen() now returns true when the socket has been created   Rewrote ServerUnitTest to get rid of issues with @DataProvider   Upgraded TestNG dep to 6.9.x,pull up
This update is the initial commit for https://jira.duraspace.org/browse/DURACLOUD 628 . It adds the current username to the durastore s content ingest event. Additionally  it includes the refactoring pattern that will be continued in the next commit for the other durastore events. A new base class has been created for both ContentStoreAdvice and ContentStoreMessages.    git svn id: https://svn.duraspace.org/duracloud/trunk@841 1005ed41 97cd 4a8f 848c be5b5fe45bcb,pull up
Merge mapred branch to trunk & remove it.  git svn id: https://svn.apache.org/repos/asf/lucene/nutch/trunk@357197 13f79535 47bb 0310 9956 ffa450edef68,pull up
Some fixes and cleanup . first round of testing.,pull up
fcrepo 795 cleanup; all tests pass,pull up
Koti  Vandana   1782 |Some refactoring and took out the libfaketime.so location from the pom.xml   to be specified from command line.,pull up
refactored the tests to prepare running ecj as well as delombok.,pull up
Toby: Extracting an abstract CachingIterator from PredicatedIterator  FilteredIterator and SubSequenceIterator and removing the iterator helper classes as a result.,pull up
removed cruft from BasicPanel turned of incremental layout and lazy images by default Issue number: Obtained from: Submitted by: Reviewed by:,pull up
HV 1478 Move ValidationExtension to the exported package,pull up
Sonar clean up,pull up
RSA  additions and refactorings,pull up
Extended the code in the iconio package   Added read support for new style icons with embedded pngs   Added write support to ICOFile  in most cases the output matches the input 100%   I/O now done with LGM s StreamDecoder/Encoder   GmFile now stores which version it represents   At the moment  this is only used to determine whether the game icon needs modifying   If game version < 8 when it is to be written  icon is reduced to a single image with size and colour depth <  32x32 @ 32bpp  GmFileReader was fixed so that GM8 files with more than one resource of a given type load correctly   Inflater finished in wrong scope   ver was reused and hence was tested before it was assigned the value 800 again  Added StreamDecoder and separated GmStreamDecoder from it   StreamDecoder subclasses InputStream for convenience   Changed the system for inflating    Rather than spawning a new GmStreamDecoder  the current one simply changes state.    When entering inflater mode  the current file position is recorded and then reset to 0. This allows file position to be displayed as <position of zlib block>[<position in inflated data>] for easier debugging. Ending the inflater restores the original file position.   read(byte[] int int) now guarantees the requested number of bytes will be read unless EOF is reached   BufferedInputStream guarantees this but InflaterInputStream does not  StreamEncoder now subclasses OutputStream for convenience  git svn id: https://lateralgm.svn.sourceforge.net/svnroot/lateralgm/LateralGM/trunk@390 8f422083 7f27 0410 bc82 93e204be8cd2,pull up
[FIXED   HUDSON 5574] Removing existing snapshot views often fails [FIXED   HUDSON 4569] Use  cleartool setcs  current  instead of  cleartool update    Better handling of job renaming/deletion and behaviour regarding custom workspace   Plugin will be more resilient in case of existing view tag or view path in the way. Instead of failing  it will remove the view tag and/or rename the view path.   UCM : view config spec should be more consistently sync ed with stream   Dev : new unit tests to cover addition/removal of load rules on an existing view  git svn id: https://hudson.dev.java.net/svn/hudson/trunk/hudson/plugins@29961 71c3de6d 444a 0410 be80 ed276b4c234a,pull up
Refactorings: new packages for CPD & dataflow views  new abstract superclasses for actions  commands  views. For loop conversions  ArrayList  > List reference changes. Rearranged context menu icons   still need some unique ones for three other entries Dataflow: NPE fix post view closing  view always shows first method by default  labeled method list  new tab icon  outlined & positioned nodes.  git svn id: https://pmd.svn.sourceforge.net/svnroot/pmd/trunk@7082 51baf565 9d33 0410 a72c fc3788e3496d,pull up
the declaration of types  too  can move up,pull up
Work for [HER 1656] add multiple queues per host ( parallelQueues ) capabilities to QueueAssignmentPolicies * LongToIntConsistentHash.java + Test     consistent hashing utility class * URIAuthorityBasedQueueAssignmentPolicy.java     shared superclass for the hostname and surtauthority QAPs     setting for  deferToPrevious     avoid changing assignments     setting for  parallelQueues     when > 1  consistent hash URIs across that many separate queues (with numerical suffix) * SurtAuthorityQueueAssignmentPolicy.java  HostnameQueueAssignmentPolicy.java     refactor to derive from URIAuthorityBasedQueueAssignmentPolicy * QueueAssignmentPolicy.java     add Apache license * Hop.java     add String representation for convenience,pull up
more demo cleanup,pull up
Cleaned up indexing entry points and documentation.  git svn id: svn+ssh://svn.internal.sanger.ac.uk/repos/svn/pathsoft/psu/trunk/genlib/java/crawl@16365 ee4ac58c ac51 4696 9907 e4b3aa274f04,pull up
moved most of the common render stuff to the Render,pull up
Last piece of refactoring wrt  110,pull up
Added a RevertableMDIFrame  which is now extended by ResourceFrame  GameSettingsFrame  GameInformationFrame  ActionFrame  and CodeFrame (although the latter two are updatable only   revert is discard). GameSettings and GameInformation now use property enumerations like every other resource  which allows them to be fully revertable. Updated references everywhere  including a few strings. Tested UI behavior (but not file behavior   as long as I didn t make any typos  this should not have broken that).  git svn id: https://lateralgm.svn.sourceforge.net/svnroot/lateralgm/LateralGM/trunk@515 8f422083 7f27 0410 bc82 93e204be8cd2,pull up
cleanup,pull up
Apply fixes outlined in issue  99 lots of extensions to the Ant task and a variety of code cleanups,pull up
Dheeru |  282 | Refactored by pulling up common transitional logic to base transition class,pull up
Pull spunk restart into base class  clean up restart usage.,pull up
[Save All] Refactor Save action classes  Refactor Save (previously Save All) such that the version which appears in the Objects menu and the version which appears in the This menu share a common superclass  to simplify future maintenance.,pull up
Move the Pool implementations into the `stormpot` package  This will allow some obvious code sharing to take place without compromising visibility.,pull up
Minor refactoring/consolidation to work around using protected API in WebObjects,pull up
Refactored servlet and standalone to prepare for eventual non servlet based Ninjas,pull up
EXOJCR 953: clean up tests,pull up
refactor + fix build,pull up
Continuing refactoring   git svn id: https://pmd.svn.sourceforge.net/svnroot/pmd/trunk@3525 51baf565 9d33 0410 a72c fc3788e3496d,pull up
Refactored measures tests using abstract super test,pull up
* ivy buildout for managing project * couple test code changes to reflect new layout * removed cyclic dependency b/w tests (jena & sesame) and core  fix  80 * dropping sdb support.  keeping code around in case anyone wants to revive it  but it s not in the jena module anymore,pull up
some javadocs and other comments  some minor refactoring  change delimiter to  ;  for the sortable key,pull up
External auth provider refactoring,pull up
More tests refactoring.,pull up
Refactored RDF steps; added cx:rdf load  cx:rdf store  and cx:sparql,pull up
Refactored modifiers to base ProtocolDecl  and revised API gen to specify MPST/ExplicitEndpoint in initial state channel public constructor.,pull up
refactored spawning trajectories,pull up
[OPEN HUDSON 6705] UCM : Implement SCM new polling logic to support rebases better A bit of refactoring + refining some edge cases (no load rule)  git svn id: https://svn.dev.java.net/svn/hudson/trunk/hudson/plugins/clearcase@31807 71c3de6d 444a 0410 be80 ed276b4c234a,pull up
refactor,pull up
Refactoring to support view subclasses  Change Id: If143be2e3f1048aab6901181fa8884e8afc91cc4,pull up
Moved the getPosition method from LinearMotion to Motion.,pull up
refactored rule unit tests,pull up
Make ShowOption top level.  Make Show extend ShowOption.  Now when we compile a list of ShowOptions  if we already have a Show for any of the options  we can use the Show object instead.,pull up
[ARQ 694] Refactored data sets handling   introduced generic resources and cleaned up providers,pull up
Convert numbers to ConfigInt when possible  then ConfigLong  and ConfigDouble only when required  Had to overhaul and clean up equality of ConfigNumber as part of this.,pull up
Complete refactoring of compiler system,pull up
moved functionality from StringFilter to abstract TextFilter,pull up
"Refactorings: * Got rid of ComponentSuiteResolver  because the ComponentSuiteRegistry has to be filled in advance  anyway  and this is what the IDEA plugin now also does. Simplified ComponentSuiteRegistry accordingly. * Split XmlToJsonHandler used for all EXML parsing into two handlers  one for the metadata (ExmlToMetadataHandler) and one for the Ext component JSON (ExmlToJsonHandler). The metadata is needed to (re)build the XSD  the JSON is needed when generating the AS3 class. Opened API to generate a single class. * Removed some too exhaustive logging and a few souts.  [git p4: depot paths   """"//coremedia/jangaroo/"""": change   165880] ",pull up
o Added a .gitgnore in the benchmarks module o Bumped up to Netty 3.6.3 o Added netty UDP benchmarks o Created sub package (nio and tcp) for the various benchmarks o Started to refactor the IoSessionConfig implementing classes to take care of UDP o Started to mplement the UDP client and server,pull up
Fix missing amendmentVersions on BillSobiProcessor  When the BillActionAnalyzer was changed to fix the bill actions having the wrong amendment version  it created a foerign key problem with the database. A fix was written and was applied to the XmlBillStatProcessor. Unfortunatly  that was not sufficient  because Sobi files also use the BillActionAnalyzer and could be affected by this. The method that fixes this problem has been moved to the AbstractDataProcessor so it can be accessed by both processors. The BillSobiProcessor now includes this method in the bill action logic.,pull up
[WAGON 350] add unit test for wagon ssh with an embedded ssh server : refactor to be able to share test with scp external module  git svn id: https://svn.apache.org/repos/asf/maven/wagon/trunk@1174024 13f79535 47bb 0310 9956 ffa450edef68,pull up
Move Workbench code as demo module,pull up
Sweeping cleanups to reduce tangles and improve the code.,pull up
[NGRINDER 10] Support concurrent multiple test    Very little clean up,pull up
QCADOOMES 2504   Code refactor in cell binder functionality. Added support for parsing localized decimals.,pull up
Refactor tests,pull up
B 59299   Categories Refactoring  This PR maintains backward compatibility for the JDBC adapter.    Added AbstractJdbcSource & AbstractJdbcPublisher to enable extending the basic JDBC adapter functions.   Updated SearchToSqlConverter to allow mapping specific category prefixes to specific SQL columns in the datastore.,pull up
Modified FramesManager to allow the registration of the AnnotationHandler.  Defined an AnnotationHandler for each of the default annotation  Refactored FramedElement  FramedVertex and FramedEdge: all the Logic is now in FramedElement so the classes FramedVertex and FramedEdge have been removed  Added ClassUtils with the utility methods used in FramedElement  all the tests passed,pull up
Refactored kernels and added constraint rules.,pull up
[MRELEASE 130] refactor to use a generated release descriptor instead of the release configuration class Submitted by: Jeremy Whitlock  git svn id: https://svn.apache.org/repos/asf/maven/plugins/trunk@438341 13f79535 47bb 0310 9956 ffa450edef68,pull up
[HER 1659] make default WARC size comply with spec; adjust default pool size for fewer odd sized (W)ARCs * ArchiveFileConstants.java     remove superfluous constant * WriterPool.java     DEFAULT_MAX_ACTIVE  > 1 * WriterPoolMember.java     update constant use; remove deprecated+unused methods * WriterPoolProcessor.java     pull storePaths up from subclasses  but set default via subclass method     set defaultMaxSize via subclass method * WARCWriterProcessor.java  ARCWriterProcessor.java    (getDefaultMaxFileSize)  (getDefaultStorePaths) as appropriate,pull up
upgrade to Jetty 7 and Tomcat 7   refactoring of Jetty related test cases,pull up
moved branch delegate up to ERD2WPage,pull up
Minor refactoring necessary for the CSS stylable version of the ajax upload button to work,pull up
rsa refactoring and new test case,pull up
Remove Job as a decorator class and just merge it with Player (needed to fix some JUnit tests as well for this),pull up
Major refactor to start process of eventually moving content manager classes into separate module. For now they are moved to a different subpackage but remain in the KenyaEMR module until all dependencies on KenyaEMR are removed.,pull up
" 79 Removed attribute from daily  weekly  monthly  controllers  made them protected in AbstractHistoryController  80 During selection of research group in section History changed first menu item to """"All groups"""" (for daily  weekly and monthly download history)   deleted menu item    Select research group        git svn id: https://svn.origo.ethz.ch/eeg database/trunk@651 1a751040 f3c7 4aaa 98da 1e85aacc1d30 ",pull up
Some component refactorings. Including allowing this puppy to run without Avalon (optional) according to CDI   git svn id: https://svn.apache.org/repos/asf/incubator/ftpserver/trunk@306681 13f79535 47bb 0310 9956 ffa450edef68,pull up
Refactored HDFS based MapStores and fixed FileSystem close issue,pull up
Added support to keep cursors across multiple captures;   API cleanup (mostly in the tools);   moved properties to (anonymous) project.  ToDo:   somehow tools are getting incorrect parent frames (null). This causes their properties to be destroyed.,pull up
Initial work for refactoring the Cov Build command for compile sources.,pull up
remove jaxb  git svn id: https://svn.jboss.org/repos/picketlink/federation/trunk@1004 cbddccc4 e45a 42eb be77 0d76e4b45d38,pull up
Moved attributes to clearcase,pull up
"Restructuring: DEECoSimulation extends DEECoRun and are in the """"runners"""" package. Exception added for the case that a simulations starts without a termination time.",pull up
"  Moved Bundler and impls out of TP into org.jgroups.protocols   TP.bundler(string type) allows to change the bunder at runtime  e.g. probe.sh op UDP.bundler[""""sender sends""""] (https://issues.jboss.org/browse/JGRP 2058)   Changed NoBundler to not use a pool of output streams ",pull up
Added option to all operators to construct and use them without a model to fix  58. Also added ConfigOperator to handle enrolling and removing config listeners to support this.,pull up
refactor to make addition of further database specific tests easier,pull up
merge from site refactor refactoring branch  r384789:385828   git svn id: https://svn.apache.org/repos/asf/maven/plugins/trunk@385829 13f79535 47bb 0310 9956 ffa450edef68,pull up
Added Google Drive file permission add  update and remove operations,pull up
Abstract toString into AbstractNode  deprecate the implementation  Log that the default implementation will be removed,pull up
Extract the main bindingimpl/factory implementation of ProviderMethod into an abstract base class.  This is a prefactoring for moving multibinders into the core.  All the multibinder factories will share a lot in common with ProviderMethods * They are ProviderInstanceBindings * The providers implement ProviderWithExtensions * The  userSuppliedProvider  is a bit of a misnomer  so we provide a standard   implementation  This also removes the ProviderLookups from every ProviderMethod  which were pretty much unneeded.                Created by MOE: https://github.com/google/moe MOE_MIGRATED_REVID 129142220,pull up
Adds BillStat with still ignored data tags  This Commit focuses on the implementation of BillStat and its Testers. + Currently reads Sponsor  Title  currentAmd  law  and BillAction tags. + Remove and Replace testers are in order.  fixes  10875,pull up
fixed another regression during refactoring  git svn id: https://svn.apache.org/repos/asf/maven/plugins/trunk@1480820 13f79535 47bb 0310 9956 ffa450edef68,pull up
Minor cleanup,pull up
moved multiGet(..) operation to Esi4JSearchIndex. get(..) remains in Esi4JIndex as it can t be performed on a MultiIndex (e.g.  * ),pull up
[HER 1783] BloomFilter64bit bit length bug prevents full bitfield from being used; premature saturation * BloomFilter64bit.java     include the split to subarrays (for larger bitfields) and round up to power of 2 (for performance) options previously in largely redundant classes     fit a number of problems with int/long overflow and bitwise ops     add methods for reporting/testing * BloomFilter.java     add methods for reporting/testing * BloomFilterTest.java  BloomFilter64bitTest.java     more extensive tests  including two lengthy tests of default/oversized blooms usually disabled by renaming * BloomFilter32bit.java  BloomFilter32bitSplit.java  BloomFilter32bp2.java  BloomFilter32bp2Split.java     deleted as buggy or redundant * BenchmarkBlooms.java     move to test source dir * BloomUriUniqFilter.java     change to accept filter instance (rather than parameters) for added configuration flexibility     fix comments * BloomUriUniqFilterTest.java     supply filter not paramters,pull up
clean up clipping code  etc.  reduce copypasta code in PlotContent code,pull up
refactor query model  git svn id: https://uriplay.googlecode.com/svn/uriplay media reference/trunk@1068 9f0b3f36 cced 11dd a405 31afbefa9e0e,pull up
issue  27 finished SaveAll action. Refactoring of Save action,pull up
Removed current user in favor of the AuthorizationService. Fixes issue  16.,pull up
Extend the result of a Task on a Batch  ENGINE 1439,pull up
Moved email addy to top User entity.,pull up
EntityManager refactoring,pull up
refactoring: move xml code to EpubProcessor  move epub cleaner code to EpubCleaner,pull up
Added getGUILayout() as a full method higher up the infrastructure removing a lot of redundant code further down.  git svn id: https://www.evllabs.com/svn/jgaap/trunk@162 bcaee279 2e94 4b2e be96 a1d7c6f3fc26,pull up
"Change show hierarchy  It uses to go like this:   ShowOption extends Object   Show extends ShowOption   LocalShow extends Show   FailedShow extends LocalShow  Now  it goes like this:   ShowOption extends Object   FailedShow extends ShowOption   Show    formerly LocalShow    extends ShowOption   Series    formerly Show    extends Show  So  places that are supposed to be able to take either a FailedShow or a Show now must accept a ShowOption.  But other places that still take a Show  can now be guaranteed that the object they get is not a FailedShow.  As mentioned  the class that is now """"Show"""" is what used to be a """"LocalShow"""".  Reversing the inheritance makes more sense.  There is no place that took a LocalShow but couldn t use a (provider recognized) Show.  But classes like ListingsLookup only make sense with a non local show.  Now it uses """"Series""""  so there is no worry about it getting a non Series Show.  A FileEpisode no longer accepts a FailedShow.  When we fail to get a Show to map to the FileEpisode  we call setEpisodeShow() with null  which updates the seriesStatus.  We no longer have to check for having a FailedShow in the actualShow slot  though we still need to check for it being null.  When we re using instances of Series  also change variables and comments to refer to """"series"""" rather than """"show"""". ",pull up
Refactoring commandline,pull up
Refactoring: abstracting duplicated behaviour of the create comment and edit comment pages and comment panels for issues  documents  and milestones into abstract classes. For Issue:112.,pull up
Add findMissingMoves(),pull up
Refactored TCPIP (including NIO support) code for JGRP‑240.  TCP_NIO no longer extends class TCP and ConnectionTableNIO no longer extends ConnectionTable.  They instead share a common abstract class with shared methods.,pull up
Add support for projection classes (classes that expose a subset of the complete entity). Add ExpressionBuilder abstract class and refactor existing expression builders to extend. Add SummaryDAO functional tests.,pull up
doc gen. big refactor to support general topics and scope,pull up
Some refactoring of router classes,pull up
PR: MPMD 38 Refactor excludes to work with both PMD and CPD  git svn id: https://svn.apache.org/repos/asf/maven/plugins/trunk@431062 13f79535 47bb 0310 9956 ffa450edef68,pull up
Refactoring louds trie.,pull up
Added unit tests for BFSDistanceLimited and GridIndex.  Additionally:   Moved stubs for Locatable to stubs package and added stub for Locatable.   Small code and documentation changes for BFS and SpatialIndex code. Should not have any external impact.,pull up
Refactor scope updater to share common put methods with other executors,pull up
SWITCHYARD 1402 Remove CamelMessageComposer from implementation.camel.  This commit contains shared code which should be placed in core and it s being used by camel exchange bus.,pull up
Removed all GData related code. Integration with GData Contacts API has been removed in favor of Portable Contacts API  with merging of PoCo and Google+ APIs. Upgraded Spring dependencies to latest versions.,pull up
refactored ISymbolTable and friends to properly support local labels inside of macros  bugfixed macro handling  line numbers/offsets in expanded macros are currently broken and confuse the source level debugger/syntax highlighting,pull up
Added authentication for the Java client library  refactored builders and added unit tests.,pull up
ClearCase plugin: Refactoring PollAction and ChangeLogAction into common HistoryAction  git svn id: https://hudson.dev.java.net/svn/hudson/trunk/hudson/plugins@13989 71c3de6d 444a 0410 be80 ed276b4c234a,pull up
fix javadoc parsing remove use of @Reference migration fixes,pull up
"* Rois panel:    layout modified again  should not change much now !    table support now much more columns (selectable).    XLS export always take all columns in account.    others improvements you will notice. * Layers panel:    we can now edit the layer s name directly in the table.    accept delete command through the table.    some others minors tweaks. * added ActionManager class which  allow to access command action in a centralized way (will be improved in future). * added GeneralPreferences.getResultFolder() / setResultFolder() methods to get/set the default application """"results"""" folder. * more internals commands accessible through the search bar. * replaced XLSManager by XLSUtil so use the later one now. * improved ColorChooserButton rendering. * IcyButton: fixed minors issues. * some improvements in the Exception Handler engine. * some bugfixes. * some refactoring.",pull up
removed method valueIterator from class StructSupport and added to all classes that extend this class. replace string with key constants in many placed,pull up
Shruthi  Dev |  0 | refactoring AdherenceCaptureIT test; using default root transition;(welcome prompt is in summaryTransition now),pull up
refactoring to removed duplicated code   git svn id: https://pmd.svn.sourceforge.net/svnroot/pmd/trunk@654 51baf565 9d33 0410 a72c fc3788e3496d,pull up
Added Connectors removed EdgeRoles,pull up
DSL compiler generates cleanup stage client ( 154).,pull up
Refactored admin routes to make an instance  rather than static. Added a new all mappings resource with pagination.,pull up
refactoring file test dataset by creating AbstractFileDataSetTest,pull up
JCBC 674: API for prepared statements  Motivation            In N1QL dp4  prepared statements are a bit different from parametrized statements. Executing a prepared statement requires two steps: obtain the query plan then later on execute the query plan.  Modifications               Added classes to represent a PREPARE Statement (the one for step 1  that allows to obtain an execution plan)  and the QueryPlan itself.  PreparedQuery now uses the QueryPlan and can value parameters.  Added methods on (Async)Bucket to obtain a QueryPlan from a PrepareStatement (step 2 is just using a PreparedQuery in the existing method).  Refactored the various Query classes with a common base AbstractQuery  fixed the unit tests in QueryToN1qlTest.  Added an integration test for Queries (work in progress).  Result        Users can now obtain a QueryPlan from a Statement and execute said plan.  Change Id: I3b7cba7adeeaf8d7a1b32b2d87d25ec3e45f53cc Reviewed on: http://review.couchbase.org/45000 Tested by: Simon Baslé <simon@couchbase.com> Reviewed by: Michael Nitschinger <michael.nitschinger@couchbase.com>,pull up
JCBC 678: support more parameters for N1QL query  Motivation            It makes sense that some request parameters from N1QL specification be tuned by the user. Offer an API to do that for relevant parameters.  Modifications               Added QueryParams  following the Parameter Object pattern  to allow to set various relevant query parameters for N1QL. Added consistency enum.  Added unit tests to check the produced JSON query and the coherence of the API.  Added method on JsonObject to remove an entry from the JSON  by key.  Result        Users now can further tune their N1QL queries with relevant parameters.  Change Id: If5153f86a09c351a8c3adfdac41a2493cc6e3156 Reviewed on: http://review.couchbase.org/45091 Tested by: Simon Baslé <simon@couchbase.com> Reviewed by: Michael Nitschinger <michael.nitschinger@couchbase.com>,pull up
A major rewrite and simplification of storm_components package. Code duplication removed.,pull up
DURACLOUD 303   Moved common code from individual services into BaseAmazonMapReduceService  git svn id: https://svn.duraspace.org/duracloud/trunk@328 1005ed41 97cd 4a8f 848c be5b5fe45bcb,pull up
Refactoring of Value and Attribute,pull up
refactor DoctypeReader/InputStream,pull up
issue 101: Socks 4/5 Proxy handler in NetClient  add SOCKS proxy support to HttpClient and NetClient changed proxy options into a ProxyObject class add small socks4/5 proxy for testing move proxyOptions property to ClientOptionsBase add unit tests add missing ctx.fireXXX in VertxHandler move ProxyChannelProvider to its own package add classnotfound check to NetClientImpl add to documentation about proxy config  Signed off by: alexlehm <alexlehm@gmail.com>,pull up
SC QCADOO 185 refactor messages translation,pull up
Refactor VxmlElement,pull up
refactoring rhodesadapter class & fix create rhodes app from exists source & fix show error in preferences,pull up
CRSH 4 : Line edition support and left/right cursor move,pull up
Interface IMatrix and IMatrixDimension refactoring,pull up
Refactored and optimized batch vertex caches impls  This commit pulls common batch loading vertex cache code into AbstractIDVertexCache and makes String and ObjectIDVertexCache extend that abstract base class.  LongIDVertexCache uses Colt primitive collections internally and is not amenable to sharing code with the other Java collections based implementations.  This commit also applies the optimization from a0cf0f11d8c4eaf436493f742789142d741ac06e to Object and LongIDVertexCache.  However  I ve only tested it for StringIDVertexCache.,pull up
"* add better support for keypath visibility properties * convert """"no details"""" eo s to id   """"pk"""" format instead of >pk< format * attempt to load rest delegate names from properties (ERXRest.<EntityName>.delegate) * attempt to load default rest delegate names   <EntityName>RestEntityDelegate to make registration easier * Put request handler session fixes from Ajax s JSONRequestHandler into RestRequestHandler * Added some convenience registration methods to ERXRestRequestHandler * Added some misc javadoc * 1.5ified * moved some generic rendering methods up higher to support generating alternative output formats   ",pull up
tweaks. clean ups.,pull up
Node attributes editor has correct functionality.  The functionality is not complete  but everything that s there seems to work correctly. You can add parameters  change types  set min/max values etc.  This also required changes in Parameter  where we better handle type migration.  Also  you can view (but not change) the node ports.  All controls inherit from an abstract control that uses addNotify() and removeNotify() to listen to changes in  the parameter values.,pull up
Refactoring to create abstract super class for creating users  menu,pull up
Move transliteration routine to superclass.  So that we could use it for the   latin1 option.  git svn id: http://svn.mkgmap.org.uk/mkgmap/trunk@1028 25d90789 57f7 4ee0 8453 03a3dfeeeb22,pull up
JFG 889: Add TestEnvironmentRestController; Extract all exception handlers to GlobalControllerExceptionHandler; Refactoring; Add TestEnvironment model  dao and service; Add new unit tests; Disable some Checkstyle checks.,pull up
Create unit test LeaveTest (https://issues.jboss.org/browse/JGRP 2293)   Replaced base64 conversion via javax.xml.bind with Base64 methods   Moved GmsImpl.leaving and GmsServerImpl.leave_promise to GMS   Added setXmitInterval() to UNICAST3   Fixed CCME in FD_SOCK  changed suspected_mbrs to concurrent set   Added single test target to build.xml   Removed  bind_addr from ViewDemo and Draw   Removed setting of system properties external_port and bind_addr in tests   Changed log formatting of message exchanges in NAKACK2 (https://issues.jboss.org/browse/JGRP 2326)   Changed log formatting of message exchanges in UNICAST3 (https://issues.jboss.org/browse/JGRP 2325),pull up
some code clean up removal of deprecations introductions of deprecations so uses of deprecations can be removed later,pull up
"Some cleanups among refactored command classes.  1) moved """"AddIntermediateDir()"""" method into the base class since it is shared 2) moved """"AddSslConfiguration()"""" method into the base class since it is shared between two commands 3) added validation for null check ",pull up
[style]: clean up code,pull up
Major highlights:    Moved .sim to .similarity package   Added new implementations of Streemer and Shindler s K Means   Improved vectors by defining a common equals and hashCode   Tweaked IntSet to be an IntCollection and updated bulk operation APIs to operate on IntCollections,pull up
Do not ignore if an mp is tagged with name only  This is a partly revert of r2478. mkgmap used the tags of the outer polygons if the mp itself was tagged with name only. This is a common tagging error. But this tolerant handling produced some errors. So revert this. This commit also fixes the handling of mps with tags removed by the loader. r2478 removed this detection by mistake.  git svn id: http://svn.mkgmap.org.uk/mkgmap/trunk@2483 25d90789 57f7 4ee0 8453 03a3dfeeeb22,pull up
Refactored AbstractName  MessageIdKind/Name and NameCollector.,pull up
Restructured  moved TestNG tests  added testng config and ant task,pull up
Update to 3.2  Probably gonna move to github permanently now,pull up
some refactoring,pull up
Refactor Options,pull up
More refactoring. Fix confusion between Custom Task properties and Model Extension properties,pull up
JCBC 136: Adding support for spatial view queries.  This changeset adds the capabilities to query spatial views. Queries work with and without documents  but not for reduce queries. The tests have been refactored out to a new file for better encapsulation.  Change Id: I96383e7f421c7e2d446f8d09724f0c707177552a Reviewed on: http://review.couchbase.org/22563 Reviewed by: Volker Mische <volker.mische@gmail.com> Reviewed by: Michael Wiederhold <mike@couchbase.com> Tested by: Michael Nitschinger <michael.nitschinger@couchbase.com>,pull up
Refactor jsr80 API to use new libusb 1.0 API as backend,pull up
Continued ProcessingContext refactoring,pull up
wcet08       New  improved implementation of CallGraph   works fine with receiver type analysis now       Cleanup and docs for frontend package,pull up
Moved .wrap  .before  and .after from Element to Node for flexibility. Overriding implementations in Element still return Element.,pull up
FACES 1985 Develop portal:navBar  portal:nav  and portal:navItem components FACES 1984 Develop portal:permissionsURL component (refactored to use new abstract PortalTagRenderer parent class) FACES 1714 Develop Liferay Faces Showcase (added use cases for portal:navBar and portal:nav),pull up
moved tab and section keys up to ERD2WPage   reordered and documented ERD2WPage,pull up
FACES 1932 Develop alloy:panelGroup component (extend generated base class for consistency),pull up
SuperBuilder toBuilder: moved static helper method to builder impl,pull up
Add new default mouse listener  make hover  link  cursor listeners extend it to reduce some boilerplate code. Javadocs for mouse tracker and listeners.,pull up
Move relatedLinks from Content to Described  Moves the `relatedLinks` field and related methods up the hierarchy to __Described__ from __Content__ so a __Person__ has can also have related links.,pull up
Moved children from Function to Node class,pull up
[AESH 29] added separator char and boolean flag to enable/disable appending a char at the end of a completion. refactored and added some tests.,pull up
"[MPH 106] add gav parameter to calculate effective pom for any gav  not only reactor  Adding an """"artifact"""" parameter to the effective pom goal. The name is to be consistent with the evaluate goal.  > Refactoring the common code into AbstractHelpMojo  git svn id: https://svn.apache.org/repos/asf/maven/plugins/trunk@1768250 13f79535 47bb 0310 9956 ffa450edef68 ",pull up
Minor refactor  git svn id: https://svn.apache.org/repos/asf/hama/trunk@1656624 13f79535 47bb 0310 9956 ffa450edef68,pull up
[ 91] Refactored memorystubs  write SSEM CPU test,pull up
refactor getValueTranslator to BaseMatrixPersistance,pull up
FACES 1358 Develop JSF1 < > JSF2 compatibility layer (Moved methods from CompatImpl to BaseImpl since they were JSF 1.x related),pull up
Refactored FilterControls  moving some logic in the superclass.,pull up
refactored buffer/window/frame management. Fixed tests.,pull up
Correction de la creation d objet.  Mise en place du resize et du move  git svn id: svn+ssh://svn.opcoach.com/srv/d_opcoach/svn/training/trunk@224 28ab6df1 7a97 4e50 b59a 519495a15fef,pull up
RF controlers refactoring,pull up
Changelog:  * Removed static instances from SchemeRegistry  CookieSpecRegistry and AuthSchemeRegistry * Made sure there is only one instance of SchemeRegistry per HttpClient / ClientConnectionManager * HostConfiguration  HttpRoute and RouteTracker no longer implement Cloneable as they do not override  clone() method * AbstractHttpClient should now be threading safe * DefaultHttpClient populates HTTP execution context with data required for request execution  git svn id: https://svn.apache.org/repos/asf/jakarta/httpcomponents/httpclient/trunk@534769 13f79535 47bb 0310 9956 ffa450edef68,pull up
Refactoring of Relay package. Extract Android to own project  Tests not changed yet,pull up
initial support for hover (currently disabled) moved justification code into it s own class in a new subpackage for inline layout (because it s so blooming complicated)  Issue number: Obtained from: Submitted by: Reviewed by:,pull up
Pulled out common code in my optimization tests into AbstractOptimizationTest. Refactored FippleFactor and Naf optimization tests to use AbstractOptimizationTest.,pull up
Make touch methods up to date  update tests  move timeout to MessageOptions,pull up
* ROIDescriptor:    replace useSequenceData() by separateChannel().    added needRecompute(SequenceEvent) and needRecompute(ROIEvent) methods. * ROIPanel:    better refresh policies (remove annoying blink during column sort)    better value rounding policies    fixed some possible exceptions on sort operation    other minors fixes and improvements * PluginLoader:    fixed getPlugins(Class<?> ..) method which wasn t retrieving BlundedPlugin. * ROIUtil: many deprecated methods because of the new ROIDescriptor structure. * Sequence: fixed getPixelSizeScaling(..) and calculateSize(..) methods * ROI2DArea: fixed a minor refresh issue.,pull up
Moved layer generation (IndependentLayer) to separate class.,pull up
FACES 1927 Develop aui:body component (extend generated base class for consistency),pull up
More code refactoring.,pull up
Move C++ AST from CPD into lang.cpp.ast.  Add lang.ast.AbstractTokenManager with common TokenManager capabilities (ie. generalized stuff from Java and C++ that used to be in the .jjt files).  Move TokenMgrError into lang.ast  enhanced to have FileName capability from C++ for general use.  git svn id: https://pmd.svn.sourceforge.net/svnroot/pmd/trunk@5972 51baf565 9d33 0410 a72c fc3788e3496d,pull up
Refactoring of TabrisUI API.,pull up
Refactored out the G2DGLCanvas so it has a simple implementation of just rendering as a canvas  not an entire JComponent hierarchy.,pull up
Complete disk store refactoring and added region attributes,pull up
removed I instance paramatized type from displayable components,pull up
move method getSerializerClass() from AsyncProducerConfigShared to SyncProducerConfigShared.,pull up
update for java 8 date/time changes refactor DAOs back to core now that they re java  too.,pull up
Adding support for mapping of reference attributes and lists; Removing Dozer based implementation,pull up
Refactored XmlNode hierarchy for better NS support,pull up
add tokenizer vocab support to all classes. add get/set methods for tokenizer vocab and stopword removal option,pull up
"* ImageSaverDialog can now return selected options. * Viewer: can now start / stop play video sequence and change the desired frame rate. * Colormap:    fixed color calculation with alpha blending.    delete key can be use to remove control point.    color component line order modified (alpha is no more at front). * some fixes in Sequence save operation (better name logic). * F1 key now opens a browser to the support forum. * fixed minor issue in plugin installation. * Somehow replaced """"focused viewer"""" by """"active viewer"""" but that may change. * fixed a minor issue with the IJ <   > Icy image transformation action. * some refactoring. * removed old deprecated units. * reworked javadoc generation * minors changes and tweaks. ",pull up
Refactored to pull error log into its own class.,pull up
Profiles refactored  shared elements in AbstractProfile. WARC Refers To Date now set as long and correctly formated in getWarcHeaders.,pull up
Fixed issue: DIRMINA 243 (mark() and autoexpand) * Made sure mark is preserved after expansion * Refactored ByteBuffer implementation   * Most base implementation has been extracted into BaseByteBuffer to remove code duplication * Added ByteBuffer.capacity()  git svn id: https://svn.apache.org/repos/asf/directory/trunks/mina@430683 13f79535 47bb 0310 9956 ffa450edef68,pull up
more refactoring   git svn id: https://pmd.svn.sourceforge.net/svnroot/pmd/trunk@1147 51baf565 9d33 0410 a72c fc3788e3496d,pull up
Ensure that player s are properly removed when they log out.,pull up
refactor to support *.java when generating scaladoc,pull up
"Refactoring  to make nexusUrl non needed.  There was a mess  this change should clean it up a bit. Out of 4 strategies we have  """"deferred"""" and """"direct"""" strategies does not tamper with REST  they should be able to work without specified nexusUrl in plugin configuration. On the other hand  the """"image"""" and """"staging"""" strategies do use REST (former to close and latter fully uses the V2 REST API of Staging).  Now class hierarchy is cleaned up too  non client users extend AbstractDeployStrategy while client users extend AbstractStagingDeployStrategy. ",pull up
added schema manager service to encapsulate meta data store creation  new test caes and refactoring of existing test cases for such. partially address BRISK 180,pull up
refactored to remove duplicate code.,pull up
refactoring,pull up
Heavy Refactoring of fi.smaa.jsmaa.model:  Move measurements out from criteria to ImpactMatrix  Changed listeners to be smaa specific and not from beans,pull up
Refactored filters. There is now an intermediate class under Filter to provide onMatch and onMismatch options.,pull up
Plexus manifest now extends jdk manifest  This change has several smaller compatibility breaks  most of which should be easy to reasolve.  The actual plexus Manifest class is now a subclass of jdk manifest  and clients are recommended to use the jdk manifest methods.,pull up
Reorganise imports in .java and cleaned artifacts versioning to parent pom,pull up
remove JAXB from the addressing/policy object model  git svn id: https://svn.jboss.org/repos/picketlink/federation/trunk@944 cbddccc4 e45a 42eb be77 0d76e4b45d38,pull up
Refactored SASL auth for greater reuse.,pull up
FACES 1566 Develop ResourceHandlerWrapperBase class for Liferay Faces Util and refactor existing ResourceHandler implementations to subclass it,pull up
"Replaced `WeakReference` resource references with a new class  `ResourceReference`. This should fix most of  33.  * Each resource now holds its own reference in a `public final` field. In the constructor  it can either take a reference as a parameter (and optionally update it)  or it can make a new reference.  * The access to the constructor and `set` method in `ResourceReference` is intentionally restricted to let only classes in the `resources` package handle them.  * Fixed handling of `null` references in several places.  * Removed `Util.refsAreEqual` since references should be unique and thus can be compared using `  `.  * Made `ResNode.res` final  since this field shouldn t change. The reference will update itself.  * Added a new method  `dispose`  to `Resource`  which `null`s its reference  signalling that the resource has been removed.  * Reorganized `copy` methods used by resources.   * Resources implement a single `protected` method for all copying  which is used by two methods in `Resource`:    * `copy(ResourceList<R> src)`  which should do the same as before.    * `clone()`  which makes an exact deep copy of the resource  with the same reference. The reference can later be updated to point to this new clone.   * Note that the `update` parameter now has a different meaning: to update the given reference to point to the new resource (as in the constructor).  * Moved the `UpdateSource` system from `Resource` to `ResourceReference`. This means already established listener """"connections"""" won t break when a resource gets replaced.  git svn id: https://lateralgm.svn.sourceforge.net/svnroot/lateralgm@302 8f422083 7f27 0410 bc82 93e204be8cd2 ",pull up
Docs refactoring    HG   rename : src/site/apt/configurations and templates.apt  > beanstalk maven plugin/src/site/apt/configurations and templates.apt rename : src/site/apt/continuous integration.apt  > beanstalk maven plugin/src/site/apt/continuous integration.apt rename : src/site/apt/index.apt  > beanstalk maven plugin/src/site/apt/index.apt rename : src/site/apt/usage.apt  > beanstalk maven plugin/src/site/apt/usage.apt,pull up
Move testDelayedFlush up since it works in binary now.,pull up
HTTPCLIENT 1827: Asynchronous cache exec interceptor with caching support for streamed HTTP exchanges; removed incomplete response checks as response integrity is enforced in the transport layer; async cache re validation is currently broken in the classic and unsuppoted in the async implementations,pull up
Refactor Maven config params and Push/PullCommands  Allow all mojos to run without Maven project (ie pom.xml). Switch to @requiresOnline annotation to disable mojos when offline. Change projectConfig param from String to File. Extract common options and *some* common code from Push/PullMojo and Push/PullCommand. Add module related params to PushPullMojo.,pull up
Moved PmDataInputImpl logic to PmObjectBase,pull up
Introduced generic AbstractProperty.  ENGINE 847  Existing Property now extends AbstractProperty with generic type String.,pull up
"Redesign bucketer system for multiple buckets per dimension  This supports use cases like """"tags""""  where a single cube input might have several """"tags"""" associated with it in a single dimension. You could get then get counts by looking up individual tags. ",pull up
"[BPMN 2.0 Export] 	  Added mechanism to extend every element in schema valid way (e.g. see Signavio extension elements) 	  export of linked models 	  added call element classes  git svn id: http://signavio core components.googlecode.com/svn/trunk@37 ed087902 8a0d 0a71 2a74 18b522bb7755 ",pull up
moving parameter processing to the superclass,pull up
mvn refactoring + add first step on testng,pull up
Proof of concept: spawn Mojang structures in BO3s  It is now possible to spawn a Minecraft object (like minecraft:igloo/igloo_bottom) using MinecraftObject(x y z name) in a BO3.  Objects added by mods are not yet supported. This requires the BO3 config to know about all existing objects  which the current TerrainControl code doesn t yet support. A little refactoring is needed here.  These Minecraft objects are called structures by Mojang. To distinguish them from the complete structures  they are called structure parts in the code.  These new objects are represented by the interface called SpawnableObject. CustomObject now extends this interface. See the JavaDocs of both for more details.  The StructuredCustomObject interface has been removed  the methods are now in CustomObject. This eliminates the need of ugly code like this:  Branch[] branches   (object instanceof StructuredCustomObject)? ((StructuredCustomObject) object).getBranches() : new Branch[0];  Now the code is simply:  Branch[] branches   object.getBranches();,pull up
Updated FilterCommand with IntBitSet implementations. Added an additional worst case test for Filtering  which currently fails. Refactored a few things.,pull up
[WAGON 109] Refactor Wagon HTTP and Wagon WebDav Merged from: WAGON 109 branch r657713:658098   git svn id: https://svn.apache.org/repos/asf/maven/wagon/trunk@658099 13f79535 47bb 0310 9956 ffa450edef68,pull up
moving functionality from ERD2WQueryPageWithFetchSpecification up to ERD2WQueryPage,pull up
code reorganized   wip  doesn t compile  timerservice separated as a package  all lock free queues and unsafe moved to kilim.concurrent,pull up
Fix  32   Refactor compilers to better share code between instances   Rename template tests to templates subpackage to avoid clashing with unit tests in parent directory   Fix  33   Substitution variables not passed to default teaservlet.xml files in META INF/   Add test cases for BeanPropertyAccessor,pull up
moved templates  implemented profile activity,pull up
fixed how we handle looting  lots of refactoring,pull up
Merging NarManager (eventual removal) into AbstractDependencyMojo Making goals that use Nar dependencies manage download/unpack similarly to what is done automatically for Jar Moving download/unpack goals to be more like maven dependency plugin,pull up
Include Rentals EOModel in eogen configuration. Refactor EOs from the Rentals model to use superclass methods where possible. Add ERCoreUserInterface implementation to User entity and use this instead of the newly added AppUser entity. Remove AppUser entity from the Movies model and delete the related migration.,pull up
refactoring PEP impls to support FESL PEP,pull up
Closes GH 0542 Refactor CoordSuspendXCommand & CoordResumeXCommand to TransitionXCommand based  From: Chao Wang <chaow@pressglass.corp.yahoo.com>  git svn id: https://svn.apache.org/repos/asf/incubator/oozie/trunk@1168738 13f79535 47bb 0310 9956 ffa450edef68,pull up
refactor model to include a very basic representation of a person (probably just a link to wikipedia for now),pull up
"Refactored """"Cov Capture"""" command to its own class from CoverityToolHandler ",pull up
[FIXED HUDSON 4674] Added support for creation/removal of dynamic views  and tweaks to view removal when a job is deleted/renamed or workspace is wiped.  git svn id: https://svn.dev.java.net/svn/hudson/trunk/hudson/plugins/clearcase@22953 71c3de6d 444a 0410 be80 ed276b4c234a,pull up
Reorganized package structure,pull up
redesigned the ComparisonFilterPipe. Its much more flexible and easier for users to implement or override the testObject() method. Now complicated tests beyond .equals() can be created. Also  per Emil s request  I made the filter option on the ComparisonFilterPipe take enum instead of a boolean. Thus  there is Filter.ALLOW and Filter.DISALLOW. Updated the tests and JavaDoc to reflect new changes.,pull up
refactor ide tests  introduce TestIdeaMinibuffer,pull up
remove dependency on treenode,pull up
Refactored Command to add AbstractCommand. Completed GatewayCommand with appropriate tests.,pull up
o Update pax logging dependencies version to 1.0.0 o Clean up pax wicket service dependencies scope declaration o Add [PaxWicketIntegrationTest]   This is the base class for pax wicket user to do integration test.   o Update lifecycle test case accordingly.   git svn id: https://scm.ops4j.org/repos/ops4j/projects/pax/wicket@11481 9b982a3c 3ae5 0310 a4bc d9a3335569bd,pull up
Refactored for improved modularity and extensibility. General cleanup. Updated unit test correspondingly.,pull up
Refactor PageInitializer in PageInjector.  * @Page is now deprecated in favor of @javax.inject.Inject (JSR 330) * createPage() is nowDeprecated  in favor of newInstance() * Any class now supports @Inject and newInstance(). It only requires a compatible constructor (WebElement or WebElement+WebDriver) * List<T> now supports @Inject. If T extends FluentWebElement  it will inject a FluentList<T>. If T doesn t extends FluentWebElement  it will create an ArrayList<T>.  Close  229,pull up
fix for TFJ 103 : User element is out of sync fix for TFJ 104 : UserWithStatus element is out of sync Introducing ExtendedUser  deprecating UserWithStatus to make the class name consistent with the API Doc http://apiwiki.twitter.com/REST+API+Documentation Extendeduserinformationelement  git svn id: http://yusuke.homeip.net/svn/twitter4j/trunk@208 117b7e0d 5933 0410 9d29 ab41bb01d86b,pull up
branch:      javabot cleaned up the api related admin commands.  introduced commons cli and began reworking around the new approach,pull up
ARTIF 683 JPA/RDBMS repository  Hibernate Search full text  refactored/abstracted common repo logic  rearchitected repo unit tests  installation/integration for EAP/Wildfly,pull up
Refactored the Atom Binding layer to be more generic.  Now we have horizontal jax rs services that handle all of the different artifact types  rather than a duplicate resource per artifact type.,pull up
Refactor http service activator,pull up
DP   refactoring code of data loading  refactoring code of service controllers  git svn id: https://svn.origo.ethz.ch/eeg database/trunk@885 1a751040 f3c7 4aaa 98da 1e85aacc1d30,pull up
incorporated new visual design of login page and consent page. Made adding client apps work.,pull up
Refactored integration test classes slightly,pull up
created reward source factory when reading config misc code clean up/refactoring,pull up
Todo. Change stats to only count removals that were not already expired.,pull up
Refactor command line tests for CPD and create a BaseCPDCLITest class,pull up
Split OpenTSDBWriter and merge Kieren Hynd s TCollectorUDPWriter into the class hierarchy to ensure consistent handling of tags  settings  and more. Also applied checks for numeric values and cleanup of quotes and other special characters to both writers.,pull up
ui: model and views deep refactoring.  git svn id: https://bg.upf.edu/svn/gitools/trunk@79 1b512f91 3386 4a98 81e7 b8836ddf8916,pull up
simplify sources which implement osm format readers  mo effect on output expected.    remove interface LoadableOsmDataSource   remove input format specific (pbf o5m xml) implementations of OsmMapDataSource   OsmMapDataSource now implements LoadableMapDataSource and decides which parser is to use  These changes allow to remove various sources. A few classes were renamed to remove the format specific parts in the name. Osm5XmlHandler was renamed to OsmXmlHandler (no idea what the 5 meant  I always confuse it with 05m)   A side effect of these changes is that the   coastlinefile option now accepts o5m format as input  but maybe the option should be removed as well. I ve also allowed to use gzip ed o5m files (o5m.gz) as it needs no extra code.  git svn id: http://svn.mkgmap.org.uk/mkgmap/trunk@3872 25d90789 57f7 4ee0 8453 03a3dfeeeb22,pull up
Moved paged virtual collection cache algorithm to utility class PagedCollectionCacheBase.,pull up
* Added DummySession * Changed ProtocolCodecSession to extend DummySession     git svn id: https://svn.apache.org/repos/asf/mina/trunk@568590 13f79535 47bb 0310 9956 ffa450edef68,pull up
Removed setPiped(boolean) from Producer and added isPiped() on CommandContext,pull up
code review workoff for oauth refactoring  mostly involving updating to use DomainMapper instead of one off mappers,pull up
JCBC 938: Multi values in array mutations  (this is still an in design part of RFC 002  subdoc API)  Motivation:             RFC 002 introduces the possibility to insert multiple values at once in an existing array. This is the implementation of this part of the RFC.  Modifications:                A new internal type  MultiValue  is introduced to facilitate the special encoding needed for multi valued array mutations.  FragmentTranscoder now has two abstract methods: one is the classic encoding path  the other is the MultiValue encoding path.  3 new specs have been added to the subdoc builders: arrayPrependAll  arrayAppendAll and arrayInsertAll. Each of these takes a Collection of values. A convenience alternative signature using varargs is also offered for each (but doesn t offer the createParents parameter).  The different naming (xxxAll suffix) allows to disambiguate some edge cases relative to varargs for the compiler. It is also close to the java collections idiom.  Results:          Multi valued inserts are now possible in the Java subdoc API  using either a Collection or a vararg enumeration. Tests have been adapted.  Change Id: I2d3ab0abba64493c12a1d09bb5033155c21d9345 Reviewed on: http://review.couchbase.org/61712 Tested by: Simon Baslé <simon@couchbase.com> Reviewed by: Michael Nitschinger <michael.nitschinger@couchbase.com> Reviewed by: Mark Nunberg <mark.nunberg@couchbase.com>,pull up
Move flag groups from ResidencePermissions to FlagPermissions for more organizational reasons.,pull up
Refactor object collections  support new pagination API,pull up
initial commit of operators branch (will be tagged 4.1 eventally  nick s 4.2 branch). this commit contains several tea language enhancements known as operators by nick as well as lots of generic typing refactorings. a full description of these changes will be documented elsewhere... builds... basically tested.,pull up
small refactoring of ODE system + tests,pull up
Cleanup and fix several issues. 1) Abstracted ResNode from a DefaultNode that can be used with other tree models. 2) Added contitional checking for if resources were changed  whenver you close a frame it will check for changes and store that in the resource. The global check for changes method will iterate all open frames and all resources in the resource map asking if they have changes. 3) Number two led me back to the issue for wrong refernces to Game Info/Settings after load  I have identified the cause and applied a temporary patch. 4) Added the foundation for searching in resources and also placed the event panel in a tab in this area  what s interesting is that I have noticed that if the toolbar for it is set floatable and you float it out it will take the tab with it and it can still be redocked. This possibly menas a raw docking framework could be built from JToolBar.,pull up
(wip) cleanup,pull up
Partial Fix and Refactoring for JIRA issue SGF 236 enabling the <gfe:lookup region/> nested element syntax to function properly.,pull up
refactor jelisp tests  todo: fix load stack,pull up
Aravind |  00 | Made all Controller requests extend baserequest with channel.,pull up
Moved bytesRead test to HttpTest  Signed off by: Farid Zakaria <farid.m.zakaria@gmail.com>,pull up
documentListeners cleanup.    documentListeners is now Set<DocumentListener> instead of Map   added protected hasDocumentListeners() method   using foreach for documentListeners iteration   moved addDocumentListener and removeDocumentListener from BasicPanel to RootPanel   fixed null handling of addDocumentListener and removeDocumentListener according to javadoc   documentListeners is now private and final,pull up
NXP 10116   cleanup: pull up isConnectServerReachable() and remove useless override,pull up
Move more methods to BufferedRelayServer  to simplify further buffered implementations,pull up
removing MessagingTargetInterceptor  and adding new mechanism for initializing interceptors and contributors,pull up
Refactored kinding of Names and NameNodes.,pull up
refactor copied code from CpdReport and PmdReport into a common base class (oh  the irony!)  git svn id: https://svn.apache.org/repos/asf/maven/plugins/trunk@390771 13f79535 47bb 0310 9956 ffa450edef68,pull up
move methods in test classes,pull up
refactoring df4j nio* continued.,pull up
Refactored AOP code to allow for other aspect frameworks besides AspectJ to make use of the code.,pull up
Refactored out some common code.,pull up
Refactored protocol dependency collecting to context building.,pull up
refactor by creating an AbstractXmlDataSet,pull up
FACES 1915 Develop alloy:selectOneRadio (extend generated base class for consistency),pull up
cleanup on snapshot api,pull up
[refactor]: move log to firefly slf4j module,pull up
This update completes https://jira.duraspace.org/browse/DPS 88: it adds  Manifest REST API call to Durastore.  Essentially what happened here is that the mill jpa repo module was moved over from the mill project  the manifest rest and resource classes were moved from duraboss to durastore  and a new ManifestGeneratorImpl was written that works with the ManifestStore. This new setup depends on a property in the CATALINA_OPTS pointing to a properties file containing the properties specified in mill jpa repo/src/test/resources/mill config.properties. The property that must be set is:  Dduracloud.properties.path /path/to/props.,pull up
move date parsing to InstanceResource,pull up
Wired up first SQS enabled test. Refactored non vendor specific logic from NevadoMessage to AbstractMessage. Added string serialization to be able to put entire NevadoMessages into SQS body. Created send  receive  and delete functionality. Wired up simple message acknowledgement logic.,pull up
AGOVA 7 Create API and common IMPL for JSR 330 compliant framework More API cleaning (changing packages) and javadoc completion,pull up
"Merged revisions 8979 8980 9044 9045 9056 9080 9083 9091 9130 9131 9136 9139 9186 9187 9236 9239 9241 9258 9272 9288 9335 9342 9347 9359 9365 9368 9370 9374 9376 9378 9380 9451 9453 9455 9517 9524 9589 9591 9679 9682 via svnmerge from  https://svn.dev.java.net/svn/hudson/branches/clearcase 0.6 SNAPSHOT  ........   r8979 | redsolo | 2008 04 30 11:12:04 +0200 (on  30 apr 2008) | 1 line      Added new files for UCM activity based change log ........   r8980 | redsolo | 2008 04 30 13:48:45 +0200 (on  30 apr 2008) | 1 line      Moved command lsactivity to ClearTool ........   r9044 | redsolo | 2008 05 06 10:25:55 +0200 (ti  06 maj 2008) | 1 line      Move cleartool executable string into HudsonClearToolLauncher ........   r9045 | redsolo | 2008 05 06 10:37:33 +0200 (ti  06 maj 2008) | 1 line      Removed cleartool executable string away from ClearTool implementations ........   r9056 | redsolo | 2008 05 06 23:57:21 +0200 (ti  06 maj 2008) | 2 lines      Applied path for UcmActivity and UcmHistoryBuilder from Henrik.   Added OutputFormat and ClearToolFormatHandler to help with the clear tool formatting. ........   r9080 | redsolo | 2008 05 08 11:07:51 +0200 (to  08 maj 2008) | 1 line      [clearcase plugin] Add UCM parsing of changelog.xml (Patch from Henrik) ........   r9081 | redsolo | 2008 05 08 11:21:05 +0200 (to  08 maj 2008) | 1 line      [clearcase plugin] Add test for writing UCM changelog.xml ........   r9082 | redsolo | 2008 05 08 12:20:52 +0200 (to  08 maj 2008) | 1 line      [clearcase plugin] Added changlogaction from Henrik ........   r9083 | redsolo | 2008 05 08 13:18:41 +0200 (to  08 maj 2008) | 1 line      [clearcase plugin] lshistory now returns Reader instead of change logs ........   r9091 | redsolo | 2008 05 10 10:05:07 +0200 (lö  10 maj 2008) | 1 line      [clearcase plugin] Finished importing UCM changes from Henrik. ........   r9130 | redsolo | 2008 05 11 21:30:12 +0200 (sö  11 maj 2008) | 1 line      [clearcase plugin] Added patch to remove the """"view"""" from UCM Activity from Henrik Lynggaard ........   r9131 | redsolo | 2008 05 11 22:38:51 +0200 (sö  11 maj 2008) | 1 line      [clearcase plugin] More test files ........   r9136 | redsolo | 2008 05 11 23:20:01 +0200 (sö  11 maj 2008) | 1 line      [clearcase plugin] Corrected tests for UcmChangeLogAction ........   r9137 | redsolo | 2008 05 11 23:35:21 +0200 (sö  11 maj 2008) | 1 line      [clearcase plugin] Fixed failing tests for lshistory ct command ........   r9138 | redsolo | 2008 05 12 00:05:55 +0200 (må  12 maj 2008) | 1 line      [clearcase plugin] Fixed change log parsing for base and UCM SCMs. ........   r9139 | redsolo | 2008 05 12 00:12:41 +0200 (må  12 maj 2008) | 1 line      [clearcase plugin] Fixed compile error and tests ........   r9186 | redsolo | 2008 05 12 23:44:07 +0200 (må  12 maj 2008) | 1 line      [clearcase plugin] Applied patch to remove the """"view"""" from UCM Activity ........   r9187 | redsolo | 2008 05 12 23:47:04 +0200 (må  12 maj 2008) | 1 line      [clearcase plugin] Applied patch to add sub activities to change log ........   r9236 | lynggaard | 2008 05 14 21:18:27 +0200 (on  14 maj 2008) | 1 line      Dummy change to test developer access ........   r9239 | lynggaard | 2008 05 14 22:18:18 +0200 (on  14 maj 2008) | 1 line      [clearcase plugin 0.6 branch] UCM changelog page converted to activity based changelog ........   r9241 | lynggaard | 2008 05 14 23:05:55 +0200 (on  14 maj 2008) | 1 line      [clearcase plugin 0.6 branch] Preparations for UCM tagging support. Need to expose the mkbl cleartool command ........   r9258 | redsolo | 2008 05 15 10:45:50 +0200 (to  15 maj 2008) | 1 line      [clearcase plugin] Made get methods in UCM UcmActivity @exported ........   r9272 | lynggaard | 2008 05 15 21:43:45 +0200 (to  15 maj 2008) | 1 line      [clearcase plugin 0.6 branch] build extended changelog (changelog since last not failed build) ........   r9288 | lynggaard | 2008 05 15 22:57:11 +0200 (to  15 maj 2008) | 1 line      [clearcase plugin 0.6 branch] lsactivity needs the viewname ........   r9335 | lynggaard | 2008 05 16 21:10:00 +0200 (fr  16 maj 2008) | 1 line      [clearcase plugin 0.6 branch] if the user writes stream: as part of the stream name  then strip it. ........   r9342 | lynggaard | 2008 05 16 21:27:42 +0200 (fr  16 maj 2008) | 1 line      [clearcase plugin 0.6 branch] extra unittest to locate issue 1706 + 1707 ........   r9347 | lynggaard | 2008 05 16 23:46:39 +0200 (fr  16 maj 2008) | 1 line      [clearcase plugin 0.6 branch] Cleartool is particular about parameter ordering ........   r9359 | lynggaard | 2008 05 17 16:31:41 +0200 (lö  17 maj 2008) | 1 line      [clearcase plugin 0.6 branch] add toString method for easy debug ........   r9365 | lynggaard | 2008 05 17 19:43:40 +0200 (lö  17 maj 2008) | 1 line      [clearcase plugin 0.6 branch] Improve UCM specific changelog (issue  1601) ........   r9368 | lynggaard | 2008 05 17 20:56:14 +0200 (lö  17 maj 2008) | 1 line      [clearcase plugin 0.6 branch] Ensure changelog action is reset for extended changelog ........   r9369 | lynggaard | 2008 05 17 21:15:08 +0200 (lö  17 maj 2008) | 1 line      [clearcase plugin 0.6 branch] Improve ucm changelog  provide stream and user for sub activities  ........   r9370 | lynggaard | 2008 05 17 21:20:26 +0200 (lö  17 maj 2008) | 1 line      [clearcase plugin 0.6 branch] Remove """"seconds"""" from UCM changelog ........   r9374 | lynggaard | 2008 05 18 11:04:33 +0200 (sö  18 maj 2008) | 1 line      [clearcase plugin 0.6 branch] Fix tokenize issue on branch also ........   r9375 | lynggaard | 2008 05 18 11:48:52 +0200 (sö  18 maj 2008) | 1 line      [clearcase plugin 0.6 branch] Improve ucm changelog page ........   r9376 | lynggaard | 2008 05 18 12:15:18 +0200 (sö  18 maj 2008) | 1 line      [clearcase plugin 0.6 branch]Minor change to regexp generation ........   r9378 | lynggaard | 2008 05 18 16:12:56 +0200 (sö  18 maj 2008) | 1 line      [clearcase plugin 0.6 branch] new UCM fake cleartool setup ........   r9379 | lynggaard | 2008 05 18 16:17:22 +0200 (sö  18 maj 2008) | 1 line      [clearcase plugin 0.6 branch] re enable edittype icons in UCM ........   r9380 | lynggaard | 2008 05 18 17:21:04 +0200 (sö  18 maj 2008) | 1 line      [clearcase plugin 0.6 branch] lsactivity should be run from within the view ........   r9451 | redsolo | 2008 05 19 23:34:31 +0200 (må  19 maj 2008) | 1 line      [clearcase plugin] Move vob path handling out from lshistory into ClearCaseScm class. Fixed so load rules remove the \ and / before they are used in the lshistory command ........   r9453 | redsolo | 2008 05 20 00:11:46 +0200 (ti  20 maj 2008) | 1 line      [clearcase plugin] No need to quote the command line args as ArgumentListBuilder already does it ........   r9454 | redsolo | 2008 05 20 00:17:36 +0200 (ti  20 maj 2008) | 1 line      [clearcase plugin] Fixed problem that was introduced in my refactoring for vob paths ........   r9455 | redsolo | 2008 05 20 00:18:33 +0200 (ti  20 maj 2008) | 1 line      [clearcase plugin] Added tests for getbranchnames ........   r9517 | lynggaard | 2008 05 21 22:57:08 +0200 (on  21 maj 2008) | 1 line      [clearcase plugin 0.6 branch] remove full username from changelog as we now rely on hudson users to display that ........   r9524 | lynggaard | 2008 05 21 23:27:19 +0200 (on  21 maj 2008) | 2 lines      [clearcase plugin 0.6 branch] Defensive code to handle lshistory with empty activity names.    It appears that most (99%) version entries with empty activity names are version 0 or mkbranch items. this code is only there to catch it in case some real version has no activity. However that should ideally never happen ........   r9589 | lynggaard | 2008 05 22 21:36:12 +0200 (to  22 maj 2008) | 1 line      [clearcase plugin 0.6 branch] Add additional mkview documentation ........   r9590 | lynggaard | 2008 05 22 22:00:22 +0200 (to  22 maj 2008) | 1 line      [clearcase plugin 0.6 branch] small javadoc update ........   r9591 | lynggaard | 2008 05 22 22:24:47 +0200 (to  22 maj 2008) | 1 line      [clearcase plugin 0.6 branch] remove old """"extended changelog"""" code  as this is not the way we want to do it  ........   r9679 | redsolo | 2008 05 29 23:08:35 +0200 (to  29 maj 2008) | 1 line      [clearcase plugin] Fixed so the changelog actions are adding the %c (comments) to the lshistory format ........   r9682 | redsolo | 2008 05 29 23:19:10 +0200 (to  29 maj 2008) | 1 line      [clearacse plugin] Removed unused class ........   git svn id: https://svn.dev.java.net/svn/hudson/trunk/hudson/plugins/clearcase@10146 71c3de6d 444a 0410 be80 ed276b4c234a ",pull up
Transfer sponsors for new active amendment.  Modifies bill processor code to transfer sponsors when the active amendment changes.  Sponsors are already copied when an amendment is first created  but this was not enough in cases where new amendments were not immediately published or previous amendments were restored as active.  A unit test was added to test co/multi sponsor processing in these cases.  Additionally some refactoring was done on bill processors:    Consolidate xml and bill action parsing code because they parse   actions in the same format.   Reorganize xml billstat processor in an attempt to have a cleaner    easier to understand workflow.  Fixes  12151,pull up
TFJ 231  refactored Configuration  made HttpClient stateless  TFJ 280 ability to configure baseURLs  introduced following properties(default value) twitter4j.restBaseURL (http://api.twitter.com/1/) twitter4j.searchBaseURL (http://search.twitter.com/) twitter4j.streamBaseURL (http://stream.twitter.com/1/)  twitter4j.oauth.requestTokenURL (http://twitter.com/oauth/request_token) twitter4j.oauth.authorizationURL (http://twitter.com/oauth/authorize) twitter4j.oauth.accessTokenURL (http://twitter.com/oauth/access_token) twitter4j.oauth.authenticationURL (http://twitter.com/oauth/authenticate)  git svn id: http://yusuke.homeip.net/svn/twitter4j/trunk@472 117b7e0d 5933 0410 9d29 ab41bb01d86b,pull up
Refactored servlet and standalone to prepare for eventual non servlet based Ninjas,pull up
move groovy stuff in a special class to make it reusable,pull up
Develop alloy:commandButton component (extend generated base class for consistency),pull up
Make the Query and Result type safe by adding a T parameter which binds the Query type to the result Type. Also remove all the as*() methods  since now they aren t needed,pull up
moved extract flag to abstract class,pull up
Move method to get boolean property to BaseSourceCreator,pull up
Added the audio/read call.  There now exists an audio/read call  which is nearly the same as the video read call except for audio prompts. The audio and video objects have been refactored to make it easier to access and control media objects.  Closes  567,pull up
HTTPCLIENT 1156: Refactored NegotiateScheme into separate SPNegoScheme and KerberosScheme implementations; deprecated NegotiateScheme and related classes  git svn id: https://svn.apache.org/repos/asf/httpcomponents/httpclient/trunk@1233319 13f79535 47bb 0310 9956 ffa450edef68,pull up
Added write lock to remove  and read locks to the iterator methods.  Added first tests for concurrency.,pull up
Various refactorings to remove duplication,pull up
"Implemented """"insert"""" menu command  implemented more of the popup menu  replaced Prefs.protectRoot with Prefs.renamableRoots  ResourceList  * Added the duplicate function back in.  * Made the function set handle removal of listeners and reassignment of Refs  * Added indexOf function  * Made replace delegate to set  Listener  * Implemented insertResource  * Implemented the rest of the popup menu commands  * Added alternate versions of addResource and insertResource for use with strings and constants defined in Resource  * stringToRes now returns  1 for """"GROUP"""".  * Added a putNode method to handle common functionality like adding the node  expanding the tree and selecting the node.  Prefs  * Replaced protectRoot with renamableRoots  since allowing moving and deleting of root nodes can corrupt the file.  ResourceFrame  * Added abstract method commitChanges  removed abstract modifier from updateResource and implemented it.  * Removed implementations of updateResource from subclasses  except where additional actions were taken.  git svn id: https://lateralgm.svn.sourceforge.net/svnroot/lateralgm@180 8f422083 7f27 0410 bc82 93e204be8cd2 ",pull up
refactoring SoapUI Mock features usage and creation of request dispatcher,pull up
Moved SplitStep to splitstep package. Abstracted PredicateSplitStep and created uniform splitter.,pull up
refactoring  removing unnecessary interface  changing to use non deprecated methods in tests,pull up
tweaks. clean ups.,pull up
refactoring. extract tail builder classes and introduce AbstractTailDoubleArray class.,pull up
Refactored StringToOpenTypeConverter in order to reduce complexity.,pull up
NXP 21163: refactor to use different type of queue  moving dispatcher from queue manager to producer  start impl cqueuemanager,pull up
boleto  refactoring removendo interface Emissor renomeando EmissorPadrao para Emissor,pull up
* started refactoring in cycledetection extension  39 * fixed bug in linked trajectory,pull up
Major refactoring. Untangling. Separation of logic,pull up
Added better collection parameterised mutators to IntBitSet (e.g removeAll()) and update the unit testing ssomewhat.,pull up
Refactored JMS**Appender.,pull up
First batch of refactoring.,pull up
Moving equals() and hashCode() into Content since they re defined to be the same for all content.  They re still final methods.   jh,pull up
boleto  rafactoring removendo interface sacado renomeando SacadoPadrao para Sacado,pull up
Move the Record doRemoteAction call down to FieldList,pull up
added some bipart functions and refactor,pull up
Adds MySQL WKT/WKB codec test cases.  Refactors the codec unit tests,pull up
The initial JVstHost2 refactoring.,pull up
New branch refactoring the interfaces to support jLEMS,pull up
some refactors  git svn id: http://yusuke.homeip.net/svn/twitter4j/trunk@477 117b7e0d 5933 0410 9d29 ab41bb01d86b,pull up
Refactored Rule base classes around Rule interface instead of around AST Visitor interfaces.  Long term goal is to support additional languages beyond Java.  Organized like so:     pmd.AbstractRule          // Core Rule implementation    pmd.XPathRule             // Core XPath Rule implementation    pmd.java.AbstractJavaRule // Java specific Rule implementation    pmd.jsp.AbstractJspRule   // JSP specific Rule implementation    pmd.xxx.AbstractXxxRule   // Language XXX specific Rule implementation    ...  This is a start  there s a much larger reorganizing effort to get things in sync.  Additional work is needed on generalizing XPathRule.  git svn id: https://pmd.svn.sourceforge.net/svnroot/pmd/trunk@5734 51baf565 9d33 0410 a72c fc3788e3496d,pull up
Refactoring ivory.app classes to reduce code duplication.,pull up
"Latest WI implementation update from Gagnavarslan   support all characters in file/folder names (include URL encoded characters)   move """"digest_auth"""" directory and other WI related configuration into nuxeo platform wi backend module   bug fixes  etc. ",pull up
Gui tests refactoring  MultiPageChest support,pull up
CPK Refactoring  all tests passing in cpf pentaho  removed pluginsList,pull up
Moved common code between cascading & merging daos to an abstract class.   git svn id: https://source.jasig.org/person directory/trunk@2659 f5dbab47 78f9 eb45 b975 e544023573eb,pull up
Move test sections out of the menus.,pull up
Refactor cache a bit,pull up
Added: Two new @Test refactorings (pull to class level  push to method level),pull up
Refactored SSL tests to use the Java API rather than the Properties configuration  git svn id: https://svn.apache.org/repos/asf/mina/ftpserver/trunk@646274 13f79535 47bb 0310 9956 ffa450edef68,pull up
Refactor: make Operation an abstract class and use an anonymous in the insert action itself,pull up
Remove SSLv3 hardcoding,pull up
Refactor the primitive array and object array infrastructure.  Much more DRY than it was.,pull up
" 49 Add componentModel """"jsr330"""" o Refactor the other component model implementations to reduce code duplication ",pull up
"Part of https://jira.duraspace.org/browse/DURACLOUD 942  updates the S3 storage provider to set a bucket policy on all new spaces which moves all content to storage class """"Standard   Infrequently Accessed"""" after 3 days. Also adds an S3 task which sets the same bucket policy to existing spaces. Also removes S3 tasks which were used to set storage class item by item. ",pull up
removed Util1_4,pull up
"Merged revisions 8979 8980 9044 9045 9056 9080 9083 9091 9130 9131 9136 9139 9186 9187 9236 9239 9241 9258 9272 9288 9335 9342 9347 9359 9365 9368 9370 9374 9376 9378 9380 9451 9453 9455 9517 9524 9589 9591 9679 9682 via svnmerge from  https://svn.dev.java.net/svn/hudson/branches/clearcase 0.6 SNAPSHOT  ........   r8979 | redsolo | 2008 04 30 11:12:04 +0200 (on  30 apr 2008) | 1 line      Added new files for UCM activity based change log ........   r8980 | redsolo | 2008 04 30 13:48:45 +0200 (on  30 apr 2008) | 1 line      Moved command lsactivity to ClearTool ........   r9044 | redsolo | 2008 05 06 10:25:55 +0200 (ti  06 maj 2008) | 1 line      Move cleartool executable string into HudsonClearToolLauncher ........   r9045 | redsolo | 2008 05 06 10:37:33 +0200 (ti  06 maj 2008) | 1 line      Removed cleartool executable string away from ClearTool implementations ........   r9056 | redsolo | 2008 05 06 23:57:21 +0200 (ti  06 maj 2008) | 2 lines      Applied path for UcmActivity and UcmHistoryBuilder from Henrik.   Added OutputFormat and ClearToolFormatHandler to help with the clear tool formatting. ........   r9080 | redsolo | 2008 05 08 11:07:51 +0200 (to  08 maj 2008) | 1 line      [clearcase plugin] Add UCM parsing of changelog.xml (Patch from Henrik) ........   r9081 | redsolo | 2008 05 08 11:21:05 +0200 (to  08 maj 2008) | 1 line      [clearcase plugin] Add test for writing UCM changelog.xml ........   r9082 | redsolo | 2008 05 08 12:20:52 +0200 (to  08 maj 2008) | 1 line      [clearcase plugin] Added changlogaction from Henrik ........   r9083 | redsolo | 2008 05 08 13:18:41 +0200 (to  08 maj 2008) | 1 line      [clearcase plugin] lshistory now returns Reader instead of change logs ........   r9091 | redsolo | 2008 05 10 10:05:07 +0200 (lö  10 maj 2008) | 1 line      [clearcase plugin] Finished importing UCM changes from Henrik. ........   r9130 | redsolo | 2008 05 11 21:30:12 +0200 (sö  11 maj 2008) | 1 line      [clearcase plugin] Added patch to remove the """"view"""" from UCM Activity from Henrik Lynggaard ........   r9131 | redsolo | 2008 05 11 22:38:51 +0200 (sö  11 maj 2008) | 1 line      [clearcase plugin] More test files ........   r9136 | redsolo | 2008 05 11 23:20:01 +0200 (sö  11 maj 2008) | 1 line      [clearcase plugin] Corrected tests for UcmChangeLogAction ........   r9137 | redsolo | 2008 05 11 23:35:21 +0200 (sö  11 maj 2008) | 1 line      [clearcase plugin] Fixed failing tests for lshistory ct command ........   r9138 | redsolo | 2008 05 12 00:05:55 +0200 (må  12 maj 2008) | 1 line      [clearcase plugin] Fixed change log parsing for base and UCM SCMs. ........   r9139 | redsolo | 2008 05 12 00:12:41 +0200 (må  12 maj 2008) | 1 line      [clearcase plugin] Fixed compile error and tests ........   r9186 | redsolo | 2008 05 12 23:44:07 +0200 (må  12 maj 2008) | 1 line      [clearcase plugin] Applied patch to remove the """"view"""" from UCM Activity ........   r9187 | redsolo | 2008 05 12 23:47:04 +0200 (må  12 maj 2008) | 1 line      [clearcase plugin] Applied patch to add sub activities to change log ........   r9236 | lynggaard | 2008 05 14 21:18:27 +0200 (on  14 maj 2008) | 1 line      Dummy change to test developer access ........   r9239 | lynggaard | 2008 05 14 22:18:18 +0200 (on  14 maj 2008) | 1 line      [clearcase plugin 0.6 branch] UCM changelog page converted to activity based changelog ........   r9241 | lynggaard | 2008 05 14 23:05:55 +0200 (on  14 maj 2008) | 1 line      [clearcase plugin 0.6 branch] Preparations for UCM tagging support. Need to expose the mkbl cleartool command ........   r9258 | redsolo | 2008 05 15 10:45:50 +0200 (to  15 maj 2008) | 1 line      [clearcase plugin] Made get methods in UCM UcmActivity @exported ........   r9272 | lynggaard | 2008 05 15 21:43:45 +0200 (to  15 maj 2008) | 1 line      [clearcase plugin 0.6 branch] build extended changelog (changelog since last not failed build) ........   r9288 | lynggaard | 2008 05 15 22:57:11 +0200 (to  15 maj 2008) | 1 line      [clearcase plugin 0.6 branch] lsactivity needs the viewname ........   r9335 | lynggaard | 2008 05 16 21:10:00 +0200 (fr  16 maj 2008) | 1 line      [clearcase plugin 0.6 branch] if the user writes stream: as part of the stream name  then strip it. ........   r9342 | lynggaard | 2008 05 16 21:27:42 +0200 (fr  16 maj 2008) | 1 line      [clearcase plugin 0.6 branch] extra unittest to locate issue 1706 + 1707 ........   r9347 | lynggaard | 2008 05 16 23:46:39 +0200 (fr  16 maj 2008) | 1 line      [clearcase plugin 0.6 branch] Cleartool is particular about parameter ordering ........   r9359 | lynggaard | 2008 05 17 16:31:41 +0200 (lö  17 maj 2008) | 1 line      [clearcase plugin 0.6 branch] add toString method for easy debug ........   r9365 | lynggaard | 2008 05 17 19:43:40 +0200 (lö  17 maj 2008) | 1 line      [clearcase plugin 0.6 branch] Improve UCM specific changelog (issue  1601) ........   r9368 | lynggaard | 2008 05 17 20:56:14 +0200 (lö  17 maj 2008) | 1 line      [clearcase plugin 0.6 branch] Ensure changelog action is reset for extended changelog ........   r9369 | lynggaard | 2008 05 17 21:15:08 +0200 (lö  17 maj 2008) | 1 line      [clearcase plugin 0.6 branch] Improve ucm changelog  provide stream and user for sub activities  ........   r9370 | lynggaard | 2008 05 17 21:20:26 +0200 (lö  17 maj 2008) | 1 line      [clearcase plugin 0.6 branch] Remove """"seconds"""" from UCM changelog ........   r9374 | lynggaard | 2008 05 18 11:04:33 +0200 (sö  18 maj 2008) | 1 line      [clearcase plugin 0.6 branch] Fix tokenize issue on branch also ........   r9375 | lynggaard | 2008 05 18 11:48:52 +0200 (sö  18 maj 2008) | 1 line      [clearcase plugin 0.6 branch] Improve ucm changelog page ........   r9376 | lynggaard | 2008 05 18 12:15:18 +0200 (sö  18 maj 2008) | 1 line      [clearcase plugin 0.6 branch]Minor change to regexp generation ........   r9378 | lynggaard | 2008 05 18 16:12:56 +0200 (sö  18 maj 2008) | 1 line      [clearcase plugin 0.6 branch] new UCM fake cleartool setup ........   r9379 | lynggaard | 2008 05 18 16:17:22 +0200 (sö  18 maj 2008) | 1 line      [clearcase plugin 0.6 branch] re enable edittype icons in UCM ........   r9380 | lynggaard | 2008 05 18 17:21:04 +0200 (sö  18 maj 2008) | 1 line      [clearcase plugin 0.6 branch] lsactivity should be run from within the view ........   r9451 | redsolo | 2008 05 19 23:34:31 +0200 (må  19 maj 2008) | 1 line      [clearcase plugin] Move vob path handling out from lshistory into ClearCaseScm class. Fixed so load rules remove the \ and / before they are used in the lshistory command ........   r9453 | redsolo | 2008 05 20 00:11:46 +0200 (ti  20 maj 2008) | 1 line      [clearcase plugin] No need to quote the command line args as ArgumentListBuilder already does it ........   r9454 | redsolo | 2008 05 20 00:17:36 +0200 (ti  20 maj 2008) | 1 line      [clearcase plugin] Fixed problem that was introduced in my refactoring for vob paths ........   r9455 | redsolo | 2008 05 20 00:18:33 +0200 (ti  20 maj 2008) | 1 line      [clearcase plugin] Added tests for getbranchnames ........   r9517 | lynggaard | 2008 05 21 22:57:08 +0200 (on  21 maj 2008) | 1 line      [clearcase plugin 0.6 branch] remove full username from changelog as we now rely on hudson users to display that ........   r9524 | lynggaard | 2008 05 21 23:27:19 +0200 (on  21 maj 2008) | 2 lines      [clearcase plugin 0.6 branch] Defensive code to handle lshistory with empty activity names.    It appears that most (99%) version entries with empty activity names are version 0 or mkbranch items. this code is only there to catch it in case some real version has no activity. However that should ideally never happen ........   r9589 | lynggaard | 2008 05 22 21:36:12 +0200 (to  22 maj 2008) | 1 line      [clearcase plugin 0.6 branch] Add additional mkview documentation ........   r9590 | lynggaard | 2008 05 22 22:00:22 +0200 (to  22 maj 2008) | 1 line      [clearcase plugin 0.6 branch] small javadoc update ........   r9591 | lynggaard | 2008 05 22 22:24:47 +0200 (to  22 maj 2008) | 1 line      [clearcase plugin 0.6 branch] remove old """"extended changelog"""" code  as this is not the way we want to do it  ........   r9679 | redsolo | 2008 05 29 23:08:35 +0200 (to  29 maj 2008) | 1 line      [clearcase plugin] Fixed so the changelog actions are adding the %c (comments) to the lshistory format ........   r9682 | redsolo | 2008 05 29 23:19:10 +0200 (to  29 maj 2008) | 1 line      [clearacse plugin] Removed unused class ........   git svn id: https://hudson.dev.java.net/svn/hudson/trunk/hudson/plugins@10146 71c3de6d 444a 0410 be80 ed276b4c234a ",pull up
Refactor transactions abstraction to have a transaction local context.,pull up
greatly simplified the implementation of a pipe. found a general pattern that existed in all the pipes that exist so far and created an AbstractPipe that implemented this methods. Now all the instantiable pipes have two methods a constructor and a setNext() method. Very concise simple and clean. Test cases all pass.,pull up
"Move public test params to BaseStripeTest, add CustomerTest and refactor ChargeTest",pull up
* pushed down all non abstract non static methods to AbstractIoBuffer* Added more final modifiers to AbstractIoSessiongit svn id: https://svn.apache.org/repos/asf/mina/trunk@597545 13f79535 47bb 0310 9956 ffa450edef68,push down
Push the listIterator code down into the concrete implementation of AbstractURLPager so as to clear up a small design flaw where the abstract class knew about the concrete class.git svn id: svn://svn.jbidwatcher.com/jbidwatcher/trunk@507 b1acfa68 eb39 11db b167 a3a8cd6b847e,push down
Remove last pieces of old (now non working) clip region checking / Push down handful of fields from Box to BlockBox,push down
Fix memory leak in color cache / Push CalculatedStyle field down to those derived valueswhich need it and remove it from the others / Remove InheritedLength class (whichoriginally resulted in (my) misinterpretation of the spec),push down
TTALE 184 : Pushing all as one commit,push down
HV 1148 Pushing logic for appending path nodes to specific sub types of ConstraintLocation,push down
Simplify codegen and push filtering to caller.,push down
Pushed bounding box code into line and polyline as it is not needed on points.git svn id: http://svn.mkgmap.org.uk/mkgmap/trunk@160 25d90789 57f7 4ee0 8453 03a3dfeeeb22,push down
Road def pushed down to MapLine as it cannot apply to a pointgit svn id: http://svn.mkgmap.org.uk/mkgmap/branches/nod@640 25d90789 57f7 4ee0 8453 03a3dfeeeb22,push down
Aravind | 00 | Pushed httpclientservice related things to gateway.,push down
m_executor is pushed down from RubyTask to ARubyTask,push down
added push down predicates to the core API and supporting classes for those graph database that don t support this notion. the Vertex API has changed.,push down
handling push link contract results per message not per operation,push down
A bit of work on the symbol table class names are now recorded in the GlobalScope. Come to think of it they should probably be recorded in SourceFileScope or some such interim layer instead to allow for private inner classes. At any rate that s where they are for now. I also pushed some stuff down from AbstractScope into LocalScope where it seemed to fit better. Removed a useless unit test added some good ones. Generally making progress towards fixing the  unused private field false positive when inner class private field is referenced from enclosing class git svn id: https://pmd.svn.sourceforge.net/svnroot/pmd/trunk@2751 51baf565 9d33 0410 a72c fc3788e3496d,push down
MECLIPSE 344 : connecting existing workspace artifact projectsPatch submitted by Richard van NieuwenhovenPush down from AbstractIDESupportMojo to Eclipse Mojo everything related to eclipse workspacegit svn id: https://svn.apache.org/repos/asf/maven/plugins/trunk@628091 13f79535 47bb 0310 9956 ffa450edef68,push down
[MDEP 494] Push down ArtifactCollector to ListRepositoriesMojo that s the only one using it. Also simplifies unittests a bit.git svn id: https://svn.apache.org/repos/asf/maven/plugins/trunk@1686934 13f79535 47bb 0310 9956 ffa450edef68,push down
FCREPO 838 & FCREPO 839: Allow both parent child and child parent relationshipsRIRelationshipResolver based on querying resource index; child parent andparent child relationships specified in config melcoe pep.xml; test case addedto match hierarchical collection policy using range of relationships.,push down
Move SharedLogLogic specific getCheckedOperations from superclass move operation resolving to AbstractLogLogic,push down
Introduce new super class for ShortestPath/CHthis will help us design a better common test for these algorithmsand an upcoming bidirectional version,push down
Moved mouse over related code to subclass  MouseOverMouseManager  of class  DefaultMouseManager  so that it can be used optionally.,push down
moved references to slf4j and classic into subclassWhen the ConcurrentServerRunner is moved to core it cannot referencedirectly the Logger and LoggerContext objects. Now the base classdelegates its logging to a subclass.,push down
Move the custom UTF 8 decoder into a subclass of Encoding.Add support to the UTF 8 decoder for Unicode code points above U+FFFF(represented as a surrogate pair in Java). These values can be generatedby the backend from 8.1. The reverse path is already handled by the JVM s ownUTF 8 encoder.Add a number of unicode encode/decode tests to make sure it s all working.,push down
moved real code to hidden class made jgroups imp subclass added init(),push down
Added RemoteSharedObjectDescription subclass of SharedObjectDescription. Updated implementations to deal with SharedObjectDescription or RemoteSharedObjectDescription,push down
Fix visitor the jjtAccept methods have to be in theconcrete subclasses,push down
Split JavaQualifiedName into type and operation specific subclasses,push down
Enable creation and retrieval of org webhooksmade GHHook abstract and created two concrete subclasses for organd repo hooks. Created utility class GHHooks to manage creationand retrieval of org/repo hooks with minimal code duplication. Theseare invoked by GHOrganization and GHRepository respectively.,push down
make mongosplitter an abstract class move splitter implementations into subclasses,push down
The SpringBox layout is now usable as a base class.The old GraphStream SpringBox graph layout is now a cut into aBarnesHutLayout class that serves as base for several force based layoutalgorithms and a new layout.implementations package contains a SpringBoxclass that inherit BarnesHutLayout.Nothing changed in the layout in itself excepted it is now possible tocreate new force based layouts more easily using BarnesHutLayout as abase.,push down
Reorganize abstract processor methods.Put some functions specific to bill processing in AbstractBillProcessorand make all bill processors inherit that class.,push down
!! once again a temporary commit to keep modifications : DO NOTCOMPILE !!* modified the QueryOption mechanism once again (should be the lastversion) to be extensible. Now QueryOptions are inherited fromQueryOption and declare their own typed and named fields. It s easierfor understanding and tracing options but it requires some more castsin the code!* modified the whole JDBCPersistenceManager according to the newoption mechanism and added a specific QueryOptionJdbcContext forstatement reuse,push down
Fixed message ID in topicsAdded method inheritance testRefactored out NevadoQueueConnection and NevadoTopicConnection,push down
This update is the first incremental check in for https://jira.duraspace.org/browse/DURACLOUD 486 .It primarily refactors and cleans up the duplicationservice in preparation for adding reporting and error re queuing.git svn id: https://svn.duraspace.org/duracloud/trunk@616 1005ed41 97cd 4a8f 848c be5b5fe45bcb,push down
Removed duplicate customParams for tiledwms layer,push down
removing redundant functions in ExtGraph (duplicated by sesame s GraphUtil). movign implementations of util methods to Graphs. ExtGraph now an interface ExtGraphImpl the implementation calls are jsut delegated to Graphs. Adding two new Graph extensions which ExtGraph implements IOGraph for RIO util methods and FunctionalGraph for supporting Guava functional classes. Renaming StatementFunctions to Statements adding additional functional utility methods on there. Adding TestGraphs for testing the main Graphs funcionality. generally cleaning up ExtGraph/ExtGraphImpl,push down
Generalize RuleViolation treatment. Add abstract base class and language specific rule violation implementations. To be consistent with other PMD code renamed IRuleViolation to RuleViolation (I never liked this Hungarian notation crap in Java code anyway). Extracted the RuleViolationComparator as a standalone class and fixed it s implementation (was seriously broken) so the RuleViolation comparison is very well defined. Changed Report to use a List of violations internally instead of a Set since the change to the RuleViolationComparator was causing truly duplicate RuleViolations to be dropped. git svn id: https://pmd.svn.sourceforge.net/svnroot/pmd/trunk@5946 51baf565 9d33 0410 a72c fc3788e3496d,push down
Enable creation and retrieval of org webhooksmade GHHook abstract and created two concrete subclasses for organd repo hooks. Created utility class GHHooks to manage creationand retrieval of org/repo hooks with minimal code duplication. Theseare invoked by GHOrganization and GHRepository respectively.,push down
Moved getNamespaceUri() down to ForeignBlock only. Will make APIP easier later...,push down
minor refactoring to further strip down API of `TokenStreamFactory`,push down
Move group communication down to jvstm ispn onlyThis commit complements cc88fe2 which first added support for groupcommunication in all JVSTM based backends. It is considered best for now tokeep this backend specific so in this commit we move such functionalityto the only backend that currently extends jvstm common: jvsmt ispn.,push down
API BREAKAGE: Resource bundles may now override the default time format. TimeUnit decoupled from TimeFormat,push down
Change Address model to be an interface. Will allow consuming projects to override this funcitonality more easily.,push down
created a generic Experiment extended by ScalabilityExperiment andother minor refactoring,push down
Moved mouse over related code to subclass  MouseOverMouseManager  of class  DefaultMouseManager  so that it can be used optionally.,push down
Move SharedLogLogic specific getCheckedOperations from superclass move operation resolving to AbstractLogLogic,push down
moved references to slf4j and classic into subclassWhen the ConcurrentServerRunner is moved to core it cannot referencedirectly the Logger and LoggerContext objects. Now the base classdelegates its logging to a subclass.,push down
move copyPoms property from AbstractFromDependenciesMojo to CopyDependenciesMojogit svn id: https://svn.apache.org/repos/asf/maven/plugins/trunk@1481285 13f79535 47bb 0310 9956 ffa450edef68,push down
make mongosplitter an abstract class move splitter implementations into subclasses,push down
Project :: SlimfastRefactored node hierarchy so that leaf nodes (text comments scripts etc) use 24 bytes vs 40 bytes each.,push down
o pushing the forking code into the booter itselfgit svn id: https://svn.apache.org/repos/asf/maven/surefire/trunk@356189 13f79535 47bb 0310 9956 ffa450edef68,push down
First pass for pushing data into s ramp from a maven deploy. Currentlyit s very targetted the maven build can attach a XSD file to the build(using the build helper plugin). That file will get uploaded to s rampwith GAV information configured as custom s ramp properties.,push down
efactored the derived artifact logic it has been pushed into the persistence manager now. Callers (like the atom layer) no longer need to do the derived artifact logic. This allows Derivers to participate in the same JCR session as the source artifact. It also more easily allows Derivers to modify the source artifact meta data from content (e.g. setting the WSDL targetNamespace attribute).,push down
Push all references to URLs that result in a network access into a JConfig factory method so I can intercept it and replace URLs at will. This will allow for testing!,push down
Massive cleanup of code; pushed more implementations down to private packages making more (re)use of interfaces.,push down
Push CrawlURI and related constants down to modules subproject/package(many),push down
Add pullup and pushdown for subprocesses,push down
Fixed pullup and pushdown for nested SubProcesses,push down
Cleanup pushdown/pullup and blackbox/whitebox features and fix multipageeditor tab selections and navigation from content outline view.,push down
Moves the code within the bulk replication processor which handles the push of the source file to the destination into a new class (Replicator) in order to allow the RepMapper to run that piece in a separate thread and still respond to hadoop to indicate that the work is in progress. This is very similar to the use of the FileCopier in the base processor when transferring the source file from the source store onto the local file system. This resolves https://jira.duraspace.org/browse/DURACLOUD 319.git svn id: https://svn.duraspace.org/duracloud/trunk@291 1005ed41 97cd 4a8f 848c be5b5fe45bcb,push down
Improved handling of boolean options and defaults. Refactored tests touse the command line injection. Pushed down ScheduleLogicimplementation to DefaultScheduleLogic and refactored for more detailedlogging.,push down
Ashok/Aravind | 00 | Introduced valid state transitions and pushed logic from service to subscription module.,push down
Added machinery for a pushing a filtered call down to HBase + codecleanup,push down
Bug fixes for pushing down predicates,push down
Move the last import information directly in the repository helper Those method are generic enough so the implementation of mercurial or bazaar import method should be easier. The save method could also be pushed into the helper only the file location could be specific to the repository type.,push down
* pushed down all non abstract non static methods to AbstractIoBuffer* Added more final modifiers to AbstractIoSessiongit svn id: https://svn.apache.org/repos/asf/mina/trunk@597545 13f79535 47bb 0310 9956 ffa450edef68,push down
Push down some projections and queries from Hive to MongoDB (HADOOP 90).Any binary operator supported by IndexPredicateAnalyzer can be part of apushdown predicate to MongoDB. Other operators are currently unsupported somore advanced filtering is done Hadoop side.,push down
Refactoring pushed property mgmt functionality into new superclass now shared by the report renderersgit svn id: https://pmd.svn.sourceforge.net/svnroot/pmd/trunk@7294 51baf565 9d33 0410 a72c fc3788e3496d,push down
More refactoring; mainly pushing more stuff out of MD.java and into the clients. This may end up getting pushed back in again but I think it s the right thing to do for now. git svn id: https://pmd.svn.sourceforge.net/svnroot/pmd/trunk@171 51baf565 9d33 0410 a72c fc3788e3496d,push down
push assert methods from BaseTestCase to ERXTestCase and re factor removing BaseTestCase.,push down
Refactor Maven config params and Push/PullCommandsAllow all mojos to run without Maven project (ie pom.xml).Switch to @requiresOnline annotation to disable mojos when offline.Change projectConfig param from String to File.Extract common options and *some* common code from Push/PullMojo and Push/PullCommand.Add module related params to PushPullMojo.,push down
Small effort to further reduce the amount of fiddly Saxon dependent code,push down
encapsulate Matcher create in factory method and implement the Matcher logic in a MatcherImpl subclass,push down
Moved  prompt  to (only) item del settings,push down
Start to create new layout for the ToolbarGroupDodckStation new version . In this purpose the main panel of an AbstractToolbarDockStation is defined in the subclasses an no more AbstractToolbarDockStation class itself.,push down
Moved mouse over related code to subclass  MouseOverMouseManager  of class  DefaultMouseManager  so that it can be used optionally.,push down
split the layout into two classes made layout be an interface instead of a class. moved the layout code into default layout. Issue number: Obtained from: Submitted by: Reviewed by:,push down
Separated current state Context into ContextImpl and the rest into SharedContext.,push down
Refactored the css package to allow a clean separation from the core.,push down
one more refactoring to minimize dependencies,push down
Reworked report builders so that they can display descriptions and tags are defined on the reports themselves rather than the base classes,push down
separated out the base MavenRepository class to enable subtyping git svn id: svn://anonsvn.hudson labs.org/trunk/hudson/backend/update center2@32294 281f4120 3fa0 11df aa16 63b581e3290d,push down
Move group communication down to jvstm ispn only This commit complements cc88fe2 which first added support for group communication in all JVSTM based backends. It is considered best for now to keep this backend specific so in this commit we move such functionality to the only backend that currently extends jvstm common: jvsmt ispn.,push down
FCREPO 838 & FCREPO 839: Allow both parent child and child parent relationships RIRelationshipResolver based on querying resource index; child parent and parent child relationships specified in config melcoe pep.xml; test case added to match hierarchical collection policy using range of relationships.,push down
Move clustered tests to ClusteredEventBusTestBase,push down
Made loggly reporting extendable,push down
Removed duplicate customParams for tiledwms layer,push down
refactored TypeMapping hierarchy and removed some obsolete methods,push down
Moved checkPeriodicBoundary method to the only algorithm where it is used.,push down
removing redundant functions in ExtGraph (duplicated by sesame s GraphUtil). movign implementations of util methods to Graphs. ExtGraph now an interface ExtGraphImpl the implementation calls are jsut delegated to Graphs. Adding two new Graph extensions which ExtGraph implements IOGraph for RIO util methods and FunctionalGraph for supporting Guava functional classes. Renaming StatementFunctions to Statements adding additional functional utility methods on there. Adding TestGraphs for testing the main Graphs funcionality. generally cleaning up ExtGraph/ExtGraphImpl,push down
Change Address model to be an interface. Will allow consuming projects to override this funcitonality more easily.,push down
Improve BiomeGenerator and BiomeCache handling The BiomeCache class has it s implementation moved to Common. Our cache is more efficient for our needs than Mojang s cache as it can better handle virtual biomes. Our cache has very similar API to Mojang s cache for now. Previously there was a biome generator called VanillaBiomeGenerator that had to be special cased. Now it s up to the implementation of TC Common (either TC Bukkit or TC Forge) to register a vanilla biome generator that properly implements BiomeGenerator. There is one area left where the VanillaBiomeGenerator should still be special cased. [Bukkit/Forge]VanillaBiomeGenerator gets its information from Mojang s WorldChunkManager. The Biome(Gen)Base arrays are converted to int arrays. If you would use TCWorldChunkManager (extends WorldChunkManager) to get information from the BiomeGenerator you would get infinite recursion. To make the code more maintainable a check has been added to the [Forge/Bukkit]VanillaBiomeGenerator classes (as well as documentation to the class).,push down
Add one more test extract duplication,push down
implementing HiLite functionality in the GUI adding action listeners and actions in the menus. moved the hilite filtering to the trellis menu (since it does not concern the single plate). adding necessairy fields in the HeatMapModel. implemented a getPlatesToDisplay method. before this was in the Trellis but with the hiliting it had to be adapted too and I found it belongs to the model. adding conditions in the rederers (HeatWell HeatTrellis) to pick the right color changing the ScreenColorScheme to use the KNIME colors for selection and hiliting.,push down
ExecStopTask class is extracted from Runtask down. protected run method is renamed to exec .,push down
refactored pipelinebase so it is usable to implement SharedJedisPipeline as well.,push down
Move readonly command to ClusterCommands Moved from Binary Jedis to Jedis since BinaryJedis doesn t implement ClusterCommands,push down
Fixed message ID in topics Added method inheritance test Refactored out NevadoQueueConnection and NevadoTopicConnection,push down
Splitting the FileTokenFactory into two parts. FileTokenFactory does the basic translation DatabaseFileTokenFactory adds a few extra functions that depend on knowing which daemon the database module resides at.,push down
Switched to a common getMaxLen/MinLen implementation for all attribute types.,push down
move newNumber to ConfigNumber rather than AbstractConfigValue,push down
Rewritten the State class so that we can gather the information we need to obtain the correct bit widths. Implements the same cases as before.  git svn id: http://svn.mkgmap.org.uk/mkgmap/branches/numbering@2400 25d90789 57f7 4ee0 8453 03a3dfeeeb22,push down
Make TaskHandlerActionContext an interface  and use InlineExecutionStrategyExecutor and TestContextCreator to isolate code from action contexts.  (B 11815),push down
A lot of changes...,push down
Fixed  172,push down
expose the resolved command in order to get access to the pipeline meta information   move the BaseShellCommand to the java lang package,push down
minor test improvements,push down
moved checkEventSequence() to FlushTest,push down
BackwardParser fixed,push down
Cleaner implementation  Added AbstractWebSocket for a cleaner implementation,push down
Added documentation to subroutines. Refactored buffer local variables a bit. Refactored subroutines handling strategy.,push down
Display in view columns and tables from the query  In the view display columns and table ectract from the query.   add an sql parser   model modifications      move Columns reference from AbstractTable to Table      add new class ViewElement      in View add references: columns and tables,push down
added some more functions  g:round()  g:union()  and their respective test cases. Cleaned up function implementations some more.. Moved GraphFunctionHelper.,push down
More changes towards a massive refactoring of the AuctionServer class  to be more specific  more testable  and more sane.  git svn id: svn://svn.jbidwatcher.com/jbidwatcher/trunk@49 b1acfa68 eb39 11db b167 a3a8cd6b847e,push down
port options from old codebase   improve line break compatibility   implement smart/auto indent,push down
Reorganize abstract processor methods.  Put some functions specific to bill processing in AbstractBillProcessor and make all bill processors inherit that class.,push down
Rework of WampMessage serialization. Added binary message using Message Pack.,push down
Hopefully the last of the big exceptions refactorings. I went through all of the places we re adding context to our Errors object and made sure we re never doubling up    specifing the same injection point or key multiple times.  The new errors have nice  at  lines for parameters  fields and linked bindings. Hopefully this makes it easier to follow the stacktraces. Additional context (such as the binding s origin in a module) could be added later if desired. Currently we have module specific sources in CreationExceptions  and plain old binding sources elsewhere. The end result is messages that can look like this:  com.google.inject.ProvisionException: Guice provision errors:  1) Error injecting constructor  java.lang.UnsupportedOperationException   at com.google.inject.ProvisionExceptionTest$RealD.<init>(ProvisionExceptionTest.java:284)   at binding for com.google.inject.ProvisionExceptionTest$RealD.class(ProvisionExceptionTest.java:284)   at binding for com.google.inject.ProvisionExceptionTest$D.class(ProvisionExceptionTest.java:1)  1 error  git svn id: https://google guice.googlecode.com/svn/trunk@652 d779f126 a31b 0410 b53b 1d3aecad763e,push down
Added Couchbase Views  Change Id: I09d4f8751ca8f308e986d07954d7e755af6aa2d8 Reviewed on: http://review.couchbase.org/8401 Tested by: Matt Ingenthron <matt@couchbase.com> Reviewed by: Matt Ingenthron <matt@couchbase.com>,push down
made ws server write operations truly asynchronous separated WebSocket interface and implementation introduced WebSocketFactory to allow users to better customize their websockets,push down
Moved a lot of classes from jaxrs to core.,push down
SC QCADOOMES 626 small fixes,push down
Extend functionality of ResourceManager to be able to handle IPv4 and IPv6 multicast addresses.,push down
Add CardReader functionality and tests Fix header appending to respect api key vs auth token  not both  [ 80581522],push down
More refactoring of simulation specification classes.,push down
Implement a default AbstractDomainObject in core  * Closes  9.  * Fixed getDomainClassRoot() in pt.ist.fenixframework.dml.PojoCodeGenerator to   return the String refering the CoreDomainObject.,push down
moved references to slf4j and classic into subclass  When the ConcurrentServerRunner is moved to core  it cannot reference directly the Logger and LoggerContext objects.  Now the base class delegates its logging to a subclass.,push down
Add support for Infinispan remote listeners  * Added support for ISPN remote listeners * Code refactoring of cache listener * Added ISPN 7.0 HotRod service and server config file,push down
Major refactoring to remove deprecated `JsonParser.Feature`s altogether,push down
Created AjaxSeleniumProxy for obtaining AjaxSelenium thread local context; moved unsupported Selenium API methods from TypedSelenium to UnsupportedTypedSelenium,push down
Small effort to further reduce the amount of fiddly Saxon dependent code,push down
"exploit new  sourcepath option   removed all """"guessing"""": no more guessing of members  classes and type casts (removed the corresponding compiler options too). The """"downside"""" is that all imports must be accessible and  parseable at compile time. This means that we will also need something like a  classpath before we can use this inside our maven plugin to resolve dependencies on Jangaroo libraries. The upside: jooc warnings should be taken seriously now! Splitted analyze() phase into scope() and analyze() changed parser to parse dotted identifier sequences as QalifiedIde and increased priority of new operator to be higher than dot: new a.b.c().d is now correctly parsed as dot(new(ideexpr(qide(""""a.b.c""""))) """"d"""") handled all code generation for qualified and unqualified ide expressions in Ide and QualifiedIde generateCodeAsExpr()   no more tree rewriting in DotExpr and elsewhere (i think we can remove the parent node slot in AstNodes and change the return type of analyze() to void code generation now adds the package prefix for imported identifiers and the $$private prefix for private static members. This should be more efficient (and less magical) than the access via  with . We should be able to remove the with statements now. renamed MethodDeclaration to FunctionDeclaration as it is used for both. added AST node for as expressions  [git p4: depot paths   """"//coremedia/jangaroo/"""": change   177049] ",push down
Various code improvements. Yea  I said that. Kill me : ),push down
Extended generated API with InitSocket for now.,push down
updated already existing Entity base classes to incorporate latest API changes   refactored mysql db stuff again (TODO: move to API)   added CanaryPlayer (TODO: implement)   added CanaryPlayer handling to OPlayerMP   fixed getPlayer in CanaryEntityLiving,push down
Refactor redis cluster connection handler and add JedisAskDataException handling,push down
refactored PDPRoadModel system,push down
some refactoring on UserProfile and AttributesDefinition,push down
fixed naming issues for SWITCHYARD 68,push down
MenuPieces are now organized in a tree  git svn id: http://svn.javaforge.com/svn/DockingFrames/trunk@219 3428d308 0d2e 0410 b3d4 94d0fefcacdf,push down
fix GSCoverageEncoder. fix integration some test. TODO run integration tests.,push down
Reworked the HTML exporting functionality in the same way as was done for the CSV exporter: now a utility class is used to generate the HTML output. All tools that exported to HTML were rewritten to this new approach.,push down
Big Refactoring: * Added IoProcessor   a thin layer which is similar to the reactor pattern * Renamed AbstractIoFilterChain to DefaultIoFilterChain because of the abstract methods of AbstractIoFilterChain are now moved to IoProcessor interface * Moved common parts of various IoFilterChain implementations to DefaultIoFilterChain * Removed other unnecessary IoFilterChain implementations * Added IoSession.getProcessor() so that DefaultIoFilterChain can access the associated IoProcessor * Extracted interface from SerialSession  and all the implementation goes to SerialSessionImpl    git svn id: https://svn.apache.org/repos/asf/mina/trunk@576070 13f79535 47bb 0310 9956 ffa450edef68,push down
minor changes after value expression review.,push down
Improved osgi tests and simplified code ( 634),push down
NodeGroup refactoring almost complete...,push down
changes implementing enhancement 8 and code review 10  11,push down
Refactor OAuthAppSettings by splitting interface and move builders to implementation. AgoravaExtension in CDI now link OAuthApplication annotation to default builder implementation,push down
Fixes for Issue 310   Modified ProxyMap to separate many map related methods from proxy collection,push down
Refactor JwtProfile and OidcProfile ( 843),push down
Schema cache: Avoid taking too many FieldTypes snapshots  i.e. while creating or updating a FieldType.    git svn id: svn+ssh://dev.outerthought.org/outerthought/lilyproject/trunk@5157 b80d95f8 e103 0410 bd55 e03a9dc29394,push down
Remove notion of Chunk and make an overral simplification,push down
More cleanup  aiming to remove Content reference in box,push down
split the layout into two classes made layout be an interface instead of a class. moved the layout code into default layout.   Issue number: Obtained from: Submitted by: Reviewed by:,push down
Idea  > Ide  IdeaPlugin  > IdePlugin and so on... + throw exception if bad IDE version + refactored findClass test,push down
[AESH 103] Settings is now an interface  SettingsBuilder should now be the default way of creating a Settings object,push down
decommissioned ReconfigureOnChangeFilter and replaced it with  ReconfigureOnChangeTask  added ScheduledExecutorService to Context,push down
Rework compiler stack into top level (program  function  basic block) compilers and low level (chunking strategies  optimized) compilers.,push down
Heatmap properties view finished  improvements on ColorScale library to allow generic drawing of scales.  git svn id: https://bg.upf.edu/svn/gitools/trunk@621 1b512f91 3386 4a98 81e7 b8836ddf8916,push down
Simplified AbstractProtocolEncoderOutput  git svn id: https://svn.apache.org/repos/asf/mina/trunk@568573 13f79535 47bb 0310 9956 ffa450edef68,push down
Changed schema for relay  first version of parsing complete,push down
TFJ 231 extracted an interface from Configuration class  introduced ConfigurationBase. removed static factory factory method. TwitterFactory.getDefaultInstance() was too verbose  and meaningless in terms of cost efficiency. profiding a default constructor should be enough.  git svn id: http://yusuke.homeip.net/svn/twitter4j/trunk@502 117b7e0d 5933 0410 9d29 ab41bb01d86b,push down
fixed  88   RFC proxies have now separate parsing and serialization,push down
Refactor to make dashboard possible,push down
Working on analysis examples. intogen biomart source configuration fixed.  git svn id: https://bg.upf.edu/svn/gitools/trunk@995 1b512f91 3386 4a98 81e7 b8836ddf8916,push down
HV 84 Introduced a proper implementation for PropertyDescriptor and refactored code.   Also made some javadoc changes to the api.  git svn id: https://svn.jboss.org/repos/hibernate/validator/trunk@16102 1b8cb986 b30d 0410 93ca fae66ebed9b2,push down
removing redundant functions in ExtGraph (duplicated by sesame s GraphUtil).  movign implementations of util methods to Graphs.  ExtGraph now an interface  ExtGraphImpl the implementation  calls are jsut delegated to Graphs.  Adding two new Graph extensions  which ExtGraph implements IOGraph for RIO util methods and FunctionalGraph for supporting Guava functional classes.  Renaming StatementFunctions to Statements  adding additional functional utility methods on there.  Adding TestGraphs for testing the main Graphs funcionality. generally cleaning up ExtGraph/ExtGraphImpl,push down
Fix LBCORE 74      HTMLLayoutBase now takes into custom conversion words.      Moved StringListAppender to c.q.l.classic.testUtil package,push down
merged OrientGraph into Blueprints. This includes implementations of Graph Vertex Edge    operational semantics validated through Property Graph Test Suite. Updated README.textile and CHANGELOG.textile to reflect OrientDB inclusion.,push down
Fixed bugs with validation of the model. Also i18n ized the model validation messages.,push down
Really simplified starters  removed StarterSet  just an inferface for compatibility  a lot of useless method removed,push down
Divide Color class to three classes (Color interface  RGBColor class  HSBColor class). Remove ColorMode. Refactoring many sources.,push down
refactored userinfo serializer,push down
remove I prefix from interface names,push down
Change to Digest / MutableDigest to replace HashMap with 2 arrays (uses less memory): https://issues.jboss.org/browse/JGRP 1331,push down
UDT and IPv6 improvments,push down
The SpringBox layout is now usable as a base class.  The old GraphStream SpringBox graph layout is now a cut into a BarnesHutLayout class that serves as base for several force based layout algorithms and a new layout.implementations package contains a SpringBox class that inherit BarnesHutLayout.  Nothing changed in the layout in itself  excepted it is now possible to create new force based layouts more easily using BarnesHutLayout as a base.,push down
TFJ 355 make PagableResponseList mocking test friendly Introduced PagableResponseImpl  and PagableResponseListImpl which are not final class.,push down
Improved Unit Tests / branch coverage.,push down
refactoring,push down
* Added ErrorReportFrame for easier generic report. * Major changes in ROI classes (WARNING):    ROI class has more methods.    better 3D  4D and 5D ROI support.    better BooleanMask integration in ROI.    many others changes related to ROI and BooleanMask in general. * Base kernel ROI are now plugins. * Point3D / Point4D / Point5D classes improvements. * Rectangle3D / Rectangle4D / Rectangle5D classes improvements. * Colormap tabs are now colored to reflect the channel colormap. * Prelemenary Bio Formats automatic error report. * Added many color conversion methods and tools in ColorUtil class. * Added Overlay.isAttached(Sequence) method. * Added ByteArrayConvert.read/writeXXX() methods (handy to serialization). * Rewrote SequenceChooser class (cleaner and updated to new method). * Removed the useless ROI tooltips. * Severals fixes and tweaks. * Some refactoring.,push down
refactor the loading of resources,push down
Moved some code out of DiscardableNodeCleaner and into various Node classes   git svn id: https://pmd.svn.sourceforge.net/svnroot/pmd/trunk@3050 51baf565 9d33 0410 a72c fc3788e3496d,push down
enhanced SimpleRetentionStoreReader to support different retentions,push down
Fix [JACKSON 753] for 2.0  clean up otherwise,push down
fix  1632: JavacAST: use new Log method for jdk11  Some methods of AbstractLog are removed in jdk11. Fix JavacAST.Jdk9Plus to use new log methods added from jdk9.,push down
make mongosplitter an abstract class  move splitter implementations into subclasses,push down
JFG 889: Refactoring of Dao; Add TestEnvironment model  dao and service; Add tests for Dao; Disable some PMD checks.,push down
refactored PDPModel such that it allows to be decorated,push down
changes to prepare the addition of Overpass as an input source,push down
scj: cleanup in RTSJ classes,push down
NXP 7279: cleanup rights on public / private Social Workspace. Cleanup unit tests,push down
Replaced old default value code with PrestoDataProvider.ChangeSetHandler.,push down
Refactored the plugin.  * extracted deploy strategies into separate components * mojos got radically simpler (1k lines vs 30ish) * other smaller fixes  like reshuffle,push down
[LOGTOOL 21] Initial work for supporting the new @Param annotation with some major refactoring.,push down
Refactored conversion result to be an interface; removed BaseTest; re enabled tests that were temporarily disabled.,push down
wcet: Refactor supergraph,push down
OOZIE 1770 Create Oozie Application Master for YARN (asasvari pbacsko rkanter gezapeti),push down
removed getCFMLEngineImpl method from ConfigWeb,push down
more refactoring of symbol table.  getting nicer all the time... and more tests  too....   git svn id: https://pmd.svn.sourceforge.net/svnroot/pmd/trunk@1041 51baf565 9d33 0410 a72c fc3788e3496d,push down
Moved priority and lifetime fields to Recording.java.,push down
[AESH 137] CommandContainer is now an interface and a CommandContainerBuilder have been added to provide a pluggable way of creating CommandContainers,push down
Added tests for load balancer validation. Added a node validator and refactored for new validation structure.,push down
Rework modified classes for pipeline  Adjusted existing classes with changes from modified plugin version. Classes which are too different from existing ones were placed into  pipeline  package. Existing classes might be adjusted to be compatible with pipeline  but not yet clear how to achieve that.,push down
Create AsyncRequestWrapper,push down
Refactored code structure. Added licence heade Continued SPI work Added File  InputStream  URL readers,push down
Refactor properties config loading,push down
Adding a MINA based listener. Also contains a lot of other changes needed for this implementation. MINA listener is still not the default due to it not yet supporting SSL/TLS fully.  git svn id: https://svn.apache.org/repos/asf/incubator/ftpserver/trunk@495421 13f79535 47bb 0310 9956 ffa450edef68,push down
HV 571 Minor refactoring. Adding toString implementations  making isCascaded explicit,push down
Moved chargedensity interpolation method to the CIC algorithm because it is specific to this algorithm.,push down
Resolved issue: DIRMINA 16 (org.apache.mina.common.TransportType) * Changed TransportType into an interface * Added TransportType.getAddressType() * Added TransportType.getSessionConfigType() * Removed transport type registry feature because it s not used anywhere ** Removed the related unit test  git svn id: https://svn.apache.org/repos/asf/mina/trunk@497328 13f79535 47bb 0310 9956 ffa450edef68,push down
"Rework surface generators  The biggest change is that they are now run during terrain generation instead of population.  Previously the SurfaceBlock/GroundBlock would be generated by ChunkProviderTC and then overwritten by the SurfaceGenerator during terrain population. Now the SurfaceGenerator is responsible for generating SurfaceBlock/GroundBlock.  NullSurfaceGenerator is now called SimpleSurfaceGenerator (as it now generates SurfaceBlock/GroundBlock)  and the old SimpleSurfaceGenerator is now called MultipleLayersSurfaceGenerator.  GeneratingChunk has been added as an object to hold various data about a chunk being generated. ChunkProviderTC still uses its """"temporary class fields""""  I hope to refactor this class in the future to use GeneratingChunk everywhere. ",push down
encapsulate Matcher create in factory method and implement the Matcher logic in a MatcherImpl subclass,push down
Change Id: I0141df2760a7dffe462306a97447795b4bd2ffc1,push down
HV 1623 Create different programmatic mapping contexts for getter and field    create different implementations of PropertyConstraintMappingContextImpl for getter and field to separate the logic.,push down
Fixed message ID in topics Added method inheritance test Refactored out NevadoQueueConnection and NevadoTopicConnection,push down
* added Undo support to basic operation:    ROI add/remove    ROI properties change (color  stroke...)    sequence operation (remove channel  change dim) * added plugin usage statistics. * added user account link support. * Canvas2D:    added area selection (Ctrl key + mouse drag)    added message when there is not enough memory to display image * FileUtil.getApplicationDirectory() modified a bit. * ROIPanel : fixed sorting on position and size. * MainInterface:    added getUndoManager() method to retrieve the active Sequence Undo Manager.    added undo() and redo() methdos for fast undo and redo on the active Sequence. * PluginDescriptor:    added isBlundled() method to know if this is a bundled plugin (several plugins inside the same package)    added isKernelPlugin() to know if this plugin is bundled in the application. * PluginLauncher: some changes with plugin launch operation. * Plugin: added getName()  isBundled() and getOwnerClassName() methods. * ROI:    added copyFrom(ROI) method to obtain a ROI copy.    added getPropertyValue(..) / setPropertyValue(..) for generic property get and set operations. * MetaDataUtil: added getSizeX/Y/Z/T/C() and setSizeX/Y/Z/T/C() methods * Sequence:    added copyFrom(..)  copyDataFrom(..) and copyMetadataFrom(..) methods.    added createUndoPoint(..)  createUndoDataPoint(..)   createUndoMetadataPoint(..) and AddUndoableEdit(..) methods to create complete  partial or custom restore point for undo operation.    added undo() and redo() and clearUndoManager() methods    added getSelectedROIs(Class<? extends ROI> roiClass..) to retrieve selected ROI of a specific type only. * added SequenceUtil.getCopy(Sequence  copyROI  copyOverlay  suffix) to get a copy of the specified sequence with specific options. * added new methods to DateUtil. * minors fixes and tweaks.,push down
Forgive me God for I have sinned  doing more than one changed in a single commit. Added dependency injection for OPMObjectInstanceValueAnalyzer and refactored some methods in the analyzer class.,push down
ARQGRA 345: GrapheneElement can not be used as @Root   fixed  * GrapheneElement can be now used as field type for Page Fragment @Root * It required couple of refactorins: I had to extract interface from   GrapheneElement  because proxy which is created for it needs that   interface in the list of interfaces which it should implement * I had to rename the implementation to GrapheneElementImpl * GrapheneElement is wrapped element  I had to add to the   WrapperEnricher conditional code which would take into account the   GrapheneElement   it is ugly bit imo only only solution right now,push down
"Feature  57: Introduced ModuleValidation with the following constraints:  * AvoidDotAndJarOnBundleCPConstraint: Checks if a bundle contains JARs and """"unjared"""" classes * EclipseBundleShapeConstraint; Checks if a bundle requires to be unpacked and doesn t contain the manifest header """"Eclipse BundleShape: dir"""" * ProjectEncodingConstraint: Checks if build encoding (project.build.sourceEncoding) is equal to the eclipse project encoding (encoding/<project>)",push down
Fix  115   improve behavior management and remove unwanted files,push down
Added apache commons net lib for LAOS TFTP Laos: TFTP support (untested) Added: LibInfo class with Version and Driver Information Added: Moved JUnit tests (old and stupid) from VisiCut Added: getDriverName() method to LaserCutter interface Changed: EpilogCutter splittet into EpilogZing and EpilogHelix,push down
Removing the use of constructor to inject property. Instaed using setter only in the AmazonAwsSQSConnector class,push down
Mouse and keyboard behavior of views can be changed.  You can now change the mouse and shortcut managers for views with your own implementations. The old MouseManger and ShortcutManager classes are now interfaces  and a DefaultMouseManager and DefaultShortcutManager have been added.,push down
Move  29 test to SpringMVC specific UT suite  since JAX RS suite doesn t produce uriParameters markup in any case.,push down
Outstanding changes for merge,push down
Change Launch api to use generics..,push down
[ARQ 886] Improve init/cleanupStatement handling: rename properties to more meaningful ones.,push down
Major indexing changes and updates   implementation of a different POJO indexing strategy. See JavaDoc and code comments for more details.   added autocomplete indexer that indexes searched phrases and takes their search frequencies into account   the most searched ones are then displayed first.   both POJO and LinkedIn full indexing is set to run periodically (configured by the Spring Task Scheduler).,push down
Refactor HttpTest to run the tests with Http2 when it makes sense + fix related bugs in http2,push down
removed ugly selector factory  preparing for UDP server  git svn id: https://svn.apache.org/repos/asf/mina/trunk@1341509 13f79535 47bb 0310 9956 ffa450edef68,push down
BISERVER 8103: More refactoring.  ScheduleEditor now extends from AbstractScheduleEditor,push down
Code clean; renamed some package private methods  git svn id: https://svn.apache.org/repos/asf/httpcomponents/httpclient/trunk@1614354 13f79535 47bb 0310 9956 ffa450edef68,push down
Update version 0.1.1 SNAPSHOT.  commit dde54b61f6641d933d2f9073d8aa617d8d075a55 Author: Toshiki Takeuchi <take@xcoo.jp> Date:   Fri Mar 30 21:44:03 2012 +0900      Add CMYKColor class.     Add 2 enum classes for texture.  commit 5afbef4651220c3790fc5705da74aa1af78d3319 Author: Toshiki Takeuchi <take@xcoo.jp> Date:   Fri Mar 30 01:41:39 2012 +0900      Integrate mouseWheelEvent with mouseEvent.  commit 4aab2d45d5f9328927fab01240b89f572f9081ec Author: Toshiki Takeuchi <take@xcoo.jp> Date:   Thu Mar 22 20:24:17 2012 +0900      Fix a bug of SQL.     Modify ArrayList of GraphicsObject to CopyOnWriteArrayList.  commit 080c5192978a4cbf710447a73c9e80d87fb510d6 Author: Toshiki Takeuchi <take@xcoo.jp> Date:   Tue Mar 20 12:19:39 2012 +0900      Update pom.xml to use latest OpenNI and NITE.  commit 9ace0525d9f4d14a21704df1a71dc721c9cc0487 Author: Toshiki Takeuchi <take@xcoo.jp> Date:   Tue Mar 20 10:41:01 2012 +0900      Modify Trackball.  commit 78ab5ddfdd84e748131de12487e4fe6cbc4a0f5f Author: Toshiki Takeuchi <take@xcoo.jp> Date:   Fri Mar 16 00:49:27 2012 +0900      Add Mouse class.  commit a3152207d195bf41af6369b2beadd4f99d16442a Author: Toshiki Takeuchi <take@xcoo.jp> Date:   Thu Mar 15 16:13:46 2012 +0900      Fix a reshape bug.  commit 396afe9e46e2e505b45303a40de89d32db12f12e Author: Toshiki Takeuchi <take@xcoo.jp> Date:   Sat Mar 10 18:32:31 2012 +0900      Add reset method to Trackball class.     Refactoring Applet and CursorMode classes.  commit 1bfbab9ddc3c23ffa4cfaf653a179dda062537e6 Author: Toshiki Takeuchi <take@xcoo.jp> Date:   Sat Mar 10 15:16:34 2012 +0900      Add Trackball class.  commit 7e113c4d3fadf7df01dcadd472f471a00db5c9d5 Author: Toshiki Takeuchi <take@xcoo.jp> Date:   Fri Mar 9 14:37:34 2012 +0900      Fix Box class.  commit 01fe299dbb2ef0c2ef24b1da46c3888d559edaa1 Merge: 5022846 55ed6df Author: Yuki Ban <yuki@xcoo.jp> Date:   Wed Mar 7 09:09:37 2012 +0900      Merge branch  dev  of github.com:casmi/casmi into dev  commit 50228467f0fb686e92ce517772c4e5372cff5cef Author: Yuki Ban <yuki@xcoo.jp> Date:   Wed Mar 7 09:09:28 2012 +0900      Modified TimeLine class  commit 55ed6df1f21a258ec3ced88677de2d08ca5cb2cf Author: Toshiki Takeuchi <take@xcoo.jp> Date:   Tue Mar 6 14:22:05 2012 +0900      Remove warnings of CPopup.  commit d5663c385afd986f24ce55fed7ac64b02193452b Author: Toshiki Takeuchi <take@xcoo.jp> Date:   Fri Mar 2 14:51:54 2012 +0900      Add license and javadoc comments.  commit 096fec8a5adf5504068eac0b4fba49275c09009b Author: Yuki Ban <yuki@xcoo.jp> Date:   Fri Mar 2 14:35:54 2012 +0900      Modified selection buffer  commit 3cf0da85cd3259f38309dc1f5463f0f0abdc74e3 Author: XcooDev <developer@xcoo.jp> Date:   Sat Feb 25 23:37:00 2012 +0900      add synchronized block in rendering  commit b05135396611aa4409d9ca1690f6331604427aad Merge: 4df978d 8ba4300 Author: XcooDev <developer@xcoo.jp> Date:   Sat Feb 25 22:28:24 2012 +0900      Merge branch  dev  of github xcoo:casmi/casmi into dev  commit 4df978d2d072a24bced11e61b192a8515c2de92c Author: XcooDev <developer@xcoo.jp> Date:   Sat Feb 25 22:28:02 2012 +0900      add function to show a alert dialog box  commit 8ba430072ab801e1b1ed1ce337cb1d5b8424e4eb Author: Toshiki Takeuchi <take@xcoo.jp> Date:   Sat Feb 25 21:24:01 2012 +0900      Refactoring some classes.  commit 2e250a563c4efc9e2b2abb892ebb266ef6e7a93b Author: XcooDev <developer@xcoo.jp> Date:   Sat Feb 25 19:26:10 2012 +0900      fix bug in Polygon class  commit c29f1f1167281c5fd306618b2c76a25675872275 Author: Toshiki Takeuchi <take@xcoo.jp> Date:   Sat Feb 25 17:54:35 2012 +0900      Add GrayColor class.  commit 1f7a40470439fda330cffb15bce51bbd282dd92a Author: XcooDev <developer@xcoo.jp> Date:   Sat Feb 25 17:53:28 2012 +0900      fix bug in Line class  commit 578f12c89869ab394a5595817e3fd0197890d21c Author: Yuki Ban <yuki@xcoo.jp> Date:   Wed Feb 22 15:23:57 2012 +0900      add Mouse Wheel Event.  commit e46b2a55bc08505f11ff6f64533c861f61defef7 Author: shigeodayo <shigeo.yoshida.shigeo@gmail.com> Date:   Fri Feb 17 14:59:17 2012 +0900      Add CPopupmenu      Add CPopupmenu  easy to create popup menu.  commit ce5bf19848573173440f03a0dc08da8cfd1e8701 Author: Toshiki Takeuchi <take@xcoo.jp> Date:   Fri Feb 17 13:18:33 2012 +0900      Fix bugs about Primary Key and Short/Long type.  commit 18c992fe2121a6538f0aa33a8035ff0af1f516c3 Author: Toshiki Takeuchi <take@xcoo.jp> Date:   Tue Feb 14 05:11:16 2012 +0900      Divide Color class to three classes (Color interface  RGBColor class  HSBColor class).     Remove ColorMode.     Refactoring many sources.  commit 469f0e6cd6d5985e799e54ca87892c2620685872 Author: XcooDev <developer@xcoo.jp> Date:   Thu Feb 9 17:29:17 2012 +0900      fixed version reference in README  commit 814de6bf236f866956003c9e72073ca5caf26103 Author: Toshiki Takeuchi <take@xcoo.jp> Date:   Sat Feb 4 17:07:36 2012 +0900      Update version to 0.1.1 SNAPSHOT.  commit 58b4744ef60cc435965aec28e40c639948637270 Author: Toshiki Takeuchi <take@xcoo.jp> Date:   Sat Feb 4 16:46:46 2012 +0900      Rename Roundrect.java to RoundRect.java.     Add maven compiler plugin version to pom.xml.  commit b31e6ae4be80737254690e05086121de8652a955 Author: Yuki Ban <yuki@xcoo.jp> Date:   Sat Feb 4 15:16:20 2012 +0900      Add repeat function to TweenGroup  commit 50c6950486df6bbf13a6c6c236ce2fffe2b5f85e Author: Toshiki Takeuchi <toshiki@Prima Alice.local> Date:   Sat Feb 4 14:31:09 2012 +0900      Add a repository icon.,push down
Refactored statistics to be used both by BackgroundStats and StressTest,push down
More optimizations to JIT persistence scheme. Raw performance from object to memory is improved by about an order of magnitude (1 2ms/object vs 19ms/object). The limiting factor now is file system performance,push down
move copyPoms property from AbstractFromDependenciesMojo to CopyDependenciesMojo  git svn id: https://svn.apache.org/repos/asf/maven/plugins/trunk@1481285 13f79535 47bb 0310 9956 ffa450edef68,push down
DF QCADOOMES 1263 changed locales,push down
pom.xml: add tdb  update jena  etc JenaConnect: added tdb case to param builder  ResultSets now copied to prevent conncurent modification errors  getConnectionDataSet() now getDataSet() TDBJenaConnect: tdb backed models MemJenaConnect: now uses tdb DBJenaConnect: extracted to contain all Database backed Jena models shared code SDBJenaConnect: add printParam stuff RDBJenaConnect: add printParam stuff  fix DataSet ChangeNamespace: use new printParam name Qualify: single line mode regex  cleanup cleanPredicates Score: temp option is now just the dir to hold tdb in ArgList: filter out usernames and passwords when logging options log4j.prop: turn off JenaConnectTest: use exportRdfToString() FailingToDeleteFromSDB: restored to test sdb 1.3.3 RegexQueryFailInTDBvsSDB: used to test TDB... detected conncurrent mod bug DemoPSMerge: use tempJena as dirname  not JenaConnect,push down
Removing json generated visual objects  and replace them with nodes. Removes timenode and scene node. Adds the metatype too all nodes now,push down
CADMIUM 128: Fixed initialization errors,push down
Hack to remove functionality that triggers an odious bug in 5.4.2.,push down
Improve chart measures.,push down
Refactored to more pure MVP,push down
Fixed  127,push down
Extensive refactor of the entire upload codebase  to assist with code cleanliness  and pave the way for further work.    Publisher specific code has been refactored extensively. Instead of single generator  passing around publisher config factory  each publisher has its own generators for each type of element. This improves testability and separates concerns.    Version and OnDemand generation has been improved. Now all generators are generating versions/ondemands based upon the ids produced by the respective idGenerator.    all configuration switching has been removed from the TvAnytimeFeedsModule  as this has no upload code  so should be enabled all the time.    chunk size has been removed  as it is not being used.,push down
Reworked the way how quartz mongodb accesses mongodb. It is not through the MongoConnector interface. Support two implementations out of the box: the one that owns the lifecycle of MongoClient (creates and closes) and another that just uses what user provided.,push down
Allow unquoted whitespace between substitutions that expand to objects/lists  Fixes  212 that object and list substitutions could not have whitespace in between.  This patch carries quoted ness into ConfigString  which is somewhat bogus  and we may be able to clean it up later if we start to track the tokens that each value originates from.,push down
worked on a error message model so that when functions fail  their messages are more informative. Added g:version() to get Gremlin version information. Tweaked lots of functions here and there. Added more test cases for functions. Found a load of issues with . notation. Created issues and test cases (commented out) that need to pass.,push down
Some more tidy up work on the remote database stuff,push down
Remove last pieces of old (now non working) clip region checking / Push down handful of fields from Box to BlockBox,push down
Refactoring and cleanup f the index deligate code.,push down
big refactoring because of  60  * space is now dependent on ODE system * changed schema for space XML files * updated ODE system interface,push down
Quality & refactoring,push down
refactor to use interfaces and abstract classes where possible,push down
text editing rewritten,push down
scenario generator improvement,push down
More cleanup  better thread naming  more javadocs,push down
improved handshake classes ( initiated by eab25a4 and 7c84fb6),push down
SC 123 view definition refactoring,push down
Checking in all the graphical updates changes from the SVN branch.  There will be more changes later  but for now  this is the bulk of the updates.  The only conflict was a missing API in DVRIMain  which needed to call some function that the current trunk is missing.,push down
Push the listIterator code down into the concrete implementation of AbstractURLPager  so as to clear up a small design flaw where the abstract class knew about the concrete class.   git svn id: svn://svn.jbidwatcher.com/jbidwatcher/trunk@507 b1acfa68 eb39 11db b167 a3a8cd6b847e,push down
refactoring df4j nio* continued.,push down
Refactored package structure for a clear separation between GData operations and Google Plus operations.,push down
Create FtpServer using a factory  (FTPSERVER 187)  git svn id: https://svn.apache.org/repos/asf/mina/ftpserver/trunk@704228 13f79535 47bb 0310 9956 ffa450edef68,push down
[clearcase plugin] Remove vob paths from UCM and replace value with value from load rules  git svn id: https://svn.dev.java.net/svn/hudson/trunk/hudson/plugins/clearcase@8863 71c3de6d 444a 0410 be80 ed276b4c234a,push down
simplification of sharding,push down
A few more X509 fixes,push down
Introduced models and a concept of variables.,push down
Added list providers for jBPM DataInput and DataOutput itemSubjectRef objects which include standard jBPM data types.  Added Target Runtime plugin extension elements to Tool Enablements list.  Java type selection dialog no longer includes class members and methods.  Fixed a bug caused by cached model enablements in ListAndDetailCompositeBase class.  Deleted some unused PropertySection classes.  Reorganized class hierarchy for all PropertySections so they subclass DefaultPropertySection instead of AbstractBpmn2PropertySection. This was causing all kinds of confusion with property tab visibility.,push down
Pull request post fixes.  Changed the hierarchy of CheckoutAction in order to better accomodate incoming changes.  Minor nitpick here and there.,push down
Moved loginDisabled property to InstructorUser,push down
added apis for modification and improved querying of members,push down
Major refactoring.  The jdbc package was in pretty bad shape and was extremely hard to modify.  Some of the changes made to fix this were:   o Refactored the JdbcMigrationContext so that the source of connections is    abstracted.  A BasicDataSource that wraps a connection has been added to    support environments without access to a data source.  o All database specific configuration options are now set on the    JdbcMigrationContext.  The patch path is set on the migration launcher.  o Fixed the way that database connections were being closed.  The old way    caused pooled datasources to hang.  o Less connection passing: every class can obtain its connection from the context  o Put the concept formerly known as dialect into it s own class: DatabaseType  o Added support for Oracle.  This turned out to be a pain since the Oracle JDBC    driver doesn t support multiple statements in a single Statement.execute call like    Postgres does.  o Renaming: many of the old names didn t make sense.  I tried to make the changes as backwards compatible as possible  but I haven t tested this with an existing application.  You have been warned.  This whole thing needs to be repackaged under net.sf.autopatch at some point.,push down
Fixes  56   Back end of Outputters revised. The mechanism for output formatting is now independent of the output destination  e.g.  there is no longer any  formatting  logic in the Outputters  but it s all in the  Walkers . Rearrange code structures to take the  support  classes to a different package. This  cleans  up the regular org.jdom2.output package. The support package should only be of interest to people who override/subclass/customize the default functionality. I will put a wiki page together on the new details  and how overriders/customizers can benefit from the the structures.,push down
redesigned FluentPipeline model.,push down
wcet/uppaal: Refactoring of the uppaal tool. Additionally  added experimental translation using one template per supergraph.,push down
Add float and datetime index field definitions     Introducing dependency on jodatime for the ISO 8601 datetime formatting   Adjust integer index field definition such that the binary comparison of integers compares the integer values   Extend the string index field definition with various string to byte conversion options   Related testcases updates   git svn id: svn+ssh://dev.outerthought.org/outerthought/lilyproject/projects/lily/trunk@3850 b80d95f8 e103 0410 bd55 e03a9dc29394,push down
Minor Module/ProtocolDecl refactoring.,push down
much more API and node type cleanup,push down
Refactored the CombineFn infrastructure,push down
Updates for refactoring to style classes. CalculatedStyle now has lookup methods to cover all general cases  so propertyByName() is private  which means the backing classes for styling were able to be replaced.,push down
[NGRINDER 701] Make monitoring service clean,push down
add WebDAV plugin changes,push down
Katta|000|Removed I prefix for interfaces  not a java convention,push down
refactor  git svn id: http://svn.jetbrains.org/idea/Trunk/clojure plugin@22998 59f64563 22e8 0310 8d2c 98a15e1539f2,push down
support nested list and longs to eval with pipeline / add binary eval commands to pipeline  * apply nested list and longs to eval/evalsha with pipeline * add binary eval/evalsha commands to pipeline * define interfaces to have (Binary) eval commands ** BinaryScriptingCommandsPipeline ** ScriptingCommandsPipeline * add unit tests for binary eval/evalsha with pipeline  * fix some warnings from ScriptingCommandsTest,push down
Move clustered tests to ClusteredEventBusTestBase,push down
A lot of changes to events and commands to contain the transaction identifier. Now the saga do their work,push down
removing support for $add and $mod,push down
Merge BufferManager into InputInterceptorManager.  They were both singletons and heavily used similar code and are never supposed to be split.  Make BufferManager a top level type and move its activate() method to InputInterceptorManager.,push down
Some refactoring of slack notification services,push down
changes to shift functions to Personal Service,push down
removed generic from VComponent,push down
adding a few new vocabulary files.  mostly though  fleshing out more of the query builder stuff  various fixes and refactors such that it seems to work reliably now.  also adding a few more utility functions to the core utils bits that i need for various other projects,push down
[issue:2446] Abstrahierung des CreateSearchGeometryListener fuer allgemeine geom. Suche,push down
Refactoring + MATSim integration,push down
* refactor CacheKey   * make CacheStorage generic * add SimpleCacheKey,push down
Rename Storage to StorageDisk  introduce Storage interface,push down
refactoring: move field refLabels from MapObject to Polyline  The field is only used in Polyline  so we waste its memory in class Point. There is also no need for a public getter now.  git svn id: http://svn.mkgmap.org.uk/mkgmap/trunk@3880 25d90789 57f7 4ee0 8453 03a3dfeeeb22,push down
pipeline stuff moved to separate repository,push down
+properties column now highlights non default values (still a bit buggy) +internals: new visitor pattern for manipulating all selections +able to disable rules from the violation list +grouped rules show all unique priority values +revised filter column icons +revised plugin.xml to export code for other plugins +new opening Rule panel for Rule creation wizard  git svn id: https://pmd.svn.sourceforge.net/svnroot/pmd/trunk@7109 51baf565 9d33 0410 a72c fc3788e3496d,push down
Cleaned up 2nd order collector  added cited by and the RAM only cites query implementation,push down
OPMStructuralLinks are now displayed using manhattan routers  and with a special figure so that the router can be changed more easily. Closes  137,push down
Various pagination fixes / Fix fixed positioning,push down
Add Vault support... changed EconomyInterface to actually be a interface rather then abstract class... Removed economy system config option  Residence now will auto scan for economy systems on run  prefering Vault if found... update version number to 2.5...,push down
remove non filled bar chart style  rename some methods,push down
refactored several programs related to template builder and added reflection based beans template builder,push down
Remove sync check in the local listeners (postponed to next Cellar release)   git svn id: https://svn.apache.org/repos/asf/karaf/cellar/trunk@1413869 13f79535 47bb 0310 9956 ffa450edef68,push down
New Preference panel updates: revised rule columns  new compact colour coded regex filter column. Reworked property tab resizing. Refactored editors into separate package.  git svn id: https://pmd.svn.sourceforge.net/svnroot/pmd/trunk@6791 51baf565 9d33 0410 a72c fc3788e3496d,push down
new DynamicVariable. Remove extra copy(),push down
Moved regenerate and made it static,push down
fixed up options,push down
"Refactoring AST for """"delegation name pair"""" payload elems.  Added Scribble specific """"delegation payload types"""". ",push down
moved more rendering code out of the layouts  Issue number: Obtained from: Submitted by: Reviewed by:,push down
[jvstm lf] Create RemoteWriteSet and deal with remote commits. Several fixes. Todo: reload body only,push down
cleaned up TreeContextBuilder  got random forest  and random forest builder implemented,push down
Move SharedLogLogic specific getCheckedOperations from superclass  move operation resolving to AbstractLogLogic,push down
Update creation of ResultSet proxy    Use factory(`ResultSetProxyLogicFactory`) to create logic for resultset proxy   Rename existing proxy logic to `RepeatableReadResultSetProxyLogic`   Add `SimpleResultSetProxyLogic`   Add `ProxyConfig` class to represent all proxy related configurations     (datasource name  listeners  proxy factory  connection id manager)   `ProxyDataSourceBuilder proxyResultSet` takes `ResultSetProxyLogicFactory`,push down
PR: MASSEMBLY 88  MASSEMBLY 14  Fixed MASSEMBLY 14 by introducing a new assembly element <moduleSet> which works like a <dependencySet>.  I deleted unused methods/parameter and need not deprecate them bec they have not been released yet.  Added some test harness classes for testing the processing of <dependencySet>.   git svn id: https://svn.apache.org/repos/asf/maven/plugins/trunk@399640 13f79535 47bb 0310 9956 ffa450edef68,push down
Fix for actions being run more than once when more than one term in an OR matches.  Also the related bug  where more than one element is created with a  continue  under the same conditions.  This is a moderately extensive fix  so watch out for regressions.  git svn id: http://svn.mkgmap.org.uk/mkgmap/trunk@1564 25d90789 57f7 4ee0 8453 03a3dfeeeb22,push down
Workings on Permissions  * Extracted an interface from PermissionProvider to allow multiple and eventually plugin level exchangable permission provider implementations  * refined permission lookup again so hasPath will take into account asterisks  which it wasn t doing  possibly causing derplings  * Rewrote the addPath algo to be a bit more effective,push down
Compiler options can now be specified for JDK 8 or JDK 6/7 or lower.  After this was finalized I realize that we might consider moving entirely to String based options  instead of inferring the options from the provided enum. This setup does have the benefit of throwing exceptions when options are not present.,push down
Refactor CustomObjects and Resources  There are now CustomObjects  and all BO2 are a CustomObject. UseWorld and UseBiome are also CustomObjects. Even all trees are now a CustomObject.  All resources now inherit Resource. All settings don t have to be stored in a generic Resource object  but they are stored in the resource itself. This allow for more flexibility.  Plugin developers can now add their own CustomObjects and Resources.,push down
Removed the to much specialized methods sendTo* from the WebSocketServer.java. Users can implement such behavior them self easily.,push down
FACES 1385 Refactor icefaces3 chat portlet to make it look more like the Liferay chat portlet,push down
Fixed unit tests failure,push down
First pass at major config refactoring,push down
Make object spawning a little bit more logical  UseWorld and UseBiome now also pick one object to spawn when used in the Tree resource.  Removed customObject.spawn(LocalWorld world  Random random  int x  int z) as it wasn t used anywhere besides for the BO2 and BO3 internals.,push down
Refactoring protocol names as global/local.,push down
reimplementing remotelauncher to fix remoting issues,push down
adds more tests for the retrieval tool   adds the option to specify a store ID   adds number of attempts to the output file   various other small fixes/refactorings  git svn id: https://svn.duraspace.org/duracloud/trunk@191 1005ed41 97cd 4a8f 848c be5b5fe45bcb,push down
improved visual representation of spec elements and their spec relations,push down
RF samples refactor,push down
ARTIF 627 converted SrampToJcrSql2QueryVisitor into a service  created ModeShapeQueryVisitor using the JCR/MS query factory,push down
Remove module related options from push/pull goals,push down
Refactoring the AffinityMatrixCreator to be an interface and create a new SimilarityFunction interface.  Additionally  any class using the WorkQueue now all use the same singleton WorkQueue  as opposed to their own.     The two affinity matrix edge selection methods are now different     implementations of AffinityMatrixCreator.     Each AffinityMatrixCreator takes in two SimilarityFunctions  one for     selecting edges and one for weighting edges.     Any classes using AffinityMatrixCreator have been updated to use the     interface and take in a pre constructed AffinityMatrixCreator as an argument     The LPP based mains have been simplified to create AffinityMatrixCreators     Every similarity method in Similarity has a corresponding SimilarityFunction     The kernel functions from AffinityMatrixCreator also have a corresponding     SimilarityFunction     A bug fix in HashBiMap is fixed that caused infinite puts     Minor spacing or javadoc fixes as needed     WorkQueue is now a singleton class.  Any threaded classes using the queue     now access the same queue and submit runnable s to it so that no job queues     are conflicting.     GenericMain sets the initial size of the queue based on the  t option,push down
Tweaked how the bill cache stores and evicts elements. Reworked the elastic bill search layer,push down
Changed GroupRequest to use CompletableFuture (https://issues.jboss.org/browse/JGRP 1620)   Removed GroupRequest.setAnycasting() as this is already present in the RequestOptions instance passed to GroupRequest   Async unicast RPCs (with or without future) don t lead to the creation of a UnicastRequest  but are sent directly (https://issues.jboss.org/browse/JGRP 1620)   If RPC is async  don t create a GroupRequest instance   Removed NullFuture   Replaced explicit Message in MessageDispatcher.sendMessage()/castMessage() calls with Buffer (https://issues.jboss.org/browse/JGRP 1620)   UnicastRequest.receiveResponse() should not consult RspFilter   Replaced org.jgroups.TimeoutException with java.util.concurrent.TimeoutException   Changed accessors in RequestOptions   UnicastRequest now uses CompletableFuture   Changed RspList to subclass HashMap (saves 4 bytes  plus fewer methods)   UnicastRequest: get() on future removes request from correlator s table   Calls to an empty destination set now always return an empty RspList,push down
OPEN   task 79: Improve Object  Process and State figures  https://github.com/vainolo/Object Process Programming/issues/issue/79  Figures which have a name now implement the OPMNamedElementFigure interface  and it is used in all operations (refresh  direct edit  etc).  Removed most functionality from OPMThingEditPart  passed it on to the children. Will later unify if needed.,push down
Move group communication down to jvstm ispn only    This commit complements cc88fe2  which first added support for group   communication in all JVSTM based backends.  It is considered best for now to   keep this backend specific  so  in this commit  we move such functionality   to the only backend that currently extends jvstm common: jvsmt ispn.,push down
Created mini spi for plugable testing of annotations packages Added spring annotation test harness which can be plugged in for testing,push down
Refactored the css package to allow a clean separation from the core.,push down
SC QCADOO 394   early detection for hooks inconsistency; extracted view hooks class hierarchy to improve type safety; remove unnecessary ComponentCustomEvent class,push down
Made loggly reporting extendable,push down
Fix memory leak in color cache / Push CalculatedStyle field down to those derived values which need it and remove it from the others / Remove InheritedLength class (which originally resulted in (my) misinterpretation of the spec),push down
A bit of work on the symbol table   class names are now recorded in the GlobalScope.  Come to think of it  they should probably be recorded in SourceFileScope or some such interim layer instead to allow for private inner classes.  At any rate  that s where they are for now.  I also pushed some stuff down from AbstractScope into LocalScope where it seemed to fit better.  Removed a useless unit test  added some good ones.  Generally  making progress towards fixing the  unused private field false positive when inner class private field is referenced from enclosing class    git svn id: https://pmd.svn.sourceforge.net/svnroot/pmd/trunk@2751 51baf565 9d33 0410 a72c fc3788e3496d,push down
now we can introduce the unresolved stop event,push down
Restored ability add new variables for XPath rules  the dialog is raw but will be tweaked. Need to modify the Rule interface in PMD property to be able to drop them...upcoming.  git svn id: https://pmd.svn.sourceforge.net/svnroot/pmd/trunk@6885 51baf565 9d33 0410 a72c fc3788e3496d,push down
simplification of sharding,push down
Trying to fix bug that is not showing locally,push down
FACES 1358 Develop JSF1 < > JSF2 compatibility layer (Moved JSF 2 related method to CompatImpl),push down
"Refactored calculations to use Interval instead of ReportingPeriod  Motivation: Interval is the concrete interval with a start and an end date. Any calculation is done against a concrete interval. The ReportingPeriod defines how to calculate an interval (e.g. """"last year"""") and might or might not be relative to the current date.  Issue:  1103 ",push down
Prepared the base for distributed particle boundaries creation.,push down
Ticket  810 Batch Histogram WIP  Refactor to produce batch histograms for non tau parameters also  driven by current  Fitted Images  dropdown selection.,push down
Added distortion experiments (and refactored existing parts from before two level matrices),push down
Starting to refactor to merge Unsafe based compressor in mainline,push down
Refactor extract class PortInput. Add getPort() accessor. Extend tests.,push down
Added callgraph classes lots of bugfixes and extendsions for struct and invokes,push down
fixed  367865,push down
Major refactoring of crs package.,push down
Fix biome rendering,push down
Improve Resources Management,push down
added push down predicates to the core API and supporting classes for those graph database that don t support this notion. the Vertex API has changed.,push down
minor message handling cleanup,push down
ResourceFile  DataFile  ModulesFile created from the code at ZCalcInput  now ZCalcInput depends on them. ZCalcInput is only an interface now  implemented by FileZCalcInput. Tests and results and all related stuff has been moved to ztools core.  git svn id: https://bg.upf.edu/svn/gitools/trunk@21 1b512f91 3386 4a98 81e7 b8836ddf8916,push down
[SUREFIRE 592] More refactoring and hopefully fix build on sonatype grid  git svn id: https://svn.apache.org/repos/asf/maven/surefire/trunk@945183 13f79535 47bb 0310 9956 ffa450edef68,push down
Extended the code in the iconio package   Added read support for new style icons with embedded pngs   Added write support to ICOFile  in most cases the output matches the input 100%   I/O now done with LGM s StreamDecoder/Encoder   GmFile now stores which version it represents   At the moment  this is only used to determine whether the game icon needs modifying   If game version < 8 when it is to be written  icon is reduced to a single image with size and colour depth <  32x32 @ 32bpp  GmFileReader was fixed so that GM8 files with more than one resource of a given type load correctly   Inflater finished in wrong scope   ver was reused and hence was tested before it was assigned the value 800 again  Added StreamDecoder and separated GmStreamDecoder from it   StreamDecoder subclasses InputStream for convenience   Changed the system for inflating    Rather than spawning a new GmStreamDecoder  the current one simply changes state.    When entering inflater mode  the current file position is recorded and then reset to 0. This allows file position to be displayed as <position of zlib block>[<position in inflated data>] for easier debugging. Ending the inflater restores the original file position.   read(byte[] int int) now guarantees the requested number of bytes will be read unless EOF is reached   BufferedInputStream guarantees this but InflaterInputStream does not  StreamEncoder now subclasses OutputStream for convenience  git svn id: https://lateralgm.svn.sourceforge.net/svnroot/lateralgm/LateralGM/trunk@390 8f422083 7f27 0410 bc82 93e204be8cd2,push down
Create backend jvstm datagrid  This backend adds support for running JVSTM on top of a (pluggable) data grid.  It also includes an implementation for Infinispan.  E.g to use the Infinispan data grid one should provide the following configuration:      config.class pt.ist.fenixframework.backend.jvstm.datagrid.infinispan.DataGridConfig     dataGridClassName pt.ist.fenixframework.backend.jvstm.datagrid.infinispan.InfinispanDataGrid  And optionally:      dataGridIspnConfigFile <the ispn config file>,push down
Refactoring task/command stuff.,push down
Part way through tree implementation. Some refactoring.,push down
Fix for https://bugs.eclipse.org/bugs/show_bug.cgi?id 327919,push down
refactored Backward to ChangeAction,push down
renamed XClassCreator to DefaultXClassCreator,push down
General improvements: attempt at FuzzyTree64.java,push down
ARQ 1797: Graphene screenshooter altered to comply with changes in upstream issue    now lifecycle observer used from upstream reporter project   registry for screenshooter interceptors introduced   ftest for screenshooter added,push down
refactor JOGLTarget as interface with JOGLTargetFixedFunction as current implementation. Prepares for JOGLTargetShader,push down
"selection  option implemented  * see vim s """":help  selection """" for details  * added String options       they need more work do be general  * added boolean option toggling       like :set ai!  * I broke some VisualModeTests as a side effect of this : /      probably because differences between real and mock classes      real thing works ; )      will fix  em later ",push down
Creating  dev  branch for in dev code,push down
Refactor BSPMaster and GroomServer  git svn id: https://svn.apache.org/repos/asf/incubator/hama/trunk@1097314 13f79535 47bb 0310 9956 ffa450edef68,push down
Move channels into database,push down
Add one more test  extract duplication,push down
Merging select changes from trunk into branch. Avoiding all work around wagon manager.   r488245:504200 512812 513942 514011    git svn id: https://svn.apache.org/repos/asf/maven/wagon/branches/wagon 1.x@515353 13f79535 47bb 0310 9956 ffa450edef68,push down
[OPEN HUDSON 6705] UCM : Implement SCM new polling logic to support rebases better A bit of refactoring + refining some edge cases (no load rule)  git svn id: https://svn.dev.java.net/svn/hudson/trunk/hudson/plugins/clearcase@31807 71c3de6d 444a 0410 be80 ed276b4c234a,push down
Refactoring to support view subclasses  Change Id: If143be2e3f1048aab6901181fa8884e8afc91cc4,push down
changed slider to checkbox in package graph view and removed it completely from cross package,push down
"tumbling towards three pass compilation: made scope structure immutable  extracted Scope interface and separated implementation into label and value scopes  [git p4: depot paths   """"//coremedia/jangaroo/"""": change   175582] ",push down
Reorganize tests to prepare for porting tokenizer_spec.rb,push down
moved the displayed calendar to the control (in preparation of more skins),push down
Fix bugs related to still using the ojbConcreteClass property to deal with inheritance in the domain model.    Projects that rely on that property and that need the old behavior (I believe that s only the Fenix web app)  should use the FenixDomainModelWithOCC class when generating the domain (change it in the dml generate.xml file).,push down
Fixing bug where stop would not work.,push down
http://yusuke.homeip.net/jira/browse/TFJ 3    Moved following methods from User.java to UserWithStatus.java: getProfileBackgroundColor()  getProfileTextColor()  getProfileLinkColor()  getProfileSidebarFillColor()  getProfileSidebarBorderColor()  getFriendsCount()  getFollowersCount()  getFavouritesCount()  getStatusesCount()    added some test cases  git svn id: http://yusuke.homeip.net/svn/twitter4j/trunk@12 117b7e0d 5933 0410 9d29 ab41bb01d86b,push down
RF view api improvments,push down
"Squashed commit of the following:  commit 7eb3668f257a359aed67ab613fedfdce59886536 Author: Bela Ban <belaban@yahoo.com> Date:   Tue Jul 19 16:09:09 2011 +0200      ns  commit 79f0c05a69dea9114ef5b788f29354147c840753 Author: Bela Ban <belaban@yahoo.com> Date:   Tue Jul 19 15:41:12 2011 +0200      Conflicts:     	src/org/jgroups/JChannel.java     	src/org/jgroups/protocols/BARRIER.java     	src/org/jgroups/util/BlockingInputStream.java     Squashed commit of the following:      commit 957fee5efe4266c37361f159b4bc12c670f9dc92     Author: Bela Ban <belaban@yahoo.com>     Date:   Tue Jul 19 14:09:11 2011 +0200          ns      commit 71956ae54cd64432d0599c7bed7ad21145031249     Author: Bela Ban <belaban@yahoo.com>     Date:   Tue Jul 19 11:55:16 2011 +0200          changed STREAMING_STATE_TRANSFER to STATE and STREAMING_STATE_TRANSFER_SOCKET to STATE_SOCK      commit 20b31aa87aad6d89b9c92704bf8a0ca34b7d5e1a     Author: Bela Ban <belaban@yahoo.com>     Date:   Tue Jul 19 11:54:50 2011 +0200          changed STREAMING_STATE_TRANSFER to STATE and STREAMING_STATE_TRANSFER_SOCKET to STATE_SOCK      commit 715e47a26a8a8423db9cba58e539b2010722a0d8     Author: Bela Ban <belaban@yahoo.com>     Date:   Tue Jul 19 11:10:11 2011 +0200          ns      commit 4e65a935117558f581e12076c81ec825d6f829ea     Author: Bela Ban <belaban@yahoo.com>     Date:   Mon Jul 18 15:22:52 2011 +0200          ns      commit 1a599bbfd6d14c9fdbad0de903171dfee32b131e     Author: Bela Ban <belaban@yahoo.com>     Date:   Mon Jul 18 14:16:21 2011 +0200          ns      commit 8306a7df063d74970528b6d84de0e0c309175ca4     Author: Bela Ban <belaban@yahoo.com>     Date:   Mon Jul 18 12:56:37 2011 +0200          ns      commit 5396570a991b0094783a9a1db8a3eb584849a8c1     Author: Bela Ban <belaban@yahoo.com>     Date:   Mon Jul 18 09:27:38 2011 +0200          removed ChannelException  ChannelClosedException  ChannelNotConnectedException      commit 2390a004c0973fb49b9c3b9a870107682c8ed9a0     Author: Bela Ban <belaban@yahoo.com>     Date:   Fri Jul 15 18:07:49 2011 +0200          replaced setState(byte[]) and byte[] getState() callback implementations with corresponding streamed versions      commit ef7416ef0845d1f3a1e8eb7d832e8dca2a3fede5     Author: Bela Ban <belaban@yahoo.com>     Date:   Fri Jul 15 17:14:48 2011 +0200          converted byte[] getState() and setState() methods to use input/output streams      commit 12a1a03c2d592d26420ceb2f79667999188236f2     Author: Bela Ban <belaban@yahoo.com>     Date:   Fri Jul 15 16:08:25 2011 +0200          ns      commit ba52a616eccdf5d82b836d5bca8d55265e2f907e     Author: Bela Ban <belaban@yahoo.com>     Date:   Thu Jul 14 17:28:40 2011 +0200          ns      commit 6a26bde7b4dadb10ffd9fd702e4531857dc6389c     Author: Bela Ban <belaban@yahoo.com>     Date:   Wed Jul 13 16:07:13 2011 +0200          removed meaningless inheritDoc      commit 4c4b97af3629b0cd06dad2245c87d47097b1fa6e     Author: Bela Ban <belaban@yahoo.com>     Date:   Wed Jul 13 14:21:39 2011 +0200          ns      commit 34baa85427a6d85cf959b99018870cde23112552     Author: Bela Ban <belaban@yahoo.com>     Date:   Wed Jul 13 14:21:14 2011 +0200          ns      commit d326ed7d72a3723354ca71a572b5a064ca09a521     Author: Bela Ban <belaban@yahoo.com>     Date:   Tue Jul 12 17:29:00 2011 +0200          changes to StateTransferTest2 to test 3 state transfer protocols      commit e552d4a331fab62fe9a5dbbcaf26f94a9e3a1ef3     Author: Bela Ban <belaban@yahoo.com>     Date:   Mon Jul 11 12:49:04 2011 +0200          added exception to all getState()/setState() callback impls      commit 0c79a8398bf2d9abdb1f8f45e74b5e298cbe5ef1     Author: Bela Ban <belaban@yahoo.com>     Date:   Mon Jul 11 11:21:04 2011 +0200          ns      commit 9997d0caf0cdd3786c3dccf53320f23754d0f63e     Author: Bela Ban <belaban@yahoo.com>     Date:   Fri Jul 8 18:44:14 2011 +0200          ns      commit c5ee72e6bc3e6c82f72e11aa9147223327ab2a90     Author: Bela Ban <belaban@yahoo.com>     Date:   Thu Jul 7 17:13:42 2011 +0200          ns      commit 28bb48d9a2ef7f26400e67d38ab4f6d12c913bb7     Author: Bela Ban <belaban@yahoo.com>     Date:   Thu Jul 7 16:46:57 2011 +0200          STREAMING_STATE_TRANSFER_SOCKET works now  more work on exception handling needed  though      commit c75aea409a46954b091ba748d43d075150e98b16     Author: Bela Ban <belaban@yahoo.com>     Date:   Wed Jul 6 18:02:11 2011 +0200          first cut of impl of STREAMING_STATE_TRANSFER_SOCKET works. Still to be done: exception handling (client or server crashes)      commit 9f5f6ed78a4eb53bb666f62dd5f5871fd8cd0ea9     Author: Bela Ban <belaban@yahoo.com>     Date:   Wed Jul 6 12:27:38 2011 +0200          added 2 new tests      commit 4bef4124ce25f32d4aa47ddefe9ead1e8f3f79a9     Author: Bela Ban <belaban@yahoo.com>     Date:   Wed Jul 6 11:35:13 2011 +0200          first cut of JGRP 619: streaming with the default transport (STREAMING_STATE_TRANSFER) works now. On to STREAMING_STATE_TRANSFER_SOCKET !      commit 7e654625ed846dbb37004a59f8b2a3f9cfc55ccf     Author: Bela Ban <belaban@yahoo.com>     Date:   Tue Jul 5 14:36:22 2011 +0200          exposing  suspended  as JMX attr      commit 83ce1625b199c160eee54d02bb37f2206372720a     Author: Bela Ban <belaban@yahoo.com>     Date:   Mon Jul 4 08:59:32 2011 +0200          made openBarrier() public and managed op      commit 4f3fab98698167161feb83b0ab16050843ff9714     Author: Bela Ban <belaban@yahoo.com>     Date:   Fri Jul 1 08:16:52 2011 +0200          cherry picked change to BARRIER (https://issues.jboss.org/browse/JGRP 1341) from master      commit ae360411aeaf019c37ed4081c5e6fd4bc29cea12     Author: Bela Ban <belaban@yahoo.com>     Date:   Thu Jun 30 09:37:50 2011 +0200          cherry picked addition of BlockingInputStream and unit test and change to CoordGmsImpl (from master)      commit 90698f5782669cef2b2af8d274d8e1a7d8cb8b12     Author: Bela Ban <belaban@yahoo.com>     Date:   Tue Jun 21 08:27:41 2011 +0200          changed loopback """"false"""" in tcp.xml      commit 5466fd495319c99edd632217bbc74b51779ed38b     Author: Bela Ban <belaban@yahoo.com>     Date:   Mon Jun 20 17:24:43 2011 +0200          First shot at StateTransferTest2  Merge of JGRP 619.merge (which was merged from JGRP 619) to master ",push down
Added GeoRecord and refactored external type package after well known encoder / decoder pattern.,push down
Introduced ParseSettings for tag and attribute name case options.,push down
Merge latest luna changes,push down
Unit tests for ant Epox nodes towards  4  and related fixes.,push down
remove AbstractMessage,push down
db version 3 change set,push down
A bug fix which caused improper termination fixed. DataSourceComponents do not anymore need to have schema information   all of these are moved to SQL generator part.,push down
Added support to keep cursors across multiple captures;   API cleanup (mostly in the tools);   moved properties to (anonymous) project.  ToDo:   somehow tools are getting incorrect parent frames (null). This causes their properties to be destroyed.,push down
Our own Keystone redux  Reworked to eliminate some of the questionable ideas from Keystone. Keystone doesn t keep a directory of endpoints Client certs used for services Fixed separation so that PlatformLayer itself doesn t need the auth DB,push down
project global refactoring,push down
Refactor HDMap configuration   add shaders  perspectives,push down
Refactored MPST/ExplicitEndpoints  and updated demos.,push down
Moved external type record namespace into encoder/decoder config,push down
"Added support for JDBC3.  The driver will now build under JDBC3 (i.e. Java 1.4). This concludes my changes that restructured the code to support JDBC3. The jdbc unit tests were also resturctured to allow different tests between jdbc2 and jdbc3  although currently make check (aka ant test) for JDBC3 just runs the JDBC2 tests.  Of special note the largeobject/PGblob and PGclob classes have been moved under the jdbc2/jdbc3 specific directories as they now differ by jdbc version.  Also note that this checkin removes the PostgresqlDataSource and files in the xa directory.  A recent checkin has added new datasource support that replaces the functionality provided by these classes.   Modified Files:  	jdbc/build.xml  	jdbc/org/postgresql/jdbc1/AbstractJdbc1DatabaseMetaData.java  	jdbc/org/postgresql/jdbc1/AbstractJdbc1ResultSet.java  	jdbc/org/postgresql/jdbc1/AbstractJdbc1ResultSetMetaData.java  	jdbc/org/postgresql/jdbc1/AbstractJdbc1Statement.java  	jdbc/org/postgresql/jdbc2/AbstractJdbc2Connection.java  	jdbc/org/postgresql/jdbc2/AbstractJdbc2DatabaseMetaData.java  	jdbc/org/postgresql/jdbc2/AbstractJdbc2ResultSet.java  	jdbc/org/postgresql/jdbc2/AbstractJdbc2ResultSetMetaData.java  	jdbc/org/postgresql/jdbc2/AbstractJdbc2Statement.java  	jdbc/org/postgresql/jdbc2/Array.java  	jdbc/org/postgresql/jdbc2/Jdbc2CallableStatement.java  	jdbc/org/postgresql/jdbc2/Jdbc2Connection.java  	jdbc/org/postgresql/jdbc2/Jdbc2DatabaseMetaData.java  	jdbc/org/postgresql/jdbc2/Jdbc2PreparedStatement.java  	jdbc/org/postgresql/jdbc2/Jdbc2ResultSet.java  	jdbc/org/postgresql/jdbc2/Jdbc2ResultSetMetaData.java  	jdbc/org/postgresql/jdbc2/Jdbc2Statement.java  	jdbc/org/postgresql/test/jdbc2/BatchExecuteTest.java  	jdbc/org/postgresql/test/jdbc2/BlobTest.java  	jdbc/org/postgresql/test/jdbc2/CallableStmtTest.java  	jdbc/org/postgresql/test/jdbc2/ConnectionTest.java  	jdbc/org/postgresql/test/jdbc2/DatabaseMetaDataTest.java  	jdbc/org/postgresql/test/jdbc2/DateTest.java  	jdbc/org/postgresql/test/jdbc2/DriverTest.java  	jdbc/org/postgresql/test/jdbc2/JBuilderTest.java  	jdbc/org/postgresql/test/jdbc2/MiscTest.java  	jdbc/org/postgresql/test/jdbc2/ResultSetTest.java  	jdbc/org/postgresql/test/jdbc2/TimeTest.java  	jdbc/org/postgresql/test/jdbc2/TimestampTest.java  	jdbc/org/postgresql/test/jdbc2/UpdateableResultTest.java  Added Files:  	jdbc/org/postgresql/jdbc2/AbstractJdbc2Blob.java  	jdbc/org/postgresql/jdbc2/AbstractJdbc2Clob.java  	jdbc/org/postgresql/jdbc2/Jdbc2Blob.java  	jdbc/org/postgresql/jdbc2/Jdbc2Clob.java  	jdbc/org/postgresql/jdbc3/AbstractJdbc3Blob.java  	jdbc/org/postgresql/jdbc3/AbstractJdbc3Clob.java  	jdbc/org/postgresql/jdbc3/AbstractJdbc3Connection.java  	jdbc/org/postgresql/jdbc3/AbstractJdbc3DatabaseMetaData.java  	jdbc/org/postgresql/jdbc3/AbstractJdbc3ResultSet.java  	jdbc/org/postgresql/jdbc3/AbstractJdbc3Statement.java  	jdbc/org/postgresql/jdbc3/Jdbc3Blob.java  	jdbc/org/postgresql/jdbc3/Jdbc3CallableStatement.java  	jdbc/org/postgresql/jdbc3/Jdbc3Clob.java  	jdbc/org/postgresql/jdbc3/Jdbc3Connection.java  	jdbc/org/postgresql/jdbc3/Jdbc3DatabaseMetaData.java  	jdbc/org/postgresql/jdbc3/Jdbc3PreparedStatement.java  	jdbc/org/postgresql/jdbc3/Jdbc3ResultSet.java  	jdbc/org/postgresql/jdbc3/Jdbc3ResultSetMetaData.java  	jdbc/org/postgresql/jdbc3/Jdbc3Statement.java  	jdbc/org/postgresql/test/TestUtil.java  	jdbc/org/postgresql/test/jdbc2/Jdbc2TestSuite.java  	jdbc/org/postgresql/test/jdbc3/Jdbc3TestSuite.java  Removed Files:  	jdbc/org/postgresql/PostgresqlDataSource.java  	jdbc/org/postgresql/largeobject/PGblob.java  	jdbc/org/postgresql/largeobject/PGclob.java  	jdbc/org/postgresql/test/JDBC2Tests.java  	jdbc/org/postgresql/xa/ClientConnection.java  	jdbc/org/postgresql/xa/TwoPhaseConnection.java  	jdbc/org/postgresql/xa/TxConnection.java  	jdbc/org/postgresql/xa/XAConnectionImpl.java  	jdbc/org/postgresql/xa/XADataSourceImpl.java ",push down
"Refactoring for IDEA plugin: extract interface from CompileLog  so that it can be used as error and warning callback interface.  [git p4: depot paths   """"//coremedia/jangaroo/"""": change   153262] ",push down
Refactored SQSConnector into an abstraction to allow for easier implementation of multiple approaches.,push down
refactored pipelinebase so it is usable to implement SharedJedisPipeline as well.,push down
Refactoring + bug fix,push down
Fixed FD leak  git svn id: https://svn.apache.org/repos/asf/mina/trunk@598234 13f79535 47bb 0310 9956 ffa450edef68,push down
Refactoring of criterion hierarchy Tests and implementation of outranking criterion,push down
improve TraceObject function,push down
"  Removed support for Kerberos authentication.   Made HTTPS always """"lax"""" (previously called """"lazy"""") and removed support for explicit lax HTTPS connections.   Used @Parameters to merge test classes with different setup into one test class.   Some general code cleanup. ",push down
Extend the result of a Task on a Batch  ENGINE 1439,push down
Issue 1: global required interactions should be either verified or disallowed improved stack trace filtering several smaller fixes and improvements,push down
"Change show hierarchy  It uses to go like this:   ShowOption extends Object   Show extends ShowOption   LocalShow extends Show   FailedShow extends LocalShow  Now  it goes like this:   ShowOption extends Object   FailedShow extends ShowOption   Show    formerly LocalShow    extends ShowOption   Series    formerly Show    extends Show  So  places that are supposed to be able to take either a FailedShow or a Show now must accept a ShowOption.  But other places that still take a Show  can now be guaranteed that the object they get is not a FailedShow.  As mentioned  the class that is now """"Show"""" is what used to be a """"LocalShow"""".  Reversing the inheritance makes more sense.  There is no place that took a LocalShow but couldn t use a (provider recognized) Show.  But classes like ListingsLookup only make sense with a non local show.  Now it uses """"Series""""  so there is no worry about it getting a non Series Show.  A FileEpisode no longer accepts a FailedShow.  When we fail to get a Show to map to the FileEpisode  we call setEpisodeShow() with null  which updates the seriesStatus.  We no longer have to check for having a FailedShow in the actualShow slot  though we still need to check for it being null.  When we re using instances of Series  also change variables and comments to refer to """"series"""" rather than """"show"""". ",push down
[NGRINDER 718] Clean the thread rampup code,push down
RF change in API,push down
"Resolve  168: Add tomcat8 support.  Thanx @h0nIg (Hans Joachim Kliemeck) and @cyrille leclerc (Cyrille Le Clerc).  See also pull requests  28 and  30  Tomcat8 now redirects with 303 instead of 302. For 303 httpclient automatically redirects  so httpclient must be asked not to do so  additionally the status code checks in TestUtils needed to be extended for 303.  Change context path to """""""" to get rid of tomcat8 //login workaround ",push down
Clean up 2.10 version of `TokenStreamFactory` to be upwards compatible with 3.0 one,push down
Some refactoring of router classes,push down
more Http and Net refactoring,push down
improved /give command (closes  72),push down
o refactored Resource abstraction (again!!) now less retarded  but still not 100% as I would like. Unfortunately this actually breaks the API of all previous 2.0 releases :( o Added support for registering full json files on a key and environment. Kind of made the api breakage worth it :),push down
Move trx message base to the core message project,push down
Rename  add noop dispatcher  cleanup,push down
Rewrite,push down
Fix sequence name type,push down
Change configuration format to get rid of settings on OutputWriters. Instead be explicit about settings for each output writer. This should allow to simplify quite a bit the code related to settings  have OutputWriter self document their options (well  you still have to look at the code).  While the code compiles and should be iso functional  this refactoring is not completed yet. Only BaseOutputWriter has been refactored (with impacts on others classes). More work needs to be performed.  The refactoring is backward compatible. This introduces a bit too much work in the constructor  which is not terribly readable. Partly that s the price to pay for backward compatibility  partly this could be cleaned up and abstracted away.,push down
Move JBidwatcher specific stuff from the general purpose JConfig library to the JBidwatcher specific JConfig library.,push down
[java] Deprecated CommentUtil  move parts to AST Comment  fix FormalComment,push down
"refactored the """"Cov build"""" post command & """"Cov analyze"""" post command. ",push down
o Upadated surefire 2.7.1 SNAPSHOT to build with 2.7  Removed all dead code that had to be left in there because surefire cannot currently be isolated from itself.  git svn id: https://svn.apache.org/repos/asf/maven/surefire/trunk@1051292 13f79535 47bb 0310 9956 ffa450edef68,push down
Introduced RandomDataProviderStrategy interface as extension to DataProviderStrategy and pulled up few methods in AbstractRandomDataProviderStrategy to this new interface.,push down
Re design a new data structure of BSPMessage  git svn id: https://svn.apache.org/repos/asf/incubator/hama/trunk@1088939 13f79535 47bb 0310 9956 ffa450edef68,push down
* Argument parsing is now done with JCommander (syntax is more compact and easier to evolve than commons cli) * Introduced ExecutorServices to execute queries and to process results  Still to do: * Registration and unregistration of mbeans is still pretty ugly,push down
Resolved issue: DIRMINA 547   Reduce unnecessary thread creation and destruction caused by IdleStatusChecker * IdleStatusChecker is not a singleton anymore * One AbstractIoService has one IdleStatusChecker thread * An IdleStatusChecker thread starts automatically when a new service is created  and stops when the service is disposed.    git svn id: https://svn.apache.org/repos/asf/mina/trunk@635930 13f79535 47bb 0310 9956 ffa450edef68,push down
convert Force from class to interface  comment methods in Force  remove @Override  add unimplemented methods  and remove empty constructors.,push down
HTTPCLIENT 1824: asynchronous HTTP cache executor to use asynchronous HTTP cache APIs; changed algorithm of the backend response freshness check (both classic and async cache implementations),push down
ENGINE 750: Fixes after code review,push down
Creates a single center NOD1 from real live data.  git svn id: http://svn.mkgmap.org.uk/mkgmap/branches/nod@661 25d90789 57f7 4ee0 8453 03a3dfeeeb22,push down
Fixing a bunch of JMS compliance issues.,push down
removed web app from this git repository,push down
Extend functionality of ResourceManager to be able to handle IPv4 and IPv6 multicast addresses.,push down
Clean up a bunch of stuff  import completer impls from gshell,push down
Build fixes.  472,push down
"Scaling down the use of """"Parsing"""". Refactored most of it into the  parser superclass.",push down
insignificant cleanup [ci skip],push down
Ongoing refactoring  PMD rules to check code structure,push down
Refactored AbstractName  MessageIdKind/Name and NameCollector.,push down
A few minor improvements to probes,push down
RF 9309: Move panels to CDK,push down
wcet: Add ObjectCacheAnalysisDemo  refactor RecursiveAnalysis for reuse,push down
using the Jangaroo parsing infrastructure; all tests green; getters inherited,push down
Factory Instantation of Destination Objects  Added the ability to create translation targets using a factory. In particular  this allows the substitution of subclasses or implementations of an interface within a translation.  This has particular merit with translation of parallel hierarchies  although it also has value when defining classes with interface based properties and the like.  Closes  75  for now; although I may soon want to do the same thing but for collection properties.,push down
moved checkEventSequence() to FlushTest,push down
In order to develop invenio  refactored aqp to be abstract,push down
NUTCH 134 : Added a summarizer extension point and two enxtensions: * summary basic is the current nutch implementation moved into a plugin * summary lucene a raw version of a summarizer plugin based on lucene highlighter   git svn id: https://svn.apache.org/repos/asf/lucene/nutch/trunk@405165 13f79535 47bb 0310 9956 ffa450edef68,push down
Test refactored so it s possible to test with different classpaths,push down
SC QCADOOMES 1928 Refactored production scheduling and some other fixes.,push down
More work on database  bug fixes,push down
First set of changes towards a massive refactoring of the AuctionServer class  to be more specific  more testable  and more sane.  git svn id: svn://svn.jbidwatcher.com/jbidwatcher/trunk@48 b1acfa68 eb39 11db b167 a3a8cd6b847e,push down
few fixes and native sources updated to 1.6.4,push down
Adding classes for creating the conjunction or disjunction of two queries + testcase   Because of this  change QueryResult into an interface   Make use of the BinaryPrefixComparator to enable all tests to run  though this relies on patching HBase with HBASE 2211. (just for once  I m taking the liberty to commit this anyway since I m the only one working on this).   git svn id: svn+ssh://dev.outerthought.org/outerthought/lilyproject/projects/lily/trunk@3846 b80d95f8 e103 0410 bd55 e03a9dc29394,push down
refactor exceptions for plugin management.,push down
mods to reflect client < > account chooser protocol  and refactoring...,push down
Refactored out the G2DGLCanvas so it has a simple implementation of just rendering as a canvas  not an entire JComponent hierarchy.,push down
editor layout was customized for Experiment and ArrayDesign,push down
Refactor the cli module,push down
Changed central weights not to have colouring in the actual weight cells.,push down
Improve MultiCommand to be reviewed more precisely to handle displayUi correctly,push down
Refactored mod chests/inventories compatibility,push down
"Refactoring  to make nexusUrl non needed.  There was a mess  this change should clean it up a bit. Out of 4 strategies we have  """"deferred"""" and """"direct"""" strategies does not tamper with REST  they should be able to work without specified nexusUrl in plugin configuration. On the other hand  the """"image"""" and """"staging"""" strategies do use REST (former to close and latter fully uses the V2 REST API of Staging).  Now class hierarchy is cleaned up too  non client users extend AbstractDeployStrategy while client users extend AbstractStagingDeployStrategy. ",push down
HV 1667 Create an interface for BeanMetaDataManager,push down
removed a bunch of unused jars and other files.   Added MatchingTurboFilter which takes over some responsability from TurboFilter   Added corresponding test cases,push down
Refactored projector as regular subprotocol visitor.  Refactored debug printing for projections.,push down
Refactored NameNode classes.,push down
Fixed path to update lb extension,push down
"Proceed to create the new layout for the ToolbarGroupDodckStation """"new version"""". In this purpose the prepareDrop method which generates a DropInfo class and the drop methods which use it are now defined in the subclasses an no more AbstractToolbarDockStation class itself. ",push down
* Reworked Processor object. * optimized the number of thread used by the application (limited on win32 JVM). * added ThreadUtil.runSingle(..) to run a single instance of a process (same as the previous bgRunSingle()). * SequenceUtil.scale(..) now correctly update pixel size information. * fixed XLSUtil error message. * cleanup,push down
Enhanced PmBean cache cleanup.,push down
Start fix problem with docx header/footer by using master page manager.,push down
[MSUREFIRE 23] refactor pojo only methods into pojo test set  and create TestNGXmlTestSuite  git svn id: https://svn.apache.org/repos/asf/maven/surefire/branches/surefire testng@383108 13f79535 47bb 0310 9956 ffa450edef68,push down
Implement basic margin collapsing / Various refactorings in preparation for shrink to fit / Add hack to treat auto margins as zero,push down
Introduced interface for ParticleMover. We are expecting DistributedParticleMover in the future.,push down
TTALE 176: Completed patch as supplied on the JIRA task. Modified the API and documentation to allow for custom reports properly. Also removed package level reports temporarily so that work on topic branches can commence properly.,push down
Added apache commons net lib for LAOS TFTP Laos: TFTP support (untested) Added: LibInfo class with Version and Driver Information Added: Moved JUnit tests (old and stupid) from VisiCut Added: getDriverName() method to LaserCutter interface Changed: EpilogCutter splittet into EpilogZing and EpilogHelix,push down
Further refactoring of `JsonFactory`,push down
OOZIE 1311 Refactor action Main classes into sharelibs (rkanter)  git svn id: https://svn.apache.org/repos/asf/oozie/trunk@1466926 13f79535 47bb 0310 9956 ffa450edef68,push down
Moved currentSolution out of the AbstractSolver and wrote javadoc for the AbstractLocalSearchSolver (complete now),push down
[BACKLOG 1498] Refactor Model Annotation Models,push down
Nick O: Refactored the Mailer  added a Cookies utility class  fixed a bug with string formats in the BaseException  provided the SyntheticHttpServletResponse  so anyone can capture Views into string,push down
lots more work    HG   rename : src/editor/inspections/quickfixes/AbstractQuickfix.java  > src/editor/inspections/quickfixes/LuaFix.java rename : src/lang/psi/LuaVisitor.java  > src/lang/psi/LuaElementVisitor.java rename : src/lang/psi/impl/LuaBlockImpl.java  > src/lang/psi/impl/statements/LuaBlockStatementImpl.java rename : src/lang/psi/LuaBlock.java  > src/lang/psi/statements/LuaBlockStatement.java,push down
issue  209 introducing Server/Client ConnectionContext distinction and additional context fields,push down
!! once again a temporary commit to keep modifications : DO NOT COMPILE !! * modified the QueryOption mechanism once again (should be the last version) to be extensible. Now QueryOptions are inherited from QueryOption and declare their own typed and named fields. It s easier for understanding and tracing options but it requires some more casts in the code! * modified the whole JDBCPersistenceManager according to the new option mechanism and added a specific QueryOptionJdbcContext for statement reuse,push down
Complete rewrite of PojoBuilder; migrate from StringTemplates to JavaWriter,push down
moved real code to hidden class  made jgroups imp subclass  added init(),push down
fix for TFJ 103 : User element is out of sync fix for TFJ 104 : UserWithStatus element is out of sync Introducing ExtendedUser  deprecating UserWithStatus to make the class name consistent with the API Doc http://apiwiki.twitter.com/REST+API+Documentation Extendeduserinformationelement  git svn id: http://yusuke.homeip.net/svn/twitter4j/trunk@208 117b7e0d 5933 0410 9d29 ab41bb01d86b,push down
Refactoring changes,push down
more refactoring.  didn t really get anywhere  but everything still works   git svn id: https://pmd.svn.sourceforge.net/svnroot/pmd/trunk@1044 51baf565 9d33 0410 a72c fc3788e3496d,push down
CLOSED   task 80: Remove acess to width and height from model  https://github.com/vainolo/Object Process Programming/issues/issue/80,push down
moved time sensitive test to separate file,push down
Moved mouse over related code to subclass  MouseOverMouseManager  of class  DefaultMouseManager  so that it can be used optionally.,push down
Variable referencing refactoring starting.  This is needed to accommodate the recent double dotted notation and remove the current artificial refusal to handle identifiers with dots in them.,push down
Fix query on transactional cache,push down
Filter support extended,push down
Caching refactoring;,push down
Improved cacheCreate tests  added getUserTransaction test  test support reorg,push down
[AESH 120] cleaned up ConsoleCommand  now its an interface with two methods. should be easier to use.,push down
Refactored IterateStage to use TestStage as base class * TestStage got timeout and synchronousRequests properties * Generalized the way how results are gathered from stressors/logic * IterationStatistics generalized to IterationData * added example configuration for iteration,push down
Various changes to support DAO interfaces  which are required for Spring s transaction management.,push down
move classes to .impl package  implement packages fetcher,push down
"Code cleanup in preparation for release of 3.0.   Simplified """"protocol"""" structure    Moved ConfigLocator logic into HibernateConnection    Split large HibernateDatabase class into multiple implementations    Added javadoc    Test and test data reorganization    Removed slf4j dependency ",push down
Cleanup: moved property label providers to AdapterRegistry,push down
* applying laurent s patch for correct handling of multiply typed individuals when lazy loading them into a collection  fix  87,push down
Refactored code to support separate managers for Sauce Connect 1 and 2,push down
Fix  413,push down
MODULES 2  MODULES 16  MODULES 18  MODULES 15  MODULES 17: Multiple fixes in dependency graph rearchitecture,push down
"[SUREFIRE 958] Fix documentation of """"includes"""" property  o includes property now has separated javadocs for failsafe and surefire ",push down
Annotations for generation plus simplify ReadStream/WriteStream stuff,push down
added EnhancedPredcitiveModelBuilder and CrossValidator to work with data related hyper parameters,push down
Changed Plugin from a class to an interface  and changed the various plugins to match (mostly just implementing isRunning()! )  Added support for scripting to Plugin  and extended the various classes to match. Most simply return null or an empty array of Scriptable hooks. At this point  only Proxy.allowConnection is implemented.  Added support for scripting to Framework to create and manage the script manager.,push down
Post HTTPCLIENT 1372 cleanups; all multipart entity generation logic moved to MultipartEntityBuilder  git svn id: https://svn.apache.org/repos/asf/httpcomponents/httpclient/trunk@1495409 13f79535 47bb 0310 9956 ffa450edef68,push down
kill buffer fixed,push down
tools/microcode timing analysis: Version 2. Refactoring to support other processors and CMP  support for IO writes (monitorenter/monitorexit).,push down
fix  LBCLASSIC 327 and  LBCLASSIC 333,push down
Refactor Cluster Update REST API. Use /api/cluster/{name} for updating cluster attributes and /api/cluster/{name}/action?state {stop start resume} for changing cluster state.,push down
move methods in test classes,push down
Fix for  19 fix  prefix should be added to keyword calls only (not to variables),push down
refactoring df4j nio* continued.,push down
cleanup on snapshot api,push down
refactor role validation  configuration validation,push down
"Merged revisions 8979 8980 9044 9045 9056 9080 9083 9091 9130 9131 9136 9139 9186 9187 9236 9239 9241 9258 9272 9288 9335 9342 9347 9359 9365 9368 9370 9374 9376 9378 9380 9451 9453 9455 9517 9524 9589 9591 9679 9682 via svnmerge from  https://svn.dev.java.net/svn/hudson/branches/clearcase 0.6 SNAPSHOT  ........   r8979 | redsolo | 2008 04 30 11:12:04 +0200 (on  30 apr 2008) | 1 line      Added new files for UCM activity based change log ........   r8980 | redsolo | 2008 04 30 13:48:45 +0200 (on  30 apr 2008) | 1 line      Moved command lsactivity to ClearTool ........   r9044 | redsolo | 2008 05 06 10:25:55 +0200 (ti  06 maj 2008) | 1 line      Move cleartool executable string into HudsonClearToolLauncher ........   r9045 | redsolo | 2008 05 06 10:37:33 +0200 (ti  06 maj 2008) | 1 line      Removed cleartool executable string away from ClearTool implementations ........   r9056 | redsolo | 2008 05 06 23:57:21 +0200 (ti  06 maj 2008) | 2 lines      Applied path for UcmActivity and UcmHistoryBuilder from Henrik.   Added OutputFormat and ClearToolFormatHandler to help with the clear tool formatting. ........   r9080 | redsolo | 2008 05 08 11:07:51 +0200 (to  08 maj 2008) | 1 line      [clearcase plugin] Add UCM parsing of changelog.xml (Patch from Henrik) ........   r9081 | redsolo | 2008 05 08 11:21:05 +0200 (to  08 maj 2008) | 1 line      [clearcase plugin] Add test for writing UCM changelog.xml ........   r9082 | redsolo | 2008 05 08 12:20:52 +0200 (to  08 maj 2008) | 1 line      [clearcase plugin] Added changlogaction from Henrik ........   r9083 | redsolo | 2008 05 08 13:18:41 +0200 (to  08 maj 2008) | 1 line      [clearcase plugin] lshistory now returns Reader instead of change logs ........   r9091 | redsolo | 2008 05 10 10:05:07 +0200 (lö  10 maj 2008) | 1 line      [clearcase plugin] Finished importing UCM changes from Henrik. ........   r9130 | redsolo | 2008 05 11 21:30:12 +0200 (sö  11 maj 2008) | 1 line      [clearcase plugin] Added patch to remove the """"view"""" from UCM Activity from Henrik Lynggaard ........   r9131 | redsolo | 2008 05 11 22:38:51 +0200 (sö  11 maj 2008) | 1 line      [clearcase plugin] More test files ........   r9136 | redsolo | 2008 05 11 23:20:01 +0200 (sö  11 maj 2008) | 1 line      [clearcase plugin] Corrected tests for UcmChangeLogAction ........   r9137 | redsolo | 2008 05 11 23:35:21 +0200 (sö  11 maj 2008) | 1 line      [clearcase plugin] Fixed failing tests for lshistory ct command ........   r9138 | redsolo | 2008 05 12 00:05:55 +0200 (må  12 maj 2008) | 1 line      [clearcase plugin] Fixed change log parsing for base and UCM SCMs. ........   r9139 | redsolo | 2008 05 12 00:12:41 +0200 (må  12 maj 2008) | 1 line      [clearcase plugin] Fixed compile error and tests ........   r9186 | redsolo | 2008 05 12 23:44:07 +0200 (må  12 maj 2008) | 1 line      [clearcase plugin] Applied patch to remove the """"view"""" from UCM Activity ........   r9187 | redsolo | 2008 05 12 23:47:04 +0200 (må  12 maj 2008) | 1 line      [clearcase plugin] Applied patch to add sub activities to change log ........   r9236 | lynggaard | 2008 05 14 21:18:27 +0200 (on  14 maj 2008) | 1 line      Dummy change to test developer access ........   r9239 | lynggaard | 2008 05 14 22:18:18 +0200 (on  14 maj 2008) | 1 line      [clearcase plugin 0.6 branch] UCM changelog page converted to activity based changelog ........   r9241 | lynggaard | 2008 05 14 23:05:55 +0200 (on  14 maj 2008) | 1 line      [clearcase plugin 0.6 branch] Preparations for UCM tagging support. Need to expose the mkbl cleartool command ........   r9258 | redsolo | 2008 05 15 10:45:50 +0200 (to  15 maj 2008) | 1 line      [clearcase plugin] Made get methods in UCM UcmActivity @exported ........   r9272 | lynggaard | 2008 05 15 21:43:45 +0200 (to  15 maj 2008) | 1 line      [clearcase plugin 0.6 branch] build extended changelog (changelog since last not failed build) ........   r9288 | lynggaard | 2008 05 15 22:57:11 +0200 (to  15 maj 2008) | 1 line      [clearcase plugin 0.6 branch] lsactivity needs the viewname ........   r9335 | lynggaard | 2008 05 16 21:10:00 +0200 (fr  16 maj 2008) | 1 line      [clearcase plugin 0.6 branch] if the user writes stream: as part of the stream name  then strip it. ........   r9342 | lynggaard | 2008 05 16 21:27:42 +0200 (fr  16 maj 2008) | 1 line      [clearcase plugin 0.6 branch] extra unittest to locate issue 1706 + 1707 ........   r9347 | lynggaard | 2008 05 16 23:46:39 +0200 (fr  16 maj 2008) | 1 line      [clearcase plugin 0.6 branch] Cleartool is particular about parameter ordering ........   r9359 | lynggaard | 2008 05 17 16:31:41 +0200 (lö  17 maj 2008) | 1 line      [clearcase plugin 0.6 branch] add toString method for easy debug ........   r9365 | lynggaard | 2008 05 17 19:43:40 +0200 (lö  17 maj 2008) | 1 line      [clearcase plugin 0.6 branch] Improve UCM specific changelog (issue  1601) ........   r9368 | lynggaard | 2008 05 17 20:56:14 +0200 (lö  17 maj 2008) | 1 line      [clearcase plugin 0.6 branch] Ensure changelog action is reset for extended changelog ........   r9369 | lynggaard | 2008 05 17 21:15:08 +0200 (lö  17 maj 2008) | 1 line      [clearcase plugin 0.6 branch] Improve ucm changelog  provide stream and user for sub activities  ........   r9370 | lynggaard | 2008 05 17 21:20:26 +0200 (lö  17 maj 2008) | 1 line      [clearcase plugin 0.6 branch] Remove """"seconds"""" from UCM changelog ........   r9374 | lynggaard | 2008 05 18 11:04:33 +0200 (sö  18 maj 2008) | 1 line      [clearcase plugin 0.6 branch] Fix tokenize issue on branch also ........   r9375 | lynggaard | 2008 05 18 11:48:52 +0200 (sö  18 maj 2008) | 1 line      [clearcase plugin 0.6 branch] Improve ucm changelog page ........   r9376 | lynggaard | 2008 05 18 12:15:18 +0200 (sö  18 maj 2008) | 1 line      [clearcase plugin 0.6 branch]Minor change to regexp generation ........   r9378 | lynggaard | 2008 05 18 16:12:56 +0200 (sö  18 maj 2008) | 1 line      [clearcase plugin 0.6 branch] new UCM fake cleartool setup ........   r9379 | lynggaard | 2008 05 18 16:17:22 +0200 (sö  18 maj 2008) | 1 line      [clearcase plugin 0.6 branch] re enable edittype icons in UCM ........   r9380 | lynggaard | 2008 05 18 17:21:04 +0200 (sö  18 maj 2008) | 1 line      [clearcase plugin 0.6 branch] lsactivity should be run from within the view ........   r9451 | redsolo | 2008 05 19 23:34:31 +0200 (må  19 maj 2008) | 1 line      [clearcase plugin] Move vob path handling out from lshistory into ClearCaseScm class. Fixed so load rules remove the \ and / before they are used in the lshistory command ........   r9453 | redsolo | 2008 05 20 00:11:46 +0200 (ti  20 maj 2008) | 1 line      [clearcase plugin] No need to quote the command line args as ArgumentListBuilder already does it ........   r9454 | redsolo | 2008 05 20 00:17:36 +0200 (ti  20 maj 2008) | 1 line      [clearcase plugin] Fixed problem that was introduced in my refactoring for vob paths ........   r9455 | redsolo | 2008 05 20 00:18:33 +0200 (ti  20 maj 2008) | 1 line      [clearcase plugin] Added tests for getbranchnames ........   r9517 | lynggaard | 2008 05 21 22:57:08 +0200 (on  21 maj 2008) | 1 line      [clearcase plugin 0.6 branch] remove full username from changelog as we now rely on hudson users to display that ........   r9524 | lynggaard | 2008 05 21 23:27:19 +0200 (on  21 maj 2008) | 2 lines      [clearcase plugin 0.6 branch] Defensive code to handle lshistory with empty activity names.    It appears that most (99%) version entries with empty activity names are version 0 or mkbranch items. this code is only there to catch it in case some real version has no activity. However that should ideally never happen ........   r9589 | lynggaard | 2008 05 22 21:36:12 +0200 (to  22 maj 2008) | 1 line      [clearcase plugin 0.6 branch] Add additional mkview documentation ........   r9590 | lynggaard | 2008 05 22 22:00:22 +0200 (to  22 maj 2008) | 1 line      [clearcase plugin 0.6 branch] small javadoc update ........   r9591 | lynggaard | 2008 05 22 22:24:47 +0200 (to  22 maj 2008) | 1 line      [clearcase plugin 0.6 branch] remove old """"extended changelog"""" code  as this is not the way we want to do it  ........   r9679 | redsolo | 2008 05 29 23:08:35 +0200 (to  29 maj 2008) | 1 line      [clearcase plugin] Fixed so the changelog actions are adding the %c (comments) to the lshistory format ........   r9682 | redsolo | 2008 05 29 23:19:10 +0200 (to  29 maj 2008) | 1 line      [clearacse plugin] Removed unused class ........   git svn id: https://svn.dev.java.net/svn/hudson/trunk/hudson/plugins/clearcase@10146 71c3de6d 444a 0410 be80 ed276b4c234a ",push down
fixed problem with VJournal popup,push down
Remove StyleContext  split CustomCodeArea in two,push down
Added builder class for FormBodyPart instances; API improvements in MultipartEntityBuilder  git svn id: https://svn.apache.org/repos/asf/httpcomponents/httpclient/trunk@1647648 13f79535 47bb 0310 9956 ffa450edef68,push down
Refactor URLData to create a reusable implementation,push down
* SearchBar integration :    search in plugin  protocol and kernel command.    beta version (has some bugs).    need a bit of refactoring. * New ROI panel :    can change size and position depending the ROI type.    added subtraction boolean operation.    added surface / volume information.    added pixel intensity information.  * ROI :    added getVolume() method (return volume in number of pixel).    added getPerimeter() method (return perimeter in number of pixel).    added getDimension() method (return number of dimension). * BooleanMask2D :    added getPoints() method (return points composing the mask).    added getComponents() method (return independent mask object).    added getEdgePoints() method (return mask contour points).    added getComponentsPoints() method. * Point3D/4D/5D :    uses the same form as java Point2D (with new Integer type).    do not longer extends vecmaths objects (no more compatible). * Rectangle3D/4D/5D :    uses the same form as java Rectangle2D (with new Integer type). * Centralized all kernels menu commands to actions :    FileActions : all file commands.    PreferencesActions : launch preferences panel commands.    SequenceOperationActions : sequence manipulation commands.    WindowActions : window arrangement / opening commands.    GeneralActions : all others commands. * Canvas2D :    added image displacement on 2/4/8/6 keypad keys.    added void translate(...) method. * IcyAbstractAction :    now supports background action execution (with progressbar)    added GetRichToolTip() method to retrieve the action RichToolTip. * IcyCommandxxxButton now support IcyAbstractAction. * improved histogram display. * can now directly open an image in the Serie Selector by double clicking on it. * Sequence operation frame are now modal dialog. * added AbstractSequenceModel class for easy SequenceModel implementation. * added PluginSearchProvider interface : a plugin implementing this interface provides results for the global search bar. * added IcyFrame.getVisibleRect() method. * added methods to LookAndFeelUtil. * added SwimmingObjectChooser component to select specific object type from the swimming pool. * added WeakWindowFocusListener class. * added PluginRichToolTip class. * lot of others minors changes and improvements. * bug fixes  clean up and refactoring.,push down
Refactoring IO State Interface generation.,push down
NXP 21163: refactor to use different type of queue  moving dispatcher from queue manager to producer  start impl cqueuemanager,push down
Fixing Bucketing aggregations ( 187)  Created a common Bucket class for all bucketting aggregations to return  Renamed `TermsAggregation.Bucket` to `TermsAggregation.Entry` to avoid naming confusion as well as to remain consistent with `TermsFacet.Entry`  Created two distinct types of Aggregations:    * `MetricAggregation`s which can have nested sub aggregations    * `BucketAggregation`s which cannot have nested sub aggregations     but do have a `getBuckets()` call which returns a list of buckets  Created a `RootAggregation` object as a filler to house an empty `MetricAggregation` used in `SearchResult`  Updated tests to reflect changes,push down
Major refactoring; also  preliminary work for  7,push down
multicast change notification,push down
GET virtual ips now working in core. Refactored virtual repositories to use interfaces for autowiring,push down
Update notification translators to current specs.  Clean up request types.  (B 09961),push down
report refactoring   git svn id: https://pmd.svn.sourceforge.net/svnroot/pmd/trunk@166 51baf565 9d33 0410 a72c fc3788e3496d,push down
starting to reorganize the DynamicEntity family line to ensure consistent clear behavior. Also  lots of varaible and class renmaing for consitency.,push down
core: Workspace and project management work  some IMatrix modifications  some names refactoring  git svn id: https://bg.upf.edu/svn/gitools/trunk@599 1b512f91 3386 4a98 81e7 b8836ddf8916,push down
* Canvas3D:    name changed to VtkCanvas    added new Volume visualization option (as GPU Raycasting).    separated volume rendering in dedicated class. * updated VTK library loading for unix system. * added VtkSequenceVolume and VtkImageVolume classes. * SequenceUtil: added toGray(..)  toRGB(..) and toARGB() methods.,push down
removing params and body from GET and DELETE requests,push down
A usage sample for factory_override extension point.  An src dev directory has been created so as to host all user development modifications. It replaces the  @generated  annotation and ensure to have a unique directory ( src ) with only generated code  and all overriden code in another directory.  Change the copyright in files too...  git svn id: svn+ssh://svn.opcoach.com/srv/d_opcoach/svn/training/trunk@271 28ab6df1 7a97 4e50 b59a 519495a15fef,push down
Fixed stacktrace in non standard jboss install,push down
some refactors  git svn id: http://yusuke.homeip.net/svn/twitter4j/trunk@477 117b7e0d 5933 0410 9d29 ab41bb01d86b,push down
Refactored Rule base classes around Rule interface instead of around AST Visitor interfaces.  Long term goal is to support additional languages beyond Java.  Organized like so:     pmd.AbstractRule          // Core Rule implementation    pmd.XPathRule             // Core XPath Rule implementation    pmd.java.AbstractJavaRule // Java specific Rule implementation    pmd.jsp.AbstractJspRule   // JSP specific Rule implementation    pmd.xxx.AbstractXxxRule   // Language XXX specific Rule implementation    ...  This is a start  there s a much larger reorganizing effort to get things in sync.  Additional work is needed on generalizing XPathRule.  git svn id: https://pmd.svn.sourceforge.net/svnroot/pmd/trunk@5734 51baf565 9d33 0410 a72c fc3788e3496d,push down
EXOJCR 1019: digest auth redesigned,push down
improve,push down
make tests pass on PhantomJS and Chrome   create abstract GrapheneProxyHandler for custom proxies without no   contextual information   renamed GrapheneProxyHandler to GrapheneContextualHandler   do not call unimplemented callbacks in some tests   renaming test TestGraphene to TestGrapheneUtilitiesParalelly,push down
Fixes for inheritance related bugs  refactoring,push down
extract interfaces to improve testability,push down
fix EMBPD00141104,push down
Move test sections out of the menus.,push down
#NAME?,push down
Refactor some more stuff now it should compile fine,push down
refactoring. propper support for variables and function calls. variable/function/path libs are now in seporate package (refactored)   moving to context step by step.,push down
add testsuite  remove ETerm,push down
"Merged revisions 8979 8980 9044 9045 9056 9080 9083 9091 9130 9131 9136 9139 9186 9187 9236 9239 9241 9258 9272 9288 9335 9342 9347 9359 9365 9368 9370 9374 9376 9378 9380 9451 9453 9455 9517 9524 9589 9591 9679 9682 via svnmerge from  https://svn.dev.java.net/svn/hudson/branches/clearcase 0.6 SNAPSHOT  ........   r8979 | redsolo | 2008 04 30 11:12:04 +0200 (on  30 apr 2008) | 1 line      Added new files for UCM activity based change log ........   r8980 | redsolo | 2008 04 30 13:48:45 +0200 (on  30 apr 2008) | 1 line      Moved command lsactivity to ClearTool ........   r9044 | redsolo | 2008 05 06 10:25:55 +0200 (ti  06 maj 2008) | 1 line      Move cleartool executable string into HudsonClearToolLauncher ........   r9045 | redsolo | 2008 05 06 10:37:33 +0200 (ti  06 maj 2008) | 1 line      Removed cleartool executable string away from ClearTool implementations ........   r9056 | redsolo | 2008 05 06 23:57:21 +0200 (ti  06 maj 2008) | 2 lines      Applied path for UcmActivity and UcmHistoryBuilder from Henrik.   Added OutputFormat and ClearToolFormatHandler to help with the clear tool formatting. ........   r9080 | redsolo | 2008 05 08 11:07:51 +0200 (to  08 maj 2008) | 1 line      [clearcase plugin] Add UCM parsing of changelog.xml (Patch from Henrik) ........   r9081 | redsolo | 2008 05 08 11:21:05 +0200 (to  08 maj 2008) | 1 line      [clearcase plugin] Add test for writing UCM changelog.xml ........   r9082 | redsolo | 2008 05 08 12:20:52 +0200 (to  08 maj 2008) | 1 line      [clearcase plugin] Added changlogaction from Henrik ........   r9083 | redsolo | 2008 05 08 13:18:41 +0200 (to  08 maj 2008) | 1 line      [clearcase plugin] lshistory now returns Reader instead of change logs ........   r9091 | redsolo | 2008 05 10 10:05:07 +0200 (lö  10 maj 2008) | 1 line      [clearcase plugin] Finished importing UCM changes from Henrik. ........   r9130 | redsolo | 2008 05 11 21:30:12 +0200 (sö  11 maj 2008) | 1 line      [clearcase plugin] Added patch to remove the """"view"""" from UCM Activity from Henrik Lynggaard ........   r9131 | redsolo | 2008 05 11 22:38:51 +0200 (sö  11 maj 2008) | 1 line      [clearcase plugin] More test files ........   r9136 | redsolo | 2008 05 11 23:20:01 +0200 (sö  11 maj 2008) | 1 line      [clearcase plugin] Corrected tests for UcmChangeLogAction ........   r9137 | redsolo | 2008 05 11 23:35:21 +0200 (sö  11 maj 2008) | 1 line      [clearcase plugin] Fixed failing tests for lshistory ct command ........   r9138 | redsolo | 2008 05 12 00:05:55 +0200 (må  12 maj 2008) | 1 line      [clearcase plugin] Fixed change log parsing for base and UCM SCMs. ........   r9139 | redsolo | 2008 05 12 00:12:41 +0200 (må  12 maj 2008) | 1 line      [clearcase plugin] Fixed compile error and tests ........   r9186 | redsolo | 2008 05 12 23:44:07 +0200 (må  12 maj 2008) | 1 line      [clearcase plugin] Applied patch to remove the """"view"""" from UCM Activity ........   r9187 | redsolo | 2008 05 12 23:47:04 +0200 (må  12 maj 2008) | 1 line      [clearcase plugin] Applied patch to add sub activities to change log ........   r9236 | lynggaard | 2008 05 14 21:18:27 +0200 (on  14 maj 2008) | 1 line      Dummy change to test developer access ........   r9239 | lynggaard | 2008 05 14 22:18:18 +0200 (on  14 maj 2008) | 1 line      [clearcase plugin 0.6 branch] UCM changelog page converted to activity based changelog ........   r9241 | lynggaard | 2008 05 14 23:05:55 +0200 (on  14 maj 2008) | 1 line      [clearcase plugin 0.6 branch] Preparations for UCM tagging support. Need to expose the mkbl cleartool command ........   r9258 | redsolo | 2008 05 15 10:45:50 +0200 (to  15 maj 2008) | 1 line      [clearcase plugin] Made get methods in UCM UcmActivity @exported ........   r9272 | lynggaard | 2008 05 15 21:43:45 +0200 (to  15 maj 2008) | 1 line      [clearcase plugin 0.6 branch] build extended changelog (changelog since last not failed build) ........   r9288 | lynggaard | 2008 05 15 22:57:11 +0200 (to  15 maj 2008) | 1 line      [clearcase plugin 0.6 branch] lsactivity needs the viewname ........   r9335 | lynggaard | 2008 05 16 21:10:00 +0200 (fr  16 maj 2008) | 1 line      [clearcase plugin 0.6 branch] if the user writes stream: as part of the stream name  then strip it. ........   r9342 | lynggaard | 2008 05 16 21:27:42 +0200 (fr  16 maj 2008) | 1 line      [clearcase plugin 0.6 branch] extra unittest to locate issue 1706 + 1707 ........   r9347 | lynggaard | 2008 05 16 23:46:39 +0200 (fr  16 maj 2008) | 1 line      [clearcase plugin 0.6 branch] Cleartool is particular about parameter ordering ........   r9359 | lynggaard | 2008 05 17 16:31:41 +0200 (lö  17 maj 2008) | 1 line      [clearcase plugin 0.6 branch] add toString method for easy debug ........   r9365 | lynggaard | 2008 05 17 19:43:40 +0200 (lö  17 maj 2008) | 1 line      [clearcase plugin 0.6 branch] Improve UCM specific changelog (issue  1601) ........   r9368 | lynggaard | 2008 05 17 20:56:14 +0200 (lö  17 maj 2008) | 1 line      [clearcase plugin 0.6 branch] Ensure changelog action is reset for extended changelog ........   r9369 | lynggaard | 2008 05 17 21:15:08 +0200 (lö  17 maj 2008) | 1 line      [clearcase plugin 0.6 branch] Improve ucm changelog  provide stream and user for sub activities  ........   r9370 | lynggaard | 2008 05 17 21:20:26 +0200 (lö  17 maj 2008) | 1 line      [clearcase plugin 0.6 branch] Remove """"seconds"""" from UCM changelog ........   r9374 | lynggaard | 2008 05 18 11:04:33 +0200 (sö  18 maj 2008) | 1 line      [clearcase plugin 0.6 branch] Fix tokenize issue on branch also ........   r9375 | lynggaard | 2008 05 18 11:48:52 +0200 (sö  18 maj 2008) | 1 line      [clearcase plugin 0.6 branch] Improve ucm changelog page ........   r9376 | lynggaard | 2008 05 18 12:15:18 +0200 (sö  18 maj 2008) | 1 line      [clearcase plugin 0.6 branch]Minor change to regexp generation ........   r9378 | lynggaard | 2008 05 18 16:12:56 +0200 (sö  18 maj 2008) | 1 line      [clearcase plugin 0.6 branch] new UCM fake cleartool setup ........   r9379 | lynggaard | 2008 05 18 16:17:22 +0200 (sö  18 maj 2008) | 1 line      [clearcase plugin 0.6 branch] re enable edittype icons in UCM ........   r9380 | lynggaard | 2008 05 18 17:21:04 +0200 (sö  18 maj 2008) | 1 line      [clearcase plugin 0.6 branch] lsactivity should be run from within the view ........   r9451 | redsolo | 2008 05 19 23:34:31 +0200 (må  19 maj 2008) | 1 line      [clearcase plugin] Move vob path handling out from lshistory into ClearCaseScm class. Fixed so load rules remove the \ and / before they are used in the lshistory command ........   r9453 | redsolo | 2008 05 20 00:11:46 +0200 (ti  20 maj 2008) | 1 line      [clearcase plugin] No need to quote the command line args as ArgumentListBuilder already does it ........   r9454 | redsolo | 2008 05 20 00:17:36 +0200 (ti  20 maj 2008) | 1 line      [clearcase plugin] Fixed problem that was introduced in my refactoring for vob paths ........   r9455 | redsolo | 2008 05 20 00:18:33 +0200 (ti  20 maj 2008) | 1 line      [clearcase plugin] Added tests for getbranchnames ........   r9517 | lynggaard | 2008 05 21 22:57:08 +0200 (on  21 maj 2008) | 1 line      [clearcase plugin 0.6 branch] remove full username from changelog as we now rely on hudson users to display that ........   r9524 | lynggaard | 2008 05 21 23:27:19 +0200 (on  21 maj 2008) | 2 lines      [clearcase plugin 0.6 branch] Defensive code to handle lshistory with empty activity names.    It appears that most (99%) version entries with empty activity names are version 0 or mkbranch items. this code is only there to catch it in case some real version has no activity. However that should ideally never happen ........   r9589 | lynggaard | 2008 05 22 21:36:12 +0200 (to  22 maj 2008) | 1 line      [clearcase plugin 0.6 branch] Add additional mkview documentation ........   r9590 | lynggaard | 2008 05 22 22:00:22 +0200 (to  22 maj 2008) | 1 line      [clearcase plugin 0.6 branch] small javadoc update ........   r9591 | lynggaard | 2008 05 22 22:24:47 +0200 (to  22 maj 2008) | 1 line      [clearcase plugin 0.6 branch] remove old """"extended changelog"""" code  as this is not the way we want to do it  ........   r9679 | redsolo | 2008 05 29 23:08:35 +0200 (to  29 maj 2008) | 1 line      [clearcase plugin] Fixed so the changelog actions are adding the %c (comments) to the lshistory format ........   r9682 | redsolo | 2008 05 29 23:19:10 +0200 (to  29 maj 2008) | 1 line      [clearacse plugin] Removed unused class ........   git svn id: https://hudson.dev.java.net/svn/hudson/trunk/hudson/plugins@10146 71c3de6d 444a 0410 be80 ed276b4c234a ",push down
Improve and make more coherent ssl/tls options,push down
Split asdoc and coverage reports into their own package and introduced some code reuse,push down
Handle console commands and fix system input blocking indefinitely,push down
Major indexing changes and updates   implementation of a different POJO indexing strategy. See JavaDoc and code comments for more details.   added autocomplete indexer that indexes searched phrases and takes their search frequencies into account   the most searched ones are then displayed first.   both POJO and LinkedIn full indexing is set to run periodically (configured by the Spring Task Scheduler).,push down
Various todos and bugfixes  git svn id: http://svn.javaforge.com/svn/DockingFrames/trunk@732 3428d308 0d2e 0410 b3d4 94d0fefcacdf,push down
added ForwardWord actions added undo to ChangeAction,push down
redesigned Packer and Unpacker interfaces,push down
"Redo substitution resolving to better handle complex cases.  The main idea of this patch is to introduce """"partial resolution"""" which means resolving only the minimum branch of the object tree to get to a desired value. By using partial resolution whenever possible  more interdependencies between substitutions are permitted.  ConfigDelayedMergeObject was a big problem because a lot of the code in AbstractConfigObject really didn t work on it  because it assumed a resolved object; much of that code now moves down to SimpleConfigObject. ",push down
refactoring to interfaces,push down
Java  typeres: fix PR comments,push down
SaveAsPage refactoring,push down
fixed stupid regression while refactoring staging code  git svn id: https://svn.apache.org/repos/asf/maven/plugins/trunk@1480813 13f79535 47bb 0310 9956 ffa450edef68,push down
Big ID for Bible before getBible refactor,push down
* sdb not far from end * changed completely tests structure to provide a stronger test process while implementing a DB step by step,push down
Reworked report builders so that they can display descriptions and tags are defined on the reports themselves rather than the base classes,push down
Fix null pointer bug when there is no bounding box.  git svn id: http://svn.mkgmap.org.uk/mkgmap/branches/style@698 25d90789 57f7 4ee0 8453 03a3dfeeeb22,push down
Smaller fixes  javadoc improvements.,push down
Finished initial refactoring in database package.,push down
Filter for creating anon users + better filter API,push down
tools/timing: Refactor timing tables  fix CMP cache miss timing,push down
Manage Headless unit test using monocle Fix  215,push down
small cleanup,push down
"Refactor """"routines"""" package to provide localized pattern support  provide currency and percent support for all numeric types and improve JUnit test cases.  git svn id: https://svn.apache.org/repos/asf/jakarta/commons/proper/validator/trunk@371174 13f79535 47bb 0310 9956 ffa450edef68 ",push down
Introduced SeleniumTestFilesFinder interface  added ability to set default SeleniumTestFilesFinder via ERSelenium s static method,push down
Move RecordManager back to interface,push down
Refactor extract classes: InputTest  > {ScriptedInputTest  ModularInputTest  InputCrudTest  PortInputTest}.,push down
Fix visitor   the jjtAccept methods have to be in the concrete subclasses,push down
Refactoring of some author synonym handling components  including making WriteableSynonymMap abstract & adding two subclasses for the different syntax behaviors. Started as a fix for  160  but ballooned in scope a bit.,push down
Refactor: change build queue to be more general and move it to lib.,push down
First bit of minor refactoring of base types/vals,push down
solved ticket https://issues.jboss.org/browse/RAILO 1343 (application.cfc in webroot)  we also removed support for gateways in server admin,push down
SONAR : minor fixes,push down
Minor changes.,push down
Reworked IndexDeligate code to finally fix a dastardly bug.,push down
This update is the first incremental check in for https://jira.duraspace.org/browse/DURACLOUD 486 . It primarily refactors and cleans up the duplicationservice in preparation for adding reporting and error re queuing.    git svn id: https://svn.duraspace.org/duracloud/trunk@616 1005ed41 97cd 4a8f 848c be5b5fe45bcb,push down
"DF: Some minor bugfixes (ancestor instead of anchestor...). Common: Some abstraction concerning FDockable and children  allows clients to add their own specialisations. Common: New concept of """"working area"""" (not yet fully operationable).  git svn id: http://svn.javaforge.com/svn/DockingFrames/trunk@239 3428d308 0d2e 0410 b3d4 94d0fefcacdf ",push down
[BACKLOG 1805] Rename/Cleanup Model Annotation Properties,push down
Initial pass to update client java library for changes in payment apis and invoie_payment apis. (Still under development),push down
adding unit tests for various service calls  mostly dealing with app creation and modification,push down
creating Client interface,push down
Refactoring for Fix  385,push down
MASSIVE speedup in the syntax hilighter   needs testing to be sure we havent missed any cases. remove the write action from the folding builder   doesnt seem to be needed,push down
Fix compilation error on master  Counters weren t added to Infinispan until version 9.1.x,push down
test code refactoring,push down
most of the way through a feature refactor  Code does not compile here.,push down
Cleaned up the Area system,push down
[MDEP 494] Push down ArtifactCollector to ListRepositoriesMojo  that s the only one using it. Also simplifies unittests a bit.  git svn id: https://svn.apache.org/repos/asf/maven/plugins/trunk@1686934 13f79535 47bb 0310 9956 ffa450edef68,push down
Various fixes and improvements. Domain model for instance documents is a work in progress.,push down
Changes for remote services,push down
Extracted a very unecessary dependency on java.util.URI.  74.  This is probably the bigest change ever refactored on the system. The URI class was nested deep into the system for no real reason. It was assumed that all backends would have a URI scheme  and that we keep the URI at all times on all buckets. This was not the case  and everything from the Bucket model to the PathResolver had to be refactored.  The change was made in the first place because glacier does not have a URI that we can just call. Instead we want to configure each backend with key values instead of with URI s.  This change to the system should also make it easier to transition into a key value store  since the abstraction for transfering buckets is   give this bucket this key  and when I give you the key again then give me back my bucket .,push down
Simplified Attribute model for consistency,push down
Refactored the old Node class into a Node interface and an AbstractNode class  so that more categories of node types can be created. This has also been done  for TypeMember. Also added class/interface declarations.,push down
some more tests going  Added some still to Fix tests,push down
Continued front end refactoring.,push down
Issue 10: Started implementing jdbc event store based on hsqldb. Refactored some classes to make them not depending on mongodb.,push down
Move some maven client options.,push down
Refactor to introduce the direct client concept,push down
Resolved issue: DIRMINA 290 (Make IoService (IoConnector and IoAcceptor) manage only one service.) * IoService (IoAcceptor and IoConnector) now can handler only one service at once. ** No more default settings. * Merged IoServiceConfig implementations into the respective IoService implementations as setters. * Removed a few spring framework integration classes which is not necessary now.(Binding and IoAcceptorBeanFactory)    git svn id: https://svn.apache.org/repos/asf/directory/trunks/mina@465510 13f79535 47bb 0310 9956 ffa450edef68,push down
[jvstm lf] DRAFT: Ongoing work in distributed commit    * Improvements to the RemoteCommit  revise the validation algorithm  create     Local  and Remote  LockFreeTransactions.  DistributedLockFreeTransaction     is what actually is created by JVSTM s transaction factory. Then Local or     Remote instances are created when processing the commit requests.  A     LocalLockFreeTransaction wraps the node s local     DistributedLockFreeTransaction instance.,push down
Improve BiomeGenerator and BiomeCache handling  The BiomeCache class has it s implementation moved to Common. Our cache is more efficient for our needs than Mojang s cache  as it can better handle virtual biomes. Our cache has very similar API to Mojang s cache for now.  Previously  there was a biome generator called VanillaBiomeGenerator that had to be special cased. Now it s up to the implementation of TC Common (either TC Bukkit or TC Forge) to register a vanilla biome generator that properly implements BiomeGenerator.  There is one area left where the VanillaBiomeGenerator should still be special cased. [Bukkit/Forge]VanillaBiomeGenerator gets its information from Mojang s WorldChunkManager. The Biome(Gen)Base arrays are converted to int arrays. If you would use TCWorldChunkManager (extends WorldChunkManager) to get information from the BiomeGenerator  you would get infinite recursion.  To make the code more maintainable  a check has been added to the [Forge/Bukkit]VanillaBiomeGenerator classes (as well as documentation to the class).,push down
Remove name from base class Fix typeo,push down
"Refactor 4.0    Much better way to handle Exceptions (not through GetCaps handler/formatter)   Actually test things for each individual dataset   GRIDs now query the correct lat/lon variables from the CoordinateSystem rather than just assuming they are """"lat"""" and """"lon"""" (srsly)   Massive cleanup   More improvements to the testing structure (removed the  kvp  static var that was mangling between requests)   Ran """"Optimize Imports..."""" because it was looking at me strangely. ",push down
Adding KindleResourceManipulator to remove image resizing,push down
Lots of changes to use new import mechanism to load ISAtab Files. Next step is to automatically generate the UI components in the Investigation and Study forms based on the content read from the Investigation file.,push down
Nick O: Interim commit for thundr v3   Abstracted Requests  introduced AOP for annotation based processing of instances created by the injection context  general clean up and refactor,push down
Moving away from hand coded components.xml to those generated by plexus:descriptor.    git svn id: https://svn.apache.org/repos/asf/maven/wagon/trunk@504200 13f79535 47bb 0310 9956 ffa450edef68,push down
Fix highlighting algo misplacing some style classes,push down
Completely overhaul and clean up basic architecture  separate out HTML generation into AST visitor,push down
add old constructor and move useAsyncSend to AmazonAwsSQSConnectoryFactory level,push down
introduce AttributeBuilder interface,push down
Refactor the command line framework for simplifying,push down
Generalize RuleViolation treatment.  Add abstract base class  and language specific rule violation implementations.  To be consistent with other PMD code  renamed IRuleViolation to RuleViolation (I never liked this Hungarian notation crap in Java code anyway).  Extracted the RuleViolationComparator as a standalone class  and fixed it s implementation (was seriously broken) so the RuleViolation comparison is very well defined.  Changed Report to use a List of violations internally  instead of a Set  since the change to the RuleViolationComparator was causing truly duplicate RuleViolations to be dropped.  git svn id: https://pmd.svn.sourceforge.net/svnroot/pmd/trunk@5946 51baf565 9d33 0410 a72c fc3788e3496d,push down
rewrite Transformer to make position availabe to ExecutionLog,push down
Use abstract class + interface for AnyTypeDeclaration hierarchy  Remove one breaking API change,push down
Fixed several issues in HTML report * forced showing iterations * using LineChart + DeviationRenderer for tests with iterations and BarChart + StatisticalRenderer for the ones without.,push down
Source Update Only: Interal refactoring of the SynchProtocol class to isolate the multi line response IO handling as prepratory step for addressing read inefficiencies of Bulk and MultiBulk responses.,push down
DF QCADOOMES 1992 Some fixes in orders.,push down
Move readonly command to ClusterCommands  Moved from Binary Jedis to Jedis  since BinaryJedis doesn t implement ClusterCommands,push down
Various warning clean ups from IntelliJ  Split ValueNode into a separate class to avoid possible race condition in class loading.  Modified ArrayPathToken to be super class of ArrayIndex/ArraySlice token because IntelliJ warned about null pointer exception possibilities.  Removed redundant boolean checks.  Removed use of StringBuffer  > StringBuilder.  Removed dangling ;,push down
Minor Change: AbstractTransaction no longer provides a TxIntrospector.,push down
Moved AbstractLazyLayout.addCompoentEagerly() to LazyLayout,push down
plugin dependency refactoring (extracted interface),push down
Minor ProtocolDecl refactoring.,push down
Implement a new generic controller test that allow to test directly the controller without running an embeded servlet container Separate GenericController interface and GenericControllerImpl implementation class Test classes named refactoring,push down
Further cleanup of statistics and other visitors. Removal of a now unused interface. Removal of some warnings.,push down
[SUREFIRE 1490] Change header of the Failsafe Report,push down
Added SharedObjectTypeDescription class and changed API and all apps to use appropriately.  The file sharing feature in the collab example app remains broken  and more testing and debugging will be needed to repair.,push down
Remove the task output queue.  It was a kind of crummy abstraction  so now each worker can report progress whenever it wants with arbitrary json attached. The controller will hang on to this data for the user. As part of this  took some steps to cleaning up the way the controller stores job metadata to be more flexible and threadsafe.,push down
api cleanup,push down
Modify the HistogramDataPointDecoderManager to load plugins and create maps on instantiation that map 1 byte IDs to classes/decoders so that we can use that for writing/reading data in HBase.  Signed off by: Chris Larsen <clarsen@yahoo inc.com>,push down
Fixing missing versions + globale key list,push down
Moved checkPeriodicBoundary method to the only algorithm where it is used.,push down
refactored TypeMapping hierarchy and removed some obsolete methods,push down
on the way to removing ebean completely,push down
CSS: A css transition will be created for every property that supports transitions  even if no transition is set. The automatically set transition will finish in an instant. This is necessary to properly get from a rule with transition  to a rule without transition.,push down
some cleanup,push down
moved more painting code into the renderers  Issue number: Obtained from: Submitted by: Reviewed by:,push down
started on refactoring roadmodels to allow compatibility between PDPRoadModel and GraphRoadModel,push down
Refactored the type classes so they use less memory  especially by not seriazlizing the primative types and using a number to refer to them in the index instead    HG   branch : idea11 rename : src/lang/psi/types/LuaType.java  > src/lang/psi/types/LuaTypeImpl.java,push down
[WAGON 101] simplification of get* calls   git svn id: https://svn.apache.org/repos/asf/maven/wagon/trunk@662346 13f79535 47bb 0310 9956 ffa450edef68,push down
Introduce new super class for ShortestPath/CH  this will help us design a better common test for these algorithms and an upcoming bidirectional version,push down
Moved getNamespaceUri() down to ForeignBlock only. Will make APIP easier later...,push down
fix shadow volume rendering with multiple debug views  fix shadow map rendering  allow shadow map and shadow volumes simultaneously,push down
Initial commit of rewritten table support and associated refactorings,push down
Refactor to interface  add Mock client,push down
implementing HiLite functionality in the GUI  adding action listeners and actions in the menus. moved the hilite filtering to the trellis menu (since it does not concern the single plate). adding necessairy fields in the HeatMapModel. implemented a getPlatesToDisplay method. before this was in the Trellis  but with the hiliting it had to be adapted too and I found it belongs to the model. adding conditions in the rederers (HeatWell  HeatTrellis) to pick the right color changing the ScreenColorScheme to use the KNIME colors for selection and hiliting.,push down
HV 1667 Create an interface for ConstraintValidatorManager,push down
created first version of LinkedHashBiMap  not tested yet,push down
Rework how pools work to support a shared pool,push down
made some refactoring,push down
refactoring: method idVal(String) is only used for XML reader  git svn id: http://svn.mkgmap.org.uk/mkgmap/trunk@3858 25d90789 57f7 4ee0 8453 03a3dfeeeb22,push down
"ARQGRA 468 Cannot use relative @Location when using """"standalone"""" JUnit integration  Changed GrapheneExtension to setup ResourceProvider for URL depending on the framework integration options. If container framework integration option is used  then ContainerCustomizableURLResourceProvider is chosen  which first delegates to URLResourceProvider of Arquillian. If stand alone framework inegration option is used  then CustomizableURLResourceProvider is chosen  which returns the Graphene custom URL if present. ",push down
"Start to create new layout for the ToolbarGroupDodckStation """"new version"""". In this purpose  the main panel of an AbstractToolbarDockStation is defined in the subclasses an no more AbstractToolbarDockStation class itself. ",push down
Command system refactoring,push down
refactor JOGLRendererVBO and VBOData. JOGLRendererVBO is now abstract with two implementations JOGLRendererVBOFixedFunction and JOGLRendererVBOShader. Same for VBOData.,push down
created PlaneRoadModel,push down
Refactor reloading to be implementation abstract  This also should fix reloading on spigot  and reduce the amount of implementation specific code.,push down
EPE 124 Refactor ESP Helpers out of Eclipse Plugin  Signed off by: Gordon Smith <gordon.smith@lexisnexis.com>,push down
Make sure blockwise change command edits all lines  The ChangeOperation would try to detect if the invoking mode is blockwise visual by checking if a selection was passed in and the last selection was blockwise.  After 22025355db79f8ef2785402846087cf2457d7f this detection got broken  but it s actually far simpler to remove this detection and make blockwise visual mode call the right operation in the first place.  Fixes  604.,push down
"Add a more generic ConfigFunction  Many of the upcoming """"Resources"""" in the BO3s wouldn t actually be resource. Now Resource extends the more generic ConfigFunction ",push down
refactor AllTries bench.,push down
Changed design of REST web services data flow (Controller  > Service  > DAO). Found issue with transactions   rest servlet was not aware of tx configuration. REST webservices should be now working correctly.,push down
Bug fixes.  Split an interface off the SwiftSearcherCaller so the class can be final and yet we can do mocking.,push down
CW has been moved to RawData model.,push down
* VtkJoglPanel: tweaks and cleanups * IcyVtkPanel:    improved translation operation    added 3D axis orientation display support (to avoid the multiple renderer bug of VTK with OpenGL)    some tweaks here and there * switched VTK to OpenGL2 rendering (no more TextureMapper). * VtkCanvas: minors changes to adapt to new IcyVtkPanel.,push down
Added UUID support  changed how permissions are registered  and cleaned up part of the permissions system.,push down
Removed duplicate customParams for tiledwms layer,push down
minor refactoring to further strip down API of `TokenStreamFactory`,push down
o The buffer is copied into a DirectBuffer if it s bigger than the SenBufferSize  so that we don t copy it many times when sending big files; o Added a method to convert a HeapBuffer to a DirectBuffer o Added some fields in the TcpSession (The SendBufferSize  and a pre allocated DirectBuffer to send chu ks of data) o Minimized the number of loops for the 64Mb buffer on Netty o The IoSession.writeDirect() method has been removed from the interface o Some more Javadoc,push down
Remove sync check in the local listeners (postponed to next Cellar release)   git svn id: https://svn.apache.org/repos/asf/karaf/cellar/trunk@1413869 13f79535 47bb 0310 9956 ffa450edef68,push down
Updates the media streaming tasks in S3StorageProvider to do the work previously done by the Media Streamer service. The enable streaming task now along with the creation of the distribution  also sets the necessary S3 bucket policy and adds a space property to expose the streaming url for the space. The disable streaming and delete streaming tasks now remove the bucket policy and the space property value.,push down
runtime model enhancements    added tags and attachments   introduced SpecElementInfo base class   added ISpecificationContext.getCurrentFeature() and getCurrentSpec()   added SpecInfo.package   renamed SpecInfo.isBottomSpec/isTopSpec to avoid Groovy naming conflict with getBottomSpec/getTopSpec,push down
Java: Moved attribute accumulatedPoints to TF2Stats as this is specific to GameStats  * Added isPublic() method to GameStats * Reformatted code,push down
Added Tuning view with modifiable optimization/tuning weights. Added another (final) bandaid to null pointer exception in XmlToggleView. Cleaned up the TuningPanel hierarchy.,push down
Some comments in media are still missing  but an important refactoring has been done meantime. ASTBuilderSwitch does not have to call postprocess anymore. Comments are finished after in an independent final tree traversal.,push down
Minor mods/fixes and refactoring  git svn id: https://svn.apache.org/repos/asf/incubator/hama/trunk@1329568 13f79535 47bb 0310 9956 ffa450edef68,push down
MCHANGES 294: Support REST API for JIRA o begin the process. Refactor the JiraDownloader class stack to allow for  both REST and RSS. Probably not quite right yet.   git svn id: https://svn.apache.org/repos/asf/maven/plugins/trunk@1411970 13f79535 47bb 0310 9956 ffa450edef68,push down
HV 404: Re establish ConstraintDefAccessor in order to keep ConstraintDef s fluent API clean by avoiding getter methods,push down
one more refactoring to minimize dependencies,push down
Improve MultiCommand to be reviewed more precisely to handle displayUi correctly,push down
ARQAJO 123: removed dependency on javassist,push down
Refactored AbstractExpression to support index  This now has a new sublcass for the (majority of) functional expressions  with some helpers for evaluating child values.,push down
Refactoring of event bus into a clearer and cleaner form. Logic has been simplified and teased out. Some inner classes have been factored out into independent classes.,push down
Refactoring  to separate Big/Little Endian stuff into classes instead of switches,push down
Cleanup inheritance,push down
move newNumber to ConfigNumber rather than AbstractConfigValue,push down
"Corrects the dependencies management. 1) Redefines the goals where the dependencies are downloaded and unpack  and avoid doing so several times.   Phase initialize   goal nar download : download all the project dependencies in the local maven repository.   Phase generate sources   goal nar unpack : unpack in the project target folder (sub folder nar) the NAR files needed for compilation.   Phase generate test sources   goal nar test unpack : unpack in the project target folder (sub folder test nar) the NAR files needed for tests compilations  for tests executions  and for executions.  2) Removes the execution of the goal nar prepare package on the phase generate test sources  this was needed to get the correct library name for tests compilation if the property output was used to rename the library. The test compilation Mojo now gets the correct name without the need to run nar prepare package.  3) On test compilation don t link the dependencies which are static libraries as they are already included in the library for which we are building the test executable.  4) Corrects the following error : The SNAPSHOT libraries are stored on web repositories with the string """"SNAPSHOT"""" in the version number replaced by a timestamp based number. If a project uses a SNAPSHOT library which is on a web repository and not yet on the local repository  and defines this dependency with a scope different than compile or test  the NAR files are unpacked in the target folder of the project without changing back the timestamp to """"SNAPSHOT""""  causing compilation errors as the dependency files are looked in """"SNAPSHOT"""" directories. Example :   Library with artifactId """"inetfunc"""" and version """"1.0 SNAPSHOT"""".   Stored in Sonatype Nexus repository as   > inetfunc 1.0 20150329.212547 2.nar  > inetfunc 1.0 20150329.212547 2 noarch.nar  > inetfunc 1.0 20150329.212547 2 amd64 Windows gpp static.nar   Downloaded in local maven repository as  > inetfunc 1.0 20150329.212547 2.nar  > inetfunc 1.0 20150329.212547 2 noarch.nar  > inetfunc 1.0 20150329.212547 2 amd64 Windows gpp static.nar   Renamed in local maven repository as (good here)  > inetfunc 1.0 SNAPSHOT.nar  > inetfunc 1.0 SNAPSHOT noarch.nar  > inetfunc 1.0 SNAPSHOT amd64 Windows gpp static.nar   Unpacked in the project target folder as  > inetfunc 1.0 20150329.212547 2 noarch  > inetfunc 1.0 20150329.212547 2 amd64 Windows gpp static ",push down
Refactor and fix PST processing,push down
Fix  193 manage Show View and Hide View with annotation (useful when DO_ pefix has been changed),push down
Tool framework updated  Improving HtestCliTool  HtestAnalysis  HtestCommands and derivates ZCalc* and Oncoz*  Working on xml persistence.  git svn id: https://bg.upf.edu/svn/gitools/trunk@675 1b512f91 3386 4a98 81e7 b8836ddf8916,push down
restructuring ItemIdSelection,push down
"Revert """"Metrics thread/context tests and fixes""""  This reverts commit e44700ade0a67d150592a6f08c105eaadc6a3676. ",push down
introduce ElevationCalculator interface,push down
refactoring core components,push down
Use LocalDateTime instead of LocalDate for transactions  * Updated some ui elements to support LocalDateTime instead of LocalDate * Adapted tests & line endings * Updated OnVista & Consorsbank extractors (Removed Warnings  etc.) * Adapted consorsbank parser to use date & time for transactions when available  Issue:  913  Signed off by: Andreas Koch <akoch@users.noreply.github.com> [squashed commits; reverted some changes to API] Signed off by: Andreas Buchen <andreas.buchen@gmail.com>,push down
The big clean up  Remove modular Update copyright Quality Pass,push down
updated encryption to generate cek and cik through key derivation. also fixed signers to use afterPropertiesSet(),push down
Fix for rendering problems introduced by removing GraphicsUtil class. Use Image instead of BufferedImage in most cases  convert to AWT image if necessary. Not complete  requires cleanup.,push down
Features now stored via feature IDs and vocabulary. Somewhat cleaned up feature name/label system.,push down
First Iteration of the SearchEngine changes,push down
Integrate the FieldScopeLogic classes with the new ProtoTruthMessageDifferencer.  Does not yet integrate these with the actual Subject code.  RELNOTES n/a                Created by MOE: https://github.com/google/moe MOE_MIGRATED_REVID 176691712,push down
FACES 1936 Move portlet bridge specific resource handling logic from ResourceHandlerWrapperBase to ResourceHandlerBridgeImpl,push down
Additions and changes for addressing bug https://bugs.eclipse.org/bugs/show_bug.cgi?id 290446,push down
Refactor Resources with Java 8 features ! Fixes  106,push down
some refactoring,push down
wcet: Big Refactoring of the Method Cache Analysis: Now the MethodCache model and the MethodCacheAnalysis are cleanly seperated.,push down
"Proceed to create the new layout for the ToolbarGroupDodckStation """"new version"""".  > Reorganization of the hierachy of the classes  > Begin to implement the ToolbarGroupDockStation class ",push down
merged with latest core refactor branch,push down
Move the handshake method to ServerHandleWithWebSockets,push down
Restore scala compat. in MappingBuilder types  Removes entire concept of different local and remote napping builders on the basis that it was too complex for the gain in compile time type safety.  Fixes scala compatibility issue.  Resolves:  457,push down
Review the View creation (for base maodel  fxml and simple) Also manage @AutoRelease for all models,push down
Removed evaluation.process package.,push down
Refactored MappingBuilder back to one impl class with a hierarchy of interfaces to distinguish local/remote/scenario,push down
* fix  205: allow combining fields in a single level of the hierarchy * returned to separated out import tests for the facet hierarchy generation,push down
made AbstractTraversal a bit more testable and self contained.  ResultObjectCache is now an interface.  changed the logic around AbstracTraversal so that it would contain more of the logic that it exposes rather than forcing implementers to know the guts of its flow.  added more unit tests.,push down
Continued refactoring to global/local dependency building.,push down
Simplify ContextImpl and its implementations,push down
Rework the textual UI,push down
reverting the seperate construct/select interfaces  not an ideal approach.  merged that stuff back into the single builder  but added appropriate safeguards for disallowing operations that would yield invalid queries when built from the builder.  also adding support for creating unioned queries.  some fiddling with the generics so that closegroup/closeunion give you back a builder of the appropriate type.  also fixed a bug in the sparql query renderer related to filtered sub expressions,push down
move capped management to EntityMapping,push down
core pipline and codecs moved tho the new repository https://github.com/rfqu/pipeline,push down
Redid entire Resource Kind system to use Class instead. Modularized resource kinds  ordering  and relating strings (especially now uses EGM 3 character strings). Fixed Recent Files. Changed jedit functions to appear in red instead of dark blue. Reflected all changes in translation files.  git svn id: https://lateralgm.svn.sourceforge.net/svnroot/lateralgm/LateralGM/trunk@529 8f422083 7f27 0410 bc82 93e204be8cd2,push down
Improve Resources Management,push down
LILY 364 Introducing smart population of the MQ so that each indexer only receives events about relevant records.  This makes it more efficient to have multiple indexes  especially when each index handles a different subset of the records.  To do this more selective MQ feeding  MessageQueueFeeder is replaced by a new IndexAwareMessageQueueFeeder.  In case the information based on which a record is included in some index changes  the old index(es) of which the record was part still need to receive the event in order to delete the record from their index. Thus  IndexAwareMessageQueueFeeder needs both the old&new values of this information  and this is made available in the RecordEvent by the IndexSelectionRecordUpdateHook  which plugs in in the critical path of the CRUD operations.  There is a new Kauri module called indexer integration which registers the IndexAwareMessageQueueFeeder and IndexSelectionRecordUpdateHook (which needs to be done before the Repository starts).  In the indexerconf  the simple List<IndexCase> is replaced by IndexRecordFilter. The indexerconf.xml <records> section syntax changed (it is now replaced by a <recordFilter>)  but the old syntax stays supported.  All this is still work in progress: the major components are in place and there is a basic testcase  but lots of things left to do.,push down
* Merged big refactoring back to this dev branch.,push down
fixed game  refactored,push down
removed IF from some internal interface names,push down
combo counter & fixes,push down
Support paging iterator for bulk fetch requests.  Previously paging was handled internally and all pages were collected on each request.  This change exposes an iterator of the pages of responses that followed the link headers returned on each request.  This does not directly change any behavior of the Mylyn GitHub connector since issues and gist queries still return the full response.  Change Id: I8c12e20e4115e1968949319b3e9214e06db30b8b Signed off by: Kevin Sawicki <kevin@github.com>,push down
Refactor await() conditions into standalone objects  This brings conditions from await() into FluentWebElement and FluentList objects  and provides automated negation implementation using not() keyword on those conditions objects.,push down
improve a bit,push down
[SUREFIRE 1192] Fixed Sonar and FindBug issues,push down
Sush  Ashish |  1742 | Added integreation test for campaign message service also fixed request validators,push down
Resolved issue: DIRMINA 217 (Make IoFuture and its subclasses interfaces) * Changed IoFuture and its subclasses into interfaces * Extracted their implementations to common.support.DefaultXxxFuture * IoFilter.WriteRequest.UNUSED_FUTURE directly implements WriteFuture now.   * This change broke StreamWriterFilterTest. I fixed it  too.  git svn id: https://svn.apache.org/repos/asf/directory/trunks/mina@407136 13f79535 47bb 0310 9956 ffa450edef68,push down
Refactored kind hierarchy.,push down
changes implementing enhancement 8 and code review 10  11,push down
removed deprecated method getConfigServer(),push down
PLFED 154: adapt to the FormAuthenticator changes that have happened due to Servlet3 spec changes  git svn id: https://svn.jboss.org/repos/picketlink/federation/trunk@795 cbddccc4 e45a 42eb be77 0d76e4b45d38,push down
Created SchedulableEntityManager class  Updated EntityTypeTest to add isSchedulable method  added testcases for cluster schedule/resume..,push down
* Java:    * Splitted SteamSocket and SourceServer into new classes:      * SteamSocket and GameServer as abstract classes      * Child classes of both for GoldSrc (GoldSrcSocket  GoldSrcServer) and Source (SourceSocket  SourceServer)    * Fixed GoldSrcSocket.getReply() to correctly reassemble GoldSrc s split packets (issue 2)    * Changed Test to query a Source and a GoldSrc server,push down
* added Polygon2D and Polyline2D Shape objects. * BooleanMask2D: added methods for merge operation:    add(BooleanMask2D)    exclusiveAdd(BooleanMask2D)    intersect(BooleanMask2D)    subtract(BooleanMask2D) * ROI:    added methods for merge operation:      mergeWith(ROI  Op)      add(ROI)      exclusiveAdd(ROI)      intersect(ROI)      subtract(ROI)    these methods allow faster merge operation of many ROI by reducing the number of ROI creation.    fixed default computeNumberOfPoints() implementation. * ROI2DArea:    added add/exclusiveAdd/remove(ROI2DArea) methods    added add/exclusiveAdd/remove(BooleanMask2D) methods    some tweaks here and there. * ROI2DShape: faster getBooleanMask2D(..) implementation (help a lot for descriptor calculation). * ROI2DPath:    fixed contains(..) and intersects(..) implementation.    better merge(ROI) implementation. * ROI2DPolyLine: now use the Polyline2D shape for a better and more accurate general implementation. * ROI2DPolygon: now use the Polygon2D shape for a better and more accurate general implementation.  * ROIUtil: merge(List<ROI>  Op) method should be faster now. * ROI Panel:    full implementation of the ROI descriptor for customizable / expandable ROI information.    some fixes and improvements on default ROI descriptors.    back to simple table presentation (JXTreeTable was not stable enough).    better columns selection setting.    separate columns selection for view and export.    improved table computation time.    fixed  NOT  boolean operation on 2D ROI with fixed Z  T or C position. * Loader: fixed Importer retrieval (it was launching the plugin instead of just creating it). * Saver: removed interleaving data during save operation. * IcyBufferendImage: fixed get/setRawData(..) methods * ShapeUtil:    added isClosed(Shape)  getOpenPath(Shape)  getClosedPath(Shape) methods.    merge(List<Shape>  Op) should work better and faster.    union  exclusiveUnion  intersection and subtraction operation should work better. * Overlay: add getAttachedCanvas() method to retrieve all canvas where the overlay is displayed. * Array1DUtil: added getInterleavedData(..) and deInterleave(..) methods. * ByteArrayConvert: major rewrite (fixed several bugs). * improved Z/T dimension swap operation. * FileUtil: added isDirectory(String) method. * PluginLauncher: put create(..) method in public as we may need it. * ColorUtil: added mix(Color  Color  ratio) method. * minor fix in the way we handle Layer removal operation. * many others fixes  tweaks and cleanup.,push down
QCADOOMES 2504  Changes to decimal parser validation. Introduced cell binders registry. Code rafactor. Added simple support for import errors,push down
massive refactoring to make epublib more logical and easier to use,push down
Refactoring GraphBuilderUtils.,push down
created a generic Experiment  extended by ScalabilityExperiment  and other minor refactoring,push down
"modelExtension elements are now always added; check for standard EMF ecore data types for modelExtension attributes  removed """"tns:"""" from jBPM GlobalType.name   added missing custom jBPM attributes and elements  show/hide tabs according to modelEnablement preferences  do not set a default name for """"Catch""""  minor refactoring",push down
WIP of law builder refactor,push down
Model changes we discussed over the past two days.,push down
Move the custom UTF 8 decoder into a subclass of Encoding.  Add support to the UTF 8 decoder for Unicode code points above U+FFFF (represented as a surrogate pair in Java). These values can be generated by the backend from 8.1. The reverse path is already handled by the JVM s own UTF 8 encoder.  Add a number of unicode encode/decode tests to make sure it s all working.,push down
Address ConfigNode PR feedback  Address various PR feedback  including:   * Remove unused map from ConfigNodeComplexValue   * Stop caching KeyValue indexes in ConfigNodeComplexValue   * Return an Iterable<Token> for the children() methods in     ConfigNodeComplexValue and ConfigNodeKeyValue   * Change all ConfigNode classes to implement AbstractConfigNode   * Remove the constructor and the token instance variable     from AbstractConfigNode. Make the render() method final and     have it use a new tokens() method which returns the list     of tokens contained by the node.   * Stop caching values in ConfigNodeKeyValue,push down
Simplify codegen and push filtering to caller.,push down
[OPEN HUDSON 6705] UCM : Implement SCM new polling logic to support rebases better A bit of refactoring + refining some edge cases (no load rule)  git svn id: https://hudson.dev.java.net/svn/hudson/trunk/hudson/plugins@31807 71c3de6d 444a 0410 be80 ed276b4c234a,push down
remove ASM from intellij structure at all + proper refactoring,push down
MAJOR refactorin of the models. SiteModel is now an interface  implemented by DefaultSiteModel (the old SiteModel) and FilteredSiteModel (designed for things like the Spider where we don t show the entire view)  or FuzzerModel (which doesn t show the queries)  Spider s model has been factored out of the Spider.java class  and is now standalone Fuzzer (the beginnings of Fuzzer support) also has a proper model. I plan to factor out the model from SessionID and Fragments eventually  too.  Model events are now a proper event class  rather than multiple parameters.,push down
Added MembaseClient Object  The MembaseClient object should be used when making connections to Membase clusters. This commit also includes a new MembaseConnectionFactory and adds adds the coresponding builder code to ConnectionFactoryBuilder. Test support is also added for connections specific to Membase clusters  Change Id: I98a562a8da8bff70c6f953d44d0b3863f493e472 Reviewed on: http://review.couchbase.org/8239 Reviewed by: Matt Ingenthron <matt@couchbase.com> Tested by: Michael Wiederhold <mike@couchbase.com>,push down
Many changes  reorganization,push down
Refactoring the symbol table a bit; added some interfaces  moved the ASTClassBodyDeclaration into BasicScopeFactory   git svn id: https://pmd.svn.sourceforge.net/svnroot/pmd/trunk@2044 51baf565 9d33 0410 a72c fc3788e3496d,push down
Hari  Arvind  Ashok |  2157 | Refactoring around OBD sub slots.,push down
Added method for creating custom account limits and added integration tests. (v1 TK 09328),push down
yet more refactoring of FieldNameMatcher  to allow optimized alternatives,push down
Fixes for JGRP 1826   Changed PingData: one physical_addr instead of a list of phys addrs   Changed GossipData: one physical_addr instead of a list of phys addrs   Fixed compile error with JDK 8 in MessageDispatcher   Added Responses and test   Replaced MERGE2 with MERGE3 in all sample config files   Removed num_initial_members (deprecated and ignored) from XML config files   MERGE2/MERGE3 now use their own protocol to implement view fetching and doesn t depend on discovery anymore. This allows us to remove the view fetching code from the discovery protocols   Replaced is_server and is_coord with 1 byte flag in PingData   Removed division/zero exception in UPerf   Added keySet() to LazyRemovalCache   Destroying window on close   First shot at CloudBasedDiscovery.txt   Using GMS.join_timeout rather than Discovery.timeout for discovery   Set TCP.use_async_discovery to true in tcp.xml   Protocol: setValue() logs a warning if the field to be set is deprecated   PingData carries an optional list of members for which discovery is requested   Tests for modified PingData   Changed Discovery.findMembers() to accept a members list and populate a Responses object  (https://issues.jboss.org/browse/JGRP 1826)   ClientGmsImpl.join() uses FIND_INITIAL_MBRS event and then waits for GMS.join_timeout ms on the returned Responses object   MERGE2 uses FIND_MBRS event and then waits for discovery_timeout ms on the returned Responses object   MERGE3 uses FIND_MBRS event and then waits for discovery_timeout ms on the returned Responses object   TCPGOSSIP/RouterStub: changed signature of findMembers()   Passing async parameter to findMembers() in case async_discovery should be overwritten (e.g. in up(FIND_MBRS ...)   TP: using Responses returned by FIND_MBRS evt sent up   Looping back if target is a physical address and local address    target   SHARED_LOOPBACK_PING.findMembers() changed to the new method   FILE_PING: added a shutdown hook to remove own info in case of a crash   FILE_PING: selectively reading info for listed members in findMembers()   JDBC_PING.findMembers(): add result to Responses as soon as it has been read   RACKSPACE_PING.findMembers(): add result to Responses as soon as it has been read   SWIFT_PING.findMembers(): add result to Responses as soon as it has been read   S3_PING.findMembers(): add result to Responses as soon as it has been read   S3_PING: read members selectively if listed   Set TUNNEL.supportsMulticasting() to true   Removed timeout from discovery protocols  configs   Changed GMS.join_timeout to 2000 in udp.xml and tcp.xml   TP: when IP multicast is not available  sending a message to N 1 members by looking up the IP address for each member. We used to send this to *all* physical addresses in the cache  which was a waste   Sending a multicast (N 1) only sends to members of current cluster. Needed to take shared transports into account   AsciiString: prevent NPE in ctor when string is null   SHARED_LOOPBACK_PING return an empty Responses object if it is the first member in a cluster. This allows the member to become coordinator *immediately* rather than having to wait for GMS.join_timeout ms   Set GMS.max_join_attempts to 10   UNICAST3 only sends a CLOSE to dest if dest is still a member   TP: removed warning for incorrect destination as this might happen a few times (correct)   Added Responses.contains(Address addr)   Fixed Discovery.serializeWithoutView(): didn t add is_coord flag   Changed version to 3.5.0.Beta7,push down
split into ExtendedMediaEntity,push down
Refactor MapReducer interface  Make sure that Infinispan70MapReduce and InfinispanMapReduce.setCombiner are referenced. (Thanks  Radim!) Call Statistics.begin() and end() before and after MapTask executions Update MapReduceStage to put the results in the cache  if the task doesn t support this,push down
FACES 257 Bridge generates URLs that can be incompatible with Liferay friendly URLs (fixed JSR 329 test failures regarding PortletMode  WindowState  and ResourceID),push down
new activation manager  and Book inheritance tidy up,push down
"Added new commands /skript reload all/config/scripts/<script> and /skript enable/disable all/<script> Added enchantment support Added condition  is enchanted  Entities can now be deleted Added effect  push  to push entities around Added expressions  name of <player>  and  display name of <player>   latter of which can be changed Added expression  message  which holds the message in chat events and which can be changed Added loops  loop    times  and  loop numbers from    to     Added booleans as available command arguments and it now recognizes on/off as well Readded the physics event Improved detecting of empty configuration section Improved the  drop   experience  effect to accept expressions as experience as well Fixed delays not working in conditionals/loops at all Fixed the  damage  and  kill  effects not damaging the entity but setting its health Fixed the  health  expression returning negative values if the entity is dead Fixed  inventory of <block>  not working Fixed errors when parsing large numbers Fixed the teleport event and allowed different timestates for the  world  expression Fixed """"There s no null in this event"""" messages Fixed the expression  fuel [slot] of <block>  conflicting with the default alias  fuel  Fixed furnace slots (again) Fixed a few possible issues",push down
[WAGON 101] refactor SSH tests in prep to get some streaming working   git svn id: https://svn.apache.org/repos/asf/maven/wagon/trunk@662345 13f79535 47bb 0310 9956 ffa450edef68,push down
[AESH 138] refactored CommandLineParser  CompletionParser  ++ to interfaces should be more pluggable now. might need some services/providers...,push down
Refactored recvar renaming from name disamb to protocoldef inlining (recvar renaming now internal only).,push down
PORT 70: Updating the encoding package to provide an almost complete (although probably buggy as hell  given how little I know about what I m doing) implementation. Remaining tasks are: implement the remainder of the HLAfixedArray  HLAfixedRecord  HLAvariableArray  HLAvariantRecord implementations and write unit tests for the whole package. That can wait and should be done as part of PORT 77.,push down
PDM 22 Refactored PodamFactory to be an instantiable class. Added Spring usage example and improved documentation,push down
Refactored CodeGenerators to work with the new architecture. Added skeletal implementation of  withTransaction  to allow some basic testing.,push down
Redesign to positions based geometries.,push down
Fixed looping items in an inventory (again) Humanoid mobs can now be equipped with armour & weapons Made  /skript update changes  display all versions in a row  instead of each one separately Skript now automatically generates the config  the aliases files  and the example scripts when it s first loaded Updated MCStats Invalid format strings now produce an error message  Created a maven repository at http://maven.njol.ch/repo/,push down
refactoring for a FESL Auth module,push down
code clean up; introduced array design submission type,push down
Introducing new option to openssl validator: lazy loading (on demand). So far implemented for namespace policies (both types) only.,push down
DF QCADOOMES 315 refactoring shifts,push down
Made connection timeout and number of retries when creating a unique file name configurable.   Cleaned up temporary file creation code by moving all the common Logic to new BaseOverthereConnection class. This also means that LocalOverthereConnection no longer uses the Overthere Logic for temporary files but uses the standard java logic.,push down
HH 79285 sync EmbeddedPGDSFactory and fix tests,push down
FACES 1954 Develop alloy:inputTime component FACES 1897 Develop alloy:inputDate component (Refactor inputDate to be more consistent with inputTime.),push down
changed indexing  fixed some env dependent define features,push down
"Revert """"Fix of the bug  440509""""  This reverts commit a7f569f8da257ba91f7c254ae740e29655853959. ",push down
Fix for bug https://bugs.eclipse.org/bugs/show_bug.cgi?id 532078  Change Id: I5fcd77372473864ad780fd50e13c1b68d9a41b3a,push down
Set dependency on f.o.d.v.collab to optional to include in ISDesigner  Change Id: I5fa4a283811291232e1bd1c4b38927b22356132d Signed off by: Stéphane Thibaudeau <stephane.thibaudeau@obeo.fr>,push down
create jack test submodule replace usages of DatabaseConnection,push down
[MOCDTW 119]   Creation of models related to Places   Subsequent changes to wrapper,push down
Refactor Symbol Table from pmd.symboltable into pmd.lang.java.symboltable  as Symbol Table is currently Java only.  Removed bogus JSP Symbol Table.  git svn id: https://pmd.svn.sourceforge.net/svnroot/pmd/trunk@6142 51baf565 9d33 0410 a72c fc3788e3496d,push down
Minor refactoring,push down
Fixed encoding of command arrays (fixes  112).,push down
FACES 1341 Refactor BridgeFlashFactory so that it can be wrapped like any other FactoryWrapper,push down
Moves setunit and setscalefactor to SimpleStateNode from Avalue. Adds setparent to AValue class. Updates tests with new output,push down
Allow use of BulkData with additinal data types fix  255 JSONWriter creates invalid json DataFragment element fix  254 DicomInputStream: change attributes treated as Bulkdata by default fix  388,push down
event wrapper enhancements  event wrapper  > base wrapper,push down
Moved getFacets method from JestResult to SearchResult   fixes  160,push down
Change Address model to be an interface. Will allow consuming projects to override this funcitonality more easily.,push down
Refactored SelectorParser logic into LinkedInSelectorParser as first step to creating agnostic selector,push down
Enable creation and retrieval of org webhooks  made GHHook abstract and created two concrete subclasses for org and repo hooks. Created utility class GHHooks to manage creation and retrieval of org/repo hooks with minimal code duplication. These are invoked by GHOrganization and GHRepository respectively.,push down
Modularized ResourceFrames. Fixed Sprite auto bbox with alpha channel. Fixed URIs with spaces.  * Extracted an InstantiableResourceFrame from ResourceFrame * GameSettingsFrame and GameInformationFrame now extend ResourceFrame * ResourceFrame now registers frames for resource kinds using a new factories interface and map. * If auto bbox is checked and transparent pixel is turned off  it now does an alpha channel bounds check. This is a bit more intensive  but the larger the bounding box  the faster this algorithm returns. * URIs were being doubly decoded in the Recent Files list  leading to %20 getting converted into space  causing the URI to fail (it expects the %20). * Improved the way URIs are displayed in the Recent Files list. * Recent Files list now supports non file URIs.  TODO: Modularize resnode names. Currently it s assumed they can be set at tree population time with the LGM string i18n methods  which is not a valid assumption for  say  plugin added resnodes.  git svn id: https://lateralgm.svn.sourceforge.net/svnroot/lateralgm/LateralGM/trunk@535 8f422083 7f27 0410 bc82 93e204be8cd2,push down
34 moved baseUrl to super class and added TokenProviderAwareClient class,push down
Ashish  Ashok |  1961 | Refactoring OBD Successful call details request,push down
RF 12474: fixed rich:inplaceSelect by moving definitions to rich:select specific class,push down
Dheeru  Abhi |  441 | Creating hierarchy of repository & service for ContainerDashboard feature bifurcation; restoring PreTreatment functionality,push down
Project :: Slimfast  Refactored node hierarchy so that leaf nodes (text  comments  scripts  etc) use 24 bytes vs 40 bytes each.,push down
move server configuration to ServerHTTP2Configuration,push down
Moved 'prompt' to (only) item del settings,push down
renamed variable codeChanged,rename
Renamed this_putstatic  > self_putstatic   renamed getstatic( JavaFieldDescriptor )  > self_getstatic.  Beginnings of REPL support for accessing fields.,rename
Rename ParameterHolder getParameters() to getAllParameters(),rename
renamed and refactored SMTProxyTuioListener to util.ProxyTuioListener. refactored some other stuff too. also added some touch source bounds info console output that prints if SMT.debug is true,rename
rename QueryCount elapsedTime to time,rename
Ellipsoid: rename constrict() to contract(),rename
Renamed eagerly() to asEagerSingleton().  git svn id: https://google guice.googlecode.com/svn/trunk@254 d779f126 a31b 0410 b53b 1d3aecad763e,rename
Rename methods to differentiate operations for current vs sub scopes,rename
Rename typeName to seriesName and make its value   series name. Rename mapName in mps to mapDescription  as its value is taken from   description.  git svn id: http://svn.mkgmap.org.uk/mkgmap/branches/mapset@1322 25d90789 57f7 4ee0 8453 03a3dfeeeb22,rename
Renamed a poorly named method in RequestJournal,rename
Rename everything called  block  to  page   so terms are unified.,rename
refactor and rename session manager to session store,rename
Renamed various engine props for consistency  We now use the naming established in the recent JQTI+ controller refactoring  so enter/end/exit instead of init/close/terminate  reinit  > hard reset  reset  > soft reset.,rename
Renamed  use  to  include,rename
[HER 1505] Expand BeanshellProcessor/BeanshellDecideRule for every JVM friendly scripting language (Javascript/Jython/Groovy/JRuby) * BeanShellProcessor.java  > ScriptedProcessor.java; BeanShellDecideRule.java  > ScriptedDecideRule.java     update to use any present JSR 223 scripting engine (requested by free text name)      update to allow script to come from inline string or file (just as with seeds) * modules/pom.xml     include groovy and jsr 223 capable JARs * .classpath     add new JARs to classpath * BeanShellProcessorTest.java  > ScriptedProcessorTest.java     rename (empty) test class,rename
WELDX 153 rename methods on BeanBuilder,rename
Rename to PackStringWithGetBytes and add comments,rename
Refactor: move ThriftTypeInferringColumnQuery to the thrift package and rename internal members in HectorTemplateFactory,rename
[jvstm lf] Rename Remote(Read|Write)Set to Simple(Read|Write)Set,rename
Renamed doConnect to connect0  git svn id: https://svn.apache.org/repos/asf/mina/trunk@599761 13f79535 47bb 0310 9956 ffa450edef68,rename
renamed isValid()  > exists(),rename
rename methods,rename
API changes to be consistent with the client side  and facilitate Groovy subclassing:   Component getProperty  > Component get   Component getIndexedProperty  > Component getIndex   Component setProperty  > Component set   Component setIndexedProperty  > Component setIndex    Deprecation of Style getProperty and Style getIndexedProperty in favour   of new Style get and Style getIndex    Consequential changes in MutableStyle and DerivedMutableStyle  along   with corresponding rename of setters.,rename
Rename methods on ASTIfStatement,rename
renamed test,rename
Rename PrioDings  BoundingBoxPriorityTree massive cleanup  this will allow to use BoundingBoxPriorityTree on bot x  y and lat  lon coordinates and for nearest neighbor search,rename
created lists for persons and scenarios  little changes in other pages (title  imports  etc)  update facade and service for person  renamed for scenarios.,rename
DF Renamed some views.,rename
Updated lib and Action code in GmObjectFrame and TimelineFrame  * Moved getLibTabs to GmObject (Timeline calls it from there)  * renamed getLibTabs to makeLibTabs  * Created addActionPane in GmObject (timeline calls it from there)  git svn id: https://lateralgm.svn.sourceforge.net/svnroot/lateralgm@98 8f422083 7f27 0410 bc82 93e204be8cd2,rename
Luka  Sri |  100 | Merged treatment_complete into reason_for_closure and renamed it to treatment_outcome.,rename
Updated Demo Tests for Exchange Rates APIs  1. Removed invalid temporary if (true) return; statement 2. Corrected spelling mistake in getExchangeRates() method 3. Renamed testPostCurrency() to testPostExchangeRate() 4. Increased the interval for GET rates to get future rates  if any 5.,rename
FACES 2313 Rename responsive attribute of alloy:inputDate and alloy:inputTime to nativeWhenMobile,rename
Redesigned the index state  it is now split into three different states:    the general state    the update state    the batch build state  This split up allows to independently control whether the subscription/listeners should be enabled  and whether the index should be rebuild.  Renamed  build job  to  batch build (job)  since target group testing identified confusion about the term  build job .  Started using terminology  queue subscription  rather than  message consumer .   git svn id: svn+ssh://dev.outerthought.org/outerthought/lilyproject/trunk@4250 b80d95f8 e103 0410 bd55 e03a9dc29394,rename
HV 667 Rename a method for more consistency,rename
Rename update.with(pojo) to update.merge(pojo)  refs  58,rename
Renamed method on the ElementQualifier interface,rename
Add UniqueId.uidToLong() and longToUID() helper methods for converting UIDs Moved addId() from TsdbQuery to UniqueId.addIdToRegexp() as I need it elsewhere Renamed UniqueId.getTagPairsFromTSUID() to getTagsFromTSUID() since that s what the method actually did  it didn t return pairs  rather individual UIDs. Also removed the UID widths from getTagsFromTSUID() since they re now statically accessible from the TSDB class. Modified all callers as well. Add UniqueId.getTagPairsFromTSUID() with string and byte parameters that does what it s supposed to  returns pairs of tag UIDs from a TSUID  Signed off by: Chris Larsen <clarsen@euphoriaaudio.com>,rename
Myrimatch renamed to MyriMatch,rename
Minor rename getSni  > isSni option,rename
<Sri  Preethi>  11 | 1) Renamed latestTreatment() to latestTherapy(). 2) Therapy now has domain logic to start itself. 3) Added phases object to therapy which encapsulates phase information (viz. dates and doses for IP CP EIP) for the therapy.,rename
renamed util method name to better match the intent  git svn id: https://svn.apache.org/repos/asf/maven/plugins/trunk@1042496 13f79535 47bb 0310 9956 ffa450edef68,rename
Renamed generate() to get().  git svn id: https://google guice.googlecode.com/svn/trunk@168 d779f126 a31b 0410 b53b 1d3aecad763e,rename
rename DeallocationRule to Expiration.,rename
LILY 574: Close solr CloudServer when closing the CloudSolrShardManager. Renamed SolrShardManagerImpl to ClassicSolrShardManager for symmetry with CloudSolrShardManager,rename
Added Queries.returns(). Renamed all() to any(). Excluded SourceConsumer from source tracing. Added performance check for indexing. Set version   to 1.0rc1.  git svn id: https://google guice.googlecode.com/svn/trunk@79 d779f126 a31b 0410 b53b 1d3aecad763e,rename
Rename Extended to Extension  A previous commit changed most references extended to extension since the Message Pack spec calls them Extension type. This converts a few missed references to extension.,rename
rhbz1139950   refactor (rename move classes/methods and add javadoc),rename
The rendered decorator is now passed through the ContentProcessor to  to further process any tags added by the decorator. This allows decorators to be built with tags and treated as content  rather than having bindings for templating languages (JSP  Velocity...).  Some cool side effects of this: * No more never ending list of templating systems to integrate with. * Works in the same way in web apps and offline. * It s just so simple.  Overview of changes: * Introduced SiteMeshWriteTagRule  which handles <sitemesh:write property  body /> definitions in decorators and merges in the content. * <decorate> renamed to <sitemesh:decorate>. * SiteMesh Context object now has a getContentToMerge() method which is used by decorators when they need to get access to the underlying content. * Content now has a  processed  property which is the default output (post processing). Previously this was implicitly  body    just making it more explicit.  Note: This changes introduces a bug and a bunch of test failures around the <title> tag. These will be resolved in a follow up commit (this change is already very big) and will not be pushed upstream until fixed.,rename
Rename getIncludeResourcesDirectory to isIncludeResources,rename
renamed BlockingVariable.getValue()/setValue() to get()/set() (more in line with java.util.concurrent  method syntax better conveys that method may block) added BlockingVariableSpec,rename
Rename openImage  > openStream  for consistency with Swift,rename
rename getPageLayoutApiForName to getPageLayoutApiForRef,rename
Rename QualifiedSrcDocName and UnqualifiedSrcDocName  Qualified doc name already has a meaning in the client: a document name with module prefix  if any. Unqualified doc name is the document within a module. (If Maven multi modules aren t used  qualified and unqualified doc name are the same.),rename
Renamed keyword.,rename
More code comment and a rename,rename
Rename SortDir to SortDirection and update related accessor method.,rename
FACES 1894 Add general utilities for Liferay Faces Alloy Components (Renamed liferayKey to clientKey and LiferayComponent to ClientComponent),rename
UtilsFile got some methods renamed to make more sense and uses FileUtils.forceDeleteOnExit instead of File.deleteOnExit.,rename
Renamed generator. Updated the tool logger and the processor model.,rename
InternalNode Interface introduced.    HG   rename : src/main/java/org/geolatte/graph/Visitor.java  > src/main/java/org/geolatte/data/Visitor.java,rename
Renamed getInstance to newInstance  git svn id: https://svn.ebi.ac.uk/steinbeck research/CheMet/trunk@1439 47e25a5e c6eb 4c94 8020 4a4a81ee2334,rename
Fixed Permission Query  Fixed the path resolver also renamed some stuff in PermissionProvider and CommandManager again,rename
renamed fire method,rename
minor changes  TreeNode fixed bug in computing leftw & rightw  TreeNode rewritten drawTree()  UnionFindFind started working on Shiny things (TM)  UnionFindFind rewritten find methods  UnionFind* refactored/renamed some variables & enum types  UnionFindButtons disabled buttons during an algorithm s run  what to do: The term from TEA tomorrow!  Signed off by: Viktor Tomkovič <viktor.tomkovic@gmail.com>,rename
Renamed Asserter.assertLowMemory() to assertNotLowMemory().,rename
renamed tokenizer and added some complex math. ficed the order of function and operator arguments,rename
"exploit new  sourcepath option   removed all """"guessing"""": no more guessing of members  classes and type casts (removed the corresponding compiler options too). The """"downside"""" is that all imports must be accessible and  parseable at compile time. This means that we will also need something like a  classpath before we can use this inside our maven plugin to resolve dependencies on Jangaroo libraries. The upside: jooc warnings should be taken seriously now! Splitted analyze() phase into scope() and analyze() changed parser to parse dotted identifier sequences as QalifiedIde and increased priority of new operator to be higher than dot: new a.b.c().d is now correctly parsed as dot(new(ideexpr(qide(""""a.b.c""""))) """"d"""") handled all code generation for qualified and unqualified ide expressions in Ide and QualifiedIde generateCodeAsExpr()   no more tree rewriting in DotExpr and elsewhere (i think we can remove the parent node slot in AstNodes and change the return type of analyze() to void code generation now adds the package prefix for imported identifiers and the $$private prefix for private static members. This should be more efficient (and less magical) than the access via  with . We should be able to remove the with statements now. renamed MethodDeclaration to FunctionDeclaration as it is used for both. added AST node for as expressions  [git p4: depot paths   """"//coremedia/jangaroo/"""": change   177049] ",rename
rename to filter type,rename
[jvstm lf] Rename RemoteCommit to CommitRequest    A CommitRequest is sent by every (write) transaction that needs to commit.   It contains the read set and write set of the transaction to commit.  After   this  every node can locally continue its commits starting from this queue.,rename
Loads of UPlayer   > MPlayer renames,rename
"Revert """"UNCHECKED CHANGES: Added facility to configure the CSV Export the same way adding it at the v8 version of the module. Only difference: reconstruction of the configuration file (in CmsCsvExportBean.java) is adjusted. Details:   Added CSV Export configuration facility   Renamed CmsCvsExportBean to CmsCsvExportBean and adjusted calls   Refactored CmsCsvExportBean""""  This reverts commit 9a18a24e466cfaaa63d7b7217dd3d44c067d09fb. ",rename
HPPC 121: Rename remove{All|First|Last}Occurrence(s) to remove{All|First|Last}(key),rename
Rename identifiers in test,rename
Rename setKeyStoreOptions(KeyCertOptions)  > setKeyCertOptions(KeyCertOptions) and setTrustStoreOptions(TrustOptions)  > setTrustOptions(TrustOptions),rename
Updated Javadocs. Renamed TypeToken to TypeLiteral. Hid ConfigurationException from the public API.  git svn id: https://google guice.googlecode.com/svn/trunk@43 d779f126 a31b 0410 b53b 1d3aecad763e,rename
rename,rename
renamed passUp()  > handleUpEvent(),rename
renamed WordCram.draw() to .drawAll()  to better reflect that it draws ALL of the words    you might be waiting a while.,rename
Rename to  AsyncMultiMap removeAllMatching  Signed off by: Thomas Segismont <tsegismont@gmail.com>,rename
Readablity and supportability improvements  Includng code comments  renames and refactoring motivated by code review feedbacks.,rename
"tried to incorporate gojomo s suggestions of 2009 11 02: * Engine.java   removed ERROR and WARNING strings  rely on Flash class   log jobsDir check failure as SEVERE and return early   collapse error handling in considerAsJobPath() and log SEVERE   renamed considerAsJobDirectory() to addJobDirectory()   remove catch and rethrow from leaveJobPathFile() when writing      instead log SEVERE   renamed leaveJobPathFile() to writeJobPathFile()   added boolean """"userRequest"""" arg to addJobDirectory()  and moved     call to writeJobPathFile() inside of addJobDirectory()   changed void considerAsJobPath(File) to String getJobPathFromFile     and removed call to addJobDirectory   make seperate calls to addJobDirectory() in findJobConfigs() * EngineResource.java   restructured """"create"""" logic for clarity   eliminate style code  rely on Flash class   remove limit on """"addpath"""" input  change to """"createpath""""   removed all caps and bangs (""""!"""") from error messages   removed platform specific path separators (""""/"""")   call Engine.addJobDirectory() with userRequest true in when     form action add ",rename
assertFact() renamed assertClause(),rename
renamed removeOOBMessages(),rename
IsmAvatar Commit 1.6.0.0.0 (Alpha) Complete Recode of Gm6File Resource Handling Script Window code added (ScriptFrame) Window Viewing code modified in preparation for windows NameDocument added for Window Name TextFields (checks input) Updated/Formatted a few dependancies for Gm6File Renamed IncludeFile to Include  git svn id: https://lateralgm.svn.sourceforge.net/svnroot/lateralgm@30 8f422083 7f27 0410 bc82 93e204be8cd2,rename
[Consistency Predicates] Minor Change: Added missing javadoc [Consistency Predicates] Refactor: Renamed a few methods in the ConsistencyPredicateSupport API. These methods now refers to a batch of existing object ids to return.,rename
14 Renamed method in JsonReader,rename
RF 10297: classes and icons are renamed,rename
Renamed removeTopic to deleteTopic.,rename
rename getCellAttributeBuilder,rename
BalajiN |  25 | Reflecting contract object renames from contrib s adherence module,rename
Rename tests  git svn id: https://svn.apache.org/repos/asf/maven/plugins/trunk@765425 13f79535 47bb 0310 9956 ffa450edef68,rename
Rename of methods for clarity and spelling,rename
Rename method: resolveDestinationGenericType,rename
Explicit imports. Renamed method from getPlay2Arguments() to getPlay2SystemPropertiesArguments(),rename
Addresses for generating ontology renamed.  New addresses are:   EEGDatabase/semantic/getOntology.html?type owl  (output from Jena)   EEGDatabase/semantic/getOntologyOwlApi.html?type owl  (output from Owl Api)  git svn id: https://svn.origo.ethz.ch/eeg database/trunk@1115 1a751040 f3c7 4aaa 98da 1e85aacc1d30,rename
renamed getter according to class name,rename
renamed ioid to idpro,rename
Renamed audit events to audit entries to prevent future name conflicts and refactored some audit code,rename
Renamed isA()  > instanceOf(),rename
TFJ 483 renamed following methods: onUserListSubscrbe » onUserListSbsucription onUserListCreated » onUserListCreation onUserListUpdated » onUserListUpdate onUserListDestroyed » onUserListDeletion onUserProfileUpdated » onUserProfileUpdate,rename
Big Refactoring: * Added IoProcessor   a thin layer which is similar to the reactor pattern * Renamed AbstractIoFilterChain to DefaultIoFilterChain because of the abstract methods of AbstractIoFilterChain are now moved to IoProcessor interface * Moved common parts of various IoFilterChain implementations to DefaultIoFilterChain * Removed other unnecessary IoFilterChain implementations * Added IoSession.getProcessor() so that DefaultIoFilterChain can access the associated IoProcessor * Extracted interface from SerialSession  and all the implementation goes to SerialSessionImpl    git svn id: https://svn.apache.org/repos/asf/mina/trunk@576070 13f79535 47bb 0310 9956 ffa450edef68,rename
renamed setLength() to read setLengthOfReplacedText() to rule out ambiguities,rename
"Added """"unlink"""" methods to class Node  Node.linkleft() and Node.linkright() renamed according to java naming conventions ",rename
rename joinpoint  > binding,rename
added select() and renamed objectFilter() to discard(). Provided respective test cases.,rename
Renamed add(JvmOperation)  > process(JvmOperation),rename
renamed some JMX attributes,rename
Redis support: various improvements  * changed artifact dependency scopes * rename various fields/methods from memcached to storage * use CLQ instead of List+synchronization in JedisPool * close redis client on JedisConnectionException exception * get rid of MemcachedClient references  so that spymemcached does not   have to be in the classpath when redis is used,rename
rename/cleanup [ci skip],rename
Updated event system to use less resources    Common events don t create objects anymore. For the custom objects  this was quite resource intensive  as an event is fired for each custom object. If you had a plant BO2 that spawned 100 times in a chunk  and an ore that spawned 100 times  you would end up with 200 event objects.   Fixed NetherFortressEnabled   > NetherFortressesEnabled conversion.   Renamed the get* functions to read* functions in ConfigFunction to avoid confusion between the getBlockId function in Resource.,rename
"HV 347: Renamed """"site"""" package and classes to """"location"""" ",rename
Renamed SourceType to Format. Somehow sounds more natural.,rename
Renamed IRemoteFileSystemDirectoryEvent to IRemoteFileSystemBrowseEvent,rename
Generalize AST treatment.  Extracted a common Node interface and base class  combining common features of Node and SimpleNode from all ASTs whenever possible.  Reworked Java and Jsp AST classes to use the new interface.  All existing usages of SimpleNode changed to Node.  Yeah  no more stupid casts for AST navigation/visitation operations!  Turned AccessNode from the Java AST into an interface as it should be.  Deleted and renamed AST classes as appropriate to following convention in absence of SimpleNode classes.  JSP XPath rules are not yet working.  Need to work on further generalization of RuleViolation code to make it a Language feature  and not something gathered via Rule class hierarchy inheritance.  Will be moving packages around soon!  git svn id: https://pmd.svn.sourceforge.net/svnroot/pmd/trunk@5954 51baf565 9d33 0410 a72c fc3788e3496d,rename
Docs and reorg for bean utilities  * javadoc * refdoc * rename classes to accurately reflect purpose * move injectable method to reflection * flesh out the builders * package info,rename
NXP 7346: rename entity to activityObject,rename
renamed IMockInvocationResponder to IMockResponse    renamed implementations accordingly   renamed MockConfiguration.responder accordingly,rename
Rename some internal variables and methods.,rename
Remove Deprecated methods and rename findFirst() with el(),rename
Split HtmlContentProcessor into 3 different implementations: * HtmlContentProcessor: A basic and fast implementation that extracts head  title  body and meta tags. * Sm2HtmlContentProcessor: Supports all the additional rules that SM2 had by default  such as the <content>/<property> tags. * MsOfficeHtmlContentProcessor: Extracts the document properties saved by Word/Excel.    HG   rename : src/test/java/com/opensymphony/sitemesh/html/HtmlContentProcessorTest.java  > src/test/java/com/opensymphony/sitemesh/html/Sm2HtmlContentProcessorTest.java rename : src/test/java/com/opensymphony/sitemesh/html/HtmlContentProcessorTest.java  > src/test/java/com/opensymphony/sitemesh/html/DataDrivenSuiteBuilder.java rename : src/test/java/com/opensymphony/sitemesh/html/HtmlContentProcessorTest.java  > src/test/java/com/opensymphony/sitemesh/html/MsOfficeHtmlContentProcessorTest.java rename : src/main/java/com/opensymphony/sitemesh/html/rules/MSOfficeDocumentPropertiesRule.java  > src/main/java/com/opensymphony/sitemesh/html/rules/MsOfficeDocumentPropertiesRule.java,rename
Removed button label and renamed ClientMessage to ErrorResponse,rename
"renamed """"STATEMENTS"""" format to """"XDI DISPLAY""""  added support for """"from graph"""" and """"to graph"""" ",rename
rename zaddBinary to zadd,rename
o Rearranged try/catch and renamed a method,rename
Renamed  keys  into  fields  for the control files to match the terminology of the Debian policy,rename
Unify and rename execute and query methods,rename
"Rename uiCleanup to """"quit""""  and relocate in file ",rename
Updated GET Settlement Accounts API implementation  1. Updated to return JSONLoanAccountResponse object  containing LoanAccount and a list of settlement Savings Accounts Note: ApiLoanAccount is still used internally   only to deserialize the response. The JSONLoanAccountResponse container doesn’t exactly match the Mambu’s response format. 2. Renamed to getLoanAccountWithSettlementAccounts(),rename
* Renamed WriteThrottlePolicy.EXCEPTION to FAIL * Added WriteThrottlePolicy.LOG_AND_FAIL  git svn id: https://svn.apache.org/repos/asf/mina/trunk@591568 13f79535 47bb 0310 9956 ffa450edef68,rename
[JBIDE 15766]:Remove refresh of all IEnvironmentVariable on add/remove actions  Please reference the following change log:  Removed update calls from EnvironmentVariableResource.destroy  ApplicationResource.addEnvironmentVariable ApplicationResource.addEnvironmentVariables and ApplicationResource.removeEnvironmentVariable.  Added ApplicationResource.removeEnvironmentVariable(IEnvironmentVariable)  Renamed environmentVariableByName to environmentVariableMap  Updated getOrLoadEnvironmentVariable to work check for emptiness of environmentVariableMap  Updated loadEnvironmentVariables to work on environmentVariablesMap  and return it  in contrast to a locally scoped version that did not persist.  Corrected test failures due to omitted changes to instances methods for EnvironmentVariableResouce and ApplicationResource.  Updated remove methods to use remove..(IEnvironmentVariable) and ApplicationResourceIntegrationTest to use Application.removeEnvironmentVariable(IEnvironmentVariable) in testing. Added integration test for removeEnvironmentVariable(IEnvironmentVariable)  Updated ApplicationResource.addEnvironmentVariables(Map<String String>) to filter the incoming map key/value pairs if they are duplicate keys  without different values. This update should resolve unecessary update DTO requests being generated.  (Rebased up to Nov 12 since the original PR got behind.)  Corrected possible logical error that was accidentally included in addEnvinronmentVariables(Map<String String>)  with the original PR. [if(testVar! null)...else....]  (Rebased again  to support merge with most recent version of upstream master: 13 NOV 2013)  Corrected ApplicationResource.removeEnvironmentVariableByInstance(IEnvironmentVariable) and ApplicationResource.removeEnvironmentVariable(String) to correct failing test(s).,rename
rename methods  hold convention to Number640  Signed off by: Christian Lüthold <biocodr@gmail.com>,rename
Rename some vars  > getters too. Warnings cleanup,rename
setof/3 was misinterpreted   renamed as distinctall/3,rename
Renamed ProtocolContext to ProtocolTools to better reflect its purpose. Fixed remaining test failures by moving validation from the projection rules (where the model may not yet be complete enough) to a validation rule that is triggered on the projected local model,rename
[HER 1605] Refactor parameterizable policies out of frontier * defaults.xml     update bundled profile for new chains refactoring * CrawlController.java     move to three processor chains rather than one * Frontier.java     (loadSeeds) removed * ToeThread.java     delegate most processing loop to FetchChain and DispositionChain * AbstractFrontier.java  WorkQueueFrontier.java     move policies/calculation out to processors * CandidatesProcessor.java     new processor for DispositionChain that runs every outlink through CandidateChain * CrawlStateUpdater.java  > DispositionProcessor.java     rename  expand to prep CrawlURI for frontier * FrontierScheduler.java     deleted; use CandidatesProcessor/CandidateChain * LinksScoper.java     deprecated; use CandidatesProcessor/CandidateChain/CandidateScoper     (only temporarily retained for ease of comparison) * CandidateScoper.java     simple single URI scope testing for CandidateChain * FrontierPreparer.java     precalculate all frontier policies in CandidateChain  before scheduling * PreconditionEnforcer.java     ProcessorURI >CrawlURI; take on some prerequisite preparation previously deferred to elsewhere * ProcessorsReport.java     update for 3 chains of Processors * SheetOverlaysManager.java     (applyOverridesTo) moved here for broader use * CandidateChain.java  FetchChain.java  DispositionChain.java     role specific subclasses of ProcessorChain (suitable for type based autowiring) * CrawlURI.java     new fields/accessors of use to new chains/frontier * PostProcessor.java     deleted; skip to  postprocessing  is now skip to end of chain * ProcessorChain.java     take on control loop formerly in ToeThread * ProcessResult.java     absorb ProcessStatus     eliminate problematic STUCK result,rename
Renamed DefaultSMTPEvaluator to URLEvaluator Updated test case Minor javadoc modifications to TimeBasedRollingTest,rename
[refactor]: rename SecureSession methods,rename
Renamed Sample to Reservoir.  Should have followed @joewilliams s lead on this a while ago with Folsom.,rename
Changed for code review feedbacks  1.Readablity improvements  including method renames. Most is to give more distinct names for readablity. 2. Use StringWriter rather than byte stream to avoid double charset conversion. 3. Added code comments into ResultReader.cs to document class relationships and code flow.,rename
Added simple styling to all SimpleXxMarker.  Default draw() now coheres to select state and displays in highlight colors. Added StyleConstants. Renamed marker.getProps() to getProperties.,rename
142: Renamed comap to contramap,rename
Renamed ValueMetric to GaugeMetric.  More inline with existing metrics terminology.,rename
Table DIGITALIZATION renamed to DIGITIZATION Table SUBJECT_GROUP is mapped  DAO object is created  git svn id: https://svn.origo.ethz.ch/eeg database/trunk@1163 1a751040 f3c7 4aaa 98da 1e85aacc1d30,rename
Rename percents/percentiles to percentiles/percentileValues. Rename total to totalTime. Do validation for the percentiles parameter at construction time. Use two decimal places for formatting percentiles.,rename
Renamed AccelerationModel to LongitudinalModel.,rename
[refactor]: rename method,rename
renamed a method,rename
Source update only: LPOPPUSH renamed to RPOPLPUSH.  Tested against Redis commit 51e01d9b39127eb278957f0c7f122e43a8f830e0.,rename
Code Review of WebSocket feature  Change notes:   Removed obviously unused/faulty code   Renamed/Clarified connection names   Recovered async Event handling.  Review notes:   Change introduces a ComponentUpdate.isProcessed()      feature. I still have no clue how this relates      to the WebSocket feature in general.   Also change introduce the case handling for components      without a peer at all. Not sure how this case is      relevant  because all components are required to have      an peer?   ApplicationInstance handles concurrent disposal      This case should not be possible at all.   Component introduces a lastRenderId      Same here: Mysterious use case.,rename
Renamed getPropertyClass to getInputPropertyClass. JavaDoc revisions to ComponentSynchronizePeer and abstract implementation.,rename
19: Renamed OsgifyContext to OsgifierContext,rename
SuperBuilder toBuilder: renamed generated static helper method,rename
improve readability: rename getType()  > getGType()  no functional change  git svn id: http://svn.mkgmap.org.uk/mkgmap/trunk@3266 25d90789 57f7 4ee0 8453 03a3dfeeeb22,rename
Rename method to commonly used name.,rename
renamed Query.hasPaginating to hasPagination,rename
Rename public method.,rename
renames,rename
All escaping is done in Limpopo now; also renamed a method to be more descriptive about what it s doing,rename
Rename TreeMap.setAll() to TreeMap.union()  and make it left biased instead of right biased.,rename
Options renamed,rename
Rename bogus test case to fix,rename
Rename Binding members: var  > referrer (the Var who refers to this Binding) literalBindings  > bindings,rename
+ Added ForEachJsonSchemaTransform * Renamed json model methods returning maps  added methods returning collections (for easier use in Freemarker templates)  git svn id: https://svn.codehaus.org/enunciate/trunk/enunciate@742 c2b6a248 b21b 0410 9d80 82131e002806,rename
"FACES 2313 Rename responsive attribute of alloy:inputDate and alloy:inputTime to nativeWhenMobile (change and remove """"responsive"""" references in Renderer and ResponseWriter in order to be consistent with InputDateTime components.) ",rename
Minor renaming of code that didn t get renamed when AccessRight was renamed,rename
Rename all the JAXP based XMLReaderFactories to not have JAXP as part of the name. JAXP is the default  and it just makes it more complicated than it needs to be.,rename
rename watchtree to simulationtree and remove some old code,rename
o Added Javadoc for all the constructors o Replaced the non thread safe circular queue by a concurentLinkedQueue o Added some constants definition for clarity sake o Removed the inner SessionBuffer class o Renamed the BUFFER constants to TASKS_QUEUE o Added comments in the important parts of the code  for clarity o Renamed queuehandler by eventQueueHandler o Removed the maxPoolSize and corPoolSize  as they are already present in the parent class o Added @inheritDoc tags o Some other minor cleaning  git svn id: https://svn.apache.org/repos/asf/mina/trunk@762167 13f79535 47bb 0310 9956 ffa450edef68,rename
rename field key to key,rename
Renamed isCategoryAdministrator to mayEditCategories and implemented it on LiferayAuthorizationService.,rename
Renamed to todo list application,rename
Some events classes changes: result renamed to response  and formatting codes.  Signed off by: mk124 <mk124a@gmail.com>,rename
Get rid of redundant private randomVectors method and rename it in Vectors class,rename
Refactor towards Composed Method and renamed to show intent.  Extract error message format to const. Move duplicated code to separate method. Group public methods in front of class.,rename
"Fix a typo (I assume) in one of the failure messages from IterableSubject.containsExactly: it says """"contains only"""" rather than """"contains exactly"""".  I ve done a bit of random tidy up while I was here. For one thing  the private method took a failVerb parameter which always had the same value  so I eliminated that. And that method is more similar to containExactlyElementsIn than it is to containsExactly  so I renamed it (which also means there s no confusion between the private two arg overload the the public varargs overload).                Created by MOE: https://github.com/google/moe MOE_MIGRATED_REVID 135104047 ",rename
Renamed a method.,rename
another method rename,rename
Starting to rename fplayer   > uplayer since we will need an mplayer.,rename
"Address remaining comments from earlier change.  Rename a test case for consistency  Add a test for a nullable non transparent Provider  Use BoundFieldInfo allowsNull and consolidate getting a field value in getFieldValue()  regardless of whether the field type is a simple field or a """"transparent provider"""".               Created by MOE: https://github.com/google/moe MOE_MIGRATED_REVID 123686167 ",rename
renamed dynamicfunction to nativefunction. created a new path interface and path library. started to work on making paths and functions have a similar bheaviors programtically and to allow people to define them both in Java and in Gremlin? .,rename
GEOM 3 : Renames codec classes/methods so abbreviations are in camelcase.,rename
Allow the reloading of BookMetaData with new method reload(). Renamed Filter and FilterFactory to SourceFilter and SourceFilterFactory to allow them to be used in the same context as o.c.c.util.Filter. Modified SwordAbstractInstaller to convert mods.d.tar.gz to mods.d.zip.,rename
Renamed Repository readRecords to Repository readVersions   git svn id: svn+ssh://dev.outerthought.org/outerthought/lilyproject/trunk@4199 b80d95f8 e103 0410 bd55 e03a9dc29394,rename
renamed method getLength() in UpdateMessage to be getLengthOfReplacedText()   getLength() is ambiguous and could be thought of as returning the length of insertion operations,rename
rename method  hold convention  Signed off by: Christian Lüthold <biocodr@gmail.com>,rename
Renamed defineCondition to condition  renamed Condtion to ConditionEvaluator etc,rename
linkPath  > linkName (was missing method rename),rename
renamed method,rename
rename where constraints,rename
Use ~/.tvrenamer as configuration directory.  Previously  ~/.tvrenamer was an XML file containing preferences  and ~/.tvrenameroverrides was an XML file containing title override information.  I m switching these to ~/.tvrenamer/prefs.xml and ~/.tvrenamer/overrides.xml  respectively.  But to have a directory ~/.tvrenamer  we need to move the file out of the way  create the directory  and then move the file into the directory.  The method initialize() of UserPreferences accomplishes this upon startup.  Use java.nio.file.Path instead of java.io.File.  Keep all of these hard coded items in Constants.java.  Also  eliminate hard coding of overrides in source code.  To try to provide that default functionality  check in a default overrides file  and copy it upon initialization  if no other overrides file exists.,rename
Renamed internal  compiler  package to  token,rename
"  Undid redesign of April 2011. Most importantly  instead of a subclass of java.io.File  OverthereFile is now an abstract base class. Subclassing only made the implementation more complex and added no benefits: any other code used expects to be able to open a FileInputStream or a FileOutputStream to a java.io.File  which won t work for remote files. This change also allows for more specific semantics of delete()  mkdir()  mkdirs()  and renameTo().   Removed API methods that have better alternatives  e.g. use listFiles instead of list.   Removed convenience methods such as get(OutputStream).   Renamed get() to getInputStream() and put(long) to getOutputStream(long).   Renamed HostConnection to OverthereConnection.   Renamed OverhereConnection.startExecute() to OverthereConnection.startProcess().   Renamed CommandExecution to OverthereProcess.   Renamed CommandExecutionCallbackHandler to OverthereProcessOutputHandler.   Improved OverthereProcessOutputHandler implementations: they can now be created using static methods and can be grouped with the MultipleOverthereProcessOutputHandler.   Improved performance of SSH (and specifically SCP) protocol by reducing wait time in loop waiting for completion of a command from 1000ms to 50ms.   Fixed bug in SshInteractiveSudoOverthereConnection where it could not handle a password prompt that does not end in """"assword:"""" but has """"assword"""" somewhere in the middle.   Added CmdLine/CmdLineArgument abstraction of command line to allow for better hiding of passwords in logs and implement command line encoding (moved here from from OperatingSystemFamily).   Improved Over   Reimplemented OverthereConnection.execute() in terms of OverthereConnection.startProcess(): reduces duplicate code in protocol implementations  ensures execute() and startProcess() have identical semantics  and forces all protocol implementations to implement startProcess() so that the WSADMIN and WLST daemons will always work.   Set source and target compatibility to 1.6.   Added building of sources (and javadoc once artifacts.gradle is fixed).   Added dependency on Guava. Should replace all use of Apache Commons soon.   Using Scannit for annotation scanning instead of Reflections.   Updated notes in README.md. ",rename
"Add refreshAll to AddEpisodeListener  The only class that currently implements AddEpisodeListener is ResultsTable  and it already had a """"refresh"""" method.  But  rename the method to be a bit more generic  make it public  and make it part of the AddEpisodeListener interface. ",rename
o Created a real Enum file for the sessionState o Added some Javadoc and comments o Changed the name of the state() method to getState() for clarity sake o Renamed remove() to removeSessions() in the AbtractPollingIoProcessor class  for clarity sake  git svn id: https://svn.apache.org/repos/asf/mina/trunk@799001 13f79535 47bb 0310 9956 ffa450edef68,rename
Rename methods.,rename
sensible renames,rename
dividends: trrDiv renamed to totalRateOfReturnDiv fixed: wrong calculation of mean number of shares debugStop moved to class Helper,rename
Rename hd to highDefinition.,rename
Rename TextFormat as to  typeAs,rename
[HER 747] Ensure  retired  status for queues is operator controllable [HER 1768] Changing queue totalBudget not retiring queue as expected * CrawlURI.java     (includesRetireDirective) internalize to CrawlURI * AbstractFrontier.java     allow re enqueuing of untried URI with retire driective     clean up terminology/method names * WorkQueue.java  WorkQueueFrontier.java  BdbFrontier.java     adjust budget/sessionBalance handling to always count up  always consult latest values  always refresh values from latest URI     (processFinish) reorganize to reduce redundancy * DispositionProcessor.java     offer forceRetire setting * QuotaEnforcer.java     set failed status *or* forceRetire  not both [HER 1823] H3: adding SheetAssociations mid crawl won t affect already queued CrawlURIs (sheet liveness)  * SheetsOverlayManager.java     (applyOverlaysTo) rename  unify  reapply whenever called to ensure liveness * CandidatesProcessor.java     adjust to rename,rename
Refactored Timeline package and renamed GraphicsObject,rename
Renamed update.getTopicAfterSave.,rename
"  rewrote the """"contextSelector.html"""" chapter. The chapter was renamed as """"loggingSeparation.html""""   logback now uses slf4j version 1.5.6   ContextJNDISelector was refactored. The config file name for a new logger context is based on convention """"logback CONTEXTNAME.xml""""    This obviates the need to set the """"logback/configuration resource"""" JNDI env entry. ",rename
Renamed sendMessageParsed to msg,rename
Rename TarUtils.getXXX methods as formatXXX Update Javadoc Throw IllegalArgumentException if value won t fit in buffer Treat long values as unsigned Use String instead of StringBuffer for names etc  git svn id: https://svn.apache.org/repos/asf/commons/proper/compress/trunk@761372 13f79535 47bb 0310 9956 ffa450edef68,rename
Rename missed field methods to projection  refs  99,rename
Rename getSocialWorkspaceContainer method to getSocialWorkspace,rename
rename Config.toObject to Config.root  This is clearer about what the object represents and how it relates to the Config. I didn t name it root() before because it might have implied some relationship to ConfigRoot. But since ConfigRoot is now gone  toObject() can have the nicer name root().,rename
Mostly documentation completion; Some small refactorings and code style improvements.    HG   branch : MAPP 5 rename : src/main/java/org/geolatte/graph/BasicPath.java  > src/main/java/org/geolatte/graph/algorithms/BasicPath.java rename : src/main/java/org/geolatte/graph/algorithms/GraphAlgorithmFactory.java  > src/main/java/org/geolatte/graph/algorithms/GraphAlgorithms.java,rename
Renamed a method. United ClassRawData and AdjacencyNode temporarily to allow for easier changes. Preparing for the implementation of double FileRawData in order to implement the incremental ACD correctly  and also Hotspot modification notifications.,rename
Rename a few more  pair  occurances to  field .  Refs  206.,rename
Propogating rename of AuthorizationRequest to OAuth2Request,rename
Renamed private method,rename
Rename method to match any Java style guide,rename
rename HashMapMapper  > MapMapper (no implementation details please) boy scout rule,rename
Tidied up exceptions in candidate service API  Renamed CandidateForbiddenException as CandidateException and CandidatePrivilege as CandidateExceptionReason.  Also update the names of the various reasons to make them clearer  and added in some Javadoc.,rename
Rename things to use  slice  instead of  partition  as that is a less overloaded term.,rename
Renamed  token  variable to  requestToken,rename
Rename ProposalGenerator.addKeywordProposals() to addKeywordCallProposals(),rename
JCBC 940: Rename subdoc builder doXXX methods to execute()  Motivation:             The original RFC method name for execution of a builder is do(). This is incompatible eg. with Java  being a keyword. Most other SDKs where this is also incompatible elected to name the method execute() instead.  Since it is expected that the RFC be amended towards renaming execute()  the java naming of doMutate() and doLookup() can be harmonized with the other SDKs.  Modifications:                doMutate() and doLookup() are now all renamed execute().  Results:          The execution methods of the builders are the same across SDKs where do cannot be a method name.  Change Id: Ic8031efa2dd5a0c3280091b4675ea64aea034a15 Reviewed on: http://review.couchbase.org/62119 Tested by: Simon Baslé <simon@couchbase.com> Reviewed by: Michael Nitschinger <michael.nitschinger@couchbase.com>,rename
rename method for clarity,rename
Renamed the paging parameters to something more logical.,rename
decodeRecordPayload to decodePayload renamed handover test,rename
"Renamed """"room properties"""" to the more generic """"resources""""",rename
Renamed methods with Indio specific names (getConfigurationServiceIndio  getDefectsIndio  getStreamIndio  matchesIndio),rename
renamed test case to match machine name,rename
Renamed methods.,rename
Renamed primitive method basicAt/AtPut.,rename
Renamed x_center attribute to x in <RAMP> and according code changes. Renamed x_init attr in <SPEEDLIMIT>.,rename
resolving is just starting to function   though it doesn t actually resolve anything correctly   it does go through the motions    HG   rename : src/editor/inspections/inspections/UnbalancedAssignmentInspection.java  > src/editor/inspections/inspections/AnonymousFunctionAssignmentInspection.java,rename
"renamed getTopLevelProject() to getExecutionRootProject() to avoid misleading """"top level"""" (which is a different notion from the notion used in getRootSite())  git svn id: https://svn.apache.org/repos/asf/maven/plugins/trunk@1480247 13f79535 47bb 0310 9956 ffa450edef68 ",rename
rename getBytes to getContentBytes for clarity,rename
SC add UserService.find(String) + rename UserService.findUserEntity(Long)  > UserService.find(Long),rename
* Added more constructor methods in ProtocolCodecFilter * All methods in ProtocolCodecFactory and Message(En|De)coderFactory now can throw any exceptions. * Renamed newEncoder() to getEncoder() * Renamed newDecoder() to getDecoder()   git svn id: https://svn.apache.org/repos/asf/directory/trunks/mina@385254 13f79535 47bb 0310 9956 ffa450edef68,rename
Bug 477961   [region] add ability to replace a connection in the digraph   rename method to replaceConnection and allow a null filter to indicate the connection is removed,rename
SONARJNKNS 280 Rename enforceGreen  > abortPipeline,rename
renamed method to avoid conflict with associations,rename
Rename,rename
trigger reconciliation consistently rename test to testReconciliation,rename
Renamed  dimensions  to  arrayDimensions  in VariableDeclarationEntry  as well as  typeReference  to  effectiveTypeReference   to be more consistent.,rename
renamed PromotionBadgeList to Status.,rename
Rename Extractor  > Serializer. Merge from 0.7.0: removed Extractor usage out of the service classes,rename
Minor rename,rename
More membase to couchbase refactoring changes  Changed some more occurences (affects javadocs and log messages) Also added/renamed VBucketCouchbaseClientTest.java which I missed.  Change Id: I9ec314dd2ac65cb904bed978710835135e2a0ac9 Reviewed on: http://review.couchbase.org/12160 Reviewed by: Michael Wiederhold <mike@couchbase.com> Tested by: Raghavan N. Srinivas <raghavan.srinivas@gmail.com>,rename
Renamed responseTime to time,rename
Rename XXX   > XXXinSeconds/Minutes/etc,rename
Rename RouteRegistry map,rename
rename Matches to QueryTask,rename
Close chunk region files if they have not been read/written to in 5 min. Renamed a few API calls Added utility methods to SpoutBlock.,rename
HH 69833 rename method to be more understandable [an.ivanov],rename
Renamed the entry/features type to events everywhere in the code.,rename
rename updateAttributes() to update(),rename
Rename Save concern opts and ignore concern tests,rename
MEAR 46:    Fixed ejb clients handling   Renamed JavaModule to JarModule and deprecated JavaModule   Added defaultLibDir as an alias of defaultJavaBundleDir which is more understable   Updated documentation   Updated tests and added an ejb client test.  git svn id: https://svn.apache.org/repos/asf/maven/plugins/trunk@471886 13f79535 47bb 0310 9956 ffa450edef68,rename
renamed generateParameter to generateCommand,rename
Enable `directio.text.*(number_format)`.  Additionally  `decimal_format` has been renamed to `decimal_output_style`.,rename
Rename Queue to TaskQueue,rename
Method renames & adding license headers,rename
Updated to support Mambu 3.9 API changes  1. MBU 7336   Create Group APIs 1a also  included code for MBU 7337  Edit Groups API. NOTE: MBU 7337 will be now supported by Mambu in 3.10 only. Added TODOs to test when ready ClientService 2. MBU 7351   Get Group Roles  and Get Details for Group Role APIs ClientService 3.MBU 7061   Get Client Types API (for Clients and for Groups) API ClientService 4. MBU 7312  MBU 7313   Client Profile Picture and Signature: APIs to Store  Retrieve and Delete ClientService  DocumentService ServiceHelper notes: moved  makeParamsForDocumentJson() to ServiceHelper DemoUtil: moved the encodeFileIntoBase64String() to DemoUtil from DemoTestDocuments 5. MBU 6789  MBU 7676   Get Repayments Schedule preview for a loan product API LoanService  ServiceHelper 6. MBU 7758   Patch loan account terms API LoanService  ServiceHelper 7. MBU 6813   Update loan account repayments API RepaymentsService 8. MBU 7189   Undo loan account disbursement API LoanService 9.   MBU 7034   Custom Fields   refactoring to support client types. Updated demo programs DemoTestOrganizationService  10. MBU 7467    Updated comments only: allow username  key to id to be used in place of username for getting Tasks       MBU 6908   Updated comments only: allow user key and id for updating custom fields for the user  11. Enhanced DemoUtil to provide more helper methods for testing and runs automation   created helpers to run API tests for specific accounts and products   created helpers to create new accounts to be consistent with the tested product type   created helpers to create custom fields for new accounts to be valid for tested product and client role   rearranged some test cases to allow for higher probability of the successful end to end runs  12. Updated Demo programs to test new APIs. Used new generic helper methods and re arranged test calls to allow for better test automation and less test data dependency.  Miscellaneous: 13. Updated pom file to use 3.9 model  jar and to build Mambu Java 3.9 bin.jar 14. Added missing wrapper for Delete Document API (available since 3.3  see MBU 3526 ) DocumentsService 15. Updated ApiDefinition and ServiceExecutor to support new APIs Added new definitions: GET_OWNED_ENTITY  PATCH_OWNED_ENTITIES.  PATCH_JSON 16. Removed unused class util/APIExceptionData.java. This class was never used and is not needed.  Mambu’s ReturnCode enum class can be used instead. Removed an unused constructor in MambuApiResponseMessage referencing this class. 17. Deprecated ACCOUNT_TYPE enum in APIData class.  Mambu’s existent Account.Type class (from the model) should be used instead. Updated Savings Service to use Mambu’s Account.Type.  Deprecated original methods using ACCOUNT_TYPE. ApiData  SavingsService 18. TaskSerice  correction: renamed getTasks() to getTask() 19. RequestExecutorImpl.java   updated logging JSON data to better handle encoded content for profile picture/signature API 20. Updated RAEDME file,rename
Preparatory changes to QTI samples:  * Renamed QtiSampleResource  > QtiSampleAssessment * Now includes information about additional resources (e.g. files) * Updates all samples to include above information.  This gets these classes ready for importing into the QTIWorks domain model.,rename
Fix for [HER 1689] build  launch buttons remain enabled after problem building * CrawlJob.java   renamed isContainerOk() to hasApplicationContext()   increased granularity of isLaunchable() to offer launch button * JobResource.java   more coarse check for hasApplicationContext() to disable build button,rename
Add super column to the mutator and rename ClusterFactory.create to ClusterFactory.getOrCreate,rename
renamed rectangles   Added inclusive upper extent for point contained in rectangle/box (contained2)   Added function for computing bounding rectangle of 2D points,rename
Small refactoring   method renamed,rename
Renamed “RestoreMetaClass” to “RevertMetaClass”.,rename
[refactor] rename,rename
Rename simple Image  type  field to  imageType   Renames simple `Image` s `type` field to `imageType` and its related methods to `getImageType` and `setImageType`.,rename
package dffw renamed to df4j,rename
Fix import table with row and column annotations. Rename get/set color to from/to clipboard. Use display value when syncing colors.,rename
[Consistency Predicates] Minor Change: Renamed some methods and re written some javadoc (should be semantic preserving),rename
Rename vars and methods to match their meaning,rename
rename Attributes.putXXX() to Attributes.setXXX(),rename
[HER 1676] improve bundled profiles to match best practice  be self documenting * profile crawler beans.cxml     add comments for all unstated default values an operator might want to change * (many)      reorder  refactor  rename to better minimize/match simple configuration,rename
"rename """"@import"""" pragma to """"@import package"""" ",rename
"Enhancements to how queries with bind values are stored internally and sent to the server.  Previously we allocated a new String object for the entire final query we were sending to the database.  If you had a big query  or especially if you had large bind values you ended up with essentially two copies in memory. This change will reuse the existing objects and therefore should take 1/2 the memory it does today for a given query.  This restructuring will also allow in the future the ability to stream bytea data to the server instead of the current approach of pulling it all into memory. I also fixed a test that was failing on a 7.2 database. Also renamed some internal variables and some minor cleanup.   Modified Files:  	jdbc/org/postgresql/core/QueryExecutor.java  	jdbc/org/postgresql/jdbc1/AbstractJdbc1Connection.java  	jdbc/org/postgresql/jdbc1/AbstractJdbc1Statement.java  	jdbc/org/postgresql/jdbc2/AbstractJdbc2ResultSet.java  	jdbc/org/postgresql/jdbc2/AbstractJdbc2Statement.java  	jdbc/org/postgresql/test/jdbc2/DatabaseMetaDataTest.java ",rename
"Fixed some issues in an earlier merge. Renamed """"feeds"""" to """"sources"""" in the Historic object.",rename
JCBC 985: Fix fts errors handling/parsing  querystring  highlight  Motivation            During the REVIEW phase  the following problems have been identified with FTS RFC that affect the implementation:     StringQuery should be QueryStringQuery    there is an additional plaintext error case: HTTP 412 when a  consistency is requested but cannot be fulfilled within the timeout    highlight style is actually optional    errors is not an array but an object  and when it is present  hits  can be null  Modifications                  StringQuery has been renamed to QueryStringQuery  and the static  factory method from string to queryString.    highlight now has several overloads that can omit the style. when  used  the style is actually set to new special enum SERVER_DEFAULT.    HTTP 412 case leads to a ResponseStatus.FAILURE  which is now  interpreted as a FtsConsistencyTimeoutException    HTTP 200 with execution errors now parses both a JsonArray and a  JsonObject. The case where hits is null is also handled.  Added unit tests and integration tests  most notably for the error handling cases.  Result        The error handling of FTS is more correct (and a bug with it is fixed). Other comments from rfc review have been taken into account.  Change Id: Iefd877582e8001a5f06477520cc687a98a900c4b Reviewed on: http://review.couchbase.org/65620 Reviewed by: Sergey Avseyev <sergey.avseyev@gmail.com> Tested by: Simon Baslé <simon@couchbase.com>,rename
renamed methods to make SiteStageMojo and SiteStageDeployMojo as similar as possible  git svn id: https://svn.apache.org/repos/asf/maven/plugins/trunk@1480497 13f79535 47bb 0310 9956 ffa450edef68,rename
Renamed ClusterWideMapTest keys and entries test method names  Signed off by: Thomas Segismont <tsegismont@gmail.com>,rename
Renamed method,rename
Renamed API methods for intermediary result matcher,rename
Rename the  jvm opts  options to  java options  to be in line with the vertx command line.  Signed off by: Clement Escoffier <clement.escoffier@gmail.com>,rename
TFJ 465 renamed TwitterListener lookedupFriendships() to lookedUpFriendships(),rename
Renamed Stack.pop(Type) and Stack.push(Type) to avoid confusion with Stack.pop() and Stack.pop2()  Added coreWriter() method to JavaCodeWriter.  This method provides access to the underlying JavaCoreCodeWriter. This functionality is needed by the REPL.,rename
Rename Service.getSearches  > Service.getSavedSearches.,rename
DF QCADOOMES 975 Fixed problem with autocompletition  renamed some methods  added some tests.,rename
Renamed  ForBinding  to  Binder . Introduced Stage. Added name package to Javadocs. Updated some random Javadocs.  git svn id: https://google guice.googlecode.com/svn/trunk@150 d779f126 a31b 0410 b53b 1d3aecad763e,rename
Renamed VDIFF to FVDM.,rename
Renamed a few of the Links methods so that things are more consistent.,rename
rename attributes,rename
"BalajiN |  59 | Refactoring the adherence model  	1. Capturing TB ID as a part of the adherence log 	2. Adherence class now represents a WeeklyAdherence and was renamed accordingly 	3. Reflecting upstream changes in the tb adherence moudle   fixing failing tests ",rename
Rename JacksonMapper.withVisibilityChecker to setVisibilityChecker  more faithful to Jackson,rename
Removed Example and renamed AeshExample to Example Renamed some CommandInvocation methods,rename
Renamed MergeCanceller   > MergeKiller   Optimization if fetchDigests(): don t send if we re the only member   Merge start suspends STABLE and the ViewHandler in GMS   Merge stop resumes STABLE and the ViewHandler in GMS,rename
Renamed feeds to sources for historic queries.,rename
rename Log interface method,rename
fixed format and renamed getBackingStore to getStoreInternal,rename
Code cleanup and method renames.  Renaming boolean get* to is*.  Renaming getSeller to getSellerName to better represent what it s actually doing.  Removing unused imports.,rename
Added class to store window size  position and state between sessions using `PrefsStore`  * Made `LGM.frame` use this class  * Renamed methods in Util to follow code conventions and added two more methods  * Fixed a bug which would prevent `LGM.frame` from getting maximized at startup  git svn id: https://lateralgm.svn.sourceforge.net/svnroot/lateralgm@60 8f422083 7f27 0410 bc82 93e204be8cd2,rename
Rename BankAccount property valid to validated  and bump version to 1.2.3.,rename
[ARQ 886] Improve init/cleanupStatement handling: rename properties to more meaningful ones.,rename
Renamed a lot of stuff from emma to jacoco,rename
MaryNode renamed to TreeNode  some changes to BSTNode.  Signed off by: Viktor Tomkovič <viktor.tomkovic@gmail.com>,rename
Some minor ICOFile fixes  * Removed warning  renamed method to reflect purpose  * Added convenience method for writing a normal OutputStream    * gets wrapped into a StreamEncoder  git svn id: https://lateralgm.svn.sourceforge.net/svnroot/lateralgm/LateralGM/branches/versioning@413 8f422083 7f27 0410 bc82 93e204be8cd2,rename
rename : setChecked(..)  > setCheckState(..) in ControlTree,rename
more refactoring of MTT and Simulation   formatting  sessionID now private in Simulation  currentFrame now private in Simulation  completeCursorMessage renamed to allCursorMessage to more accurately describe its funtionality,rename
Rename @ReportAsViolationFromComposingConstraint to @ReportAsViolationFromCompositeConstraint  git svn id: https://svn.jboss.org/repos/hibernate/validator/trunk@15489 1b8cb986 b30d 0410 93ca fae66ebed9b2,rename
Renamed comparator to matcher (in cases where it s matching and not comparing),rename
Benchmark stages now separated into their own namespaces  * removed all the separate symlinks to XSD files; replaced by single symlink to schema directory * moved radargun 3.0.xsd to radargun benchmark 3.0.xsd (fits better to the urn:radargun:benchmark:3.0 namespace) * moved radargunScenario 3.0.xsd to radargun scenario 3.0.xsd and changed the namespace to urn:radargun:scenario:3.0 * core stages are now in radargun core 3.0.xsd * reduced code dependency on Directories.LIB_DIR; AnnotatedHelper renamed to ClasspathScanner  now scanning whole classpath,rename
Renamed method to getPluginProperty  can return null,rename
Renamed copyfromTempFile >copyFromTempFile,rename
rename,rename
[AESH 249] renamed FileResource to Resource and DefaultFileResource to FileResource added readAttributes to Resource,rename
renamed methods to be consistent with other resources.,rename
Renamed getDefaultService to getDefaultName as it s actually only the default key/string  not the service.,rename
Rename FindMotion to FindCharMotion,rename
Issue  4: Renamed static constructor TreeMap.map to treeMap,rename
"Integrated Alex s patch sent to Brett.  Per Alex:  For the CVS logs:    renamed public printElementContent to outputElementContent (for consistency)    added """"padText"""" property  to avoid trimText changing         The quick <b>brown</b> fox         into         The quick<b>brown</b>fox   which allows you to output browser friendly HTML even when using trimText    misc doc fix ",rename
Rename project & package fullbuild to batchbuild.   git svn id: svn+ssh://dev.outerthought.org/outerthought/lilyproject/trunk@4384 b80d95f8 e103 0410 bd55 e03a9dc29394,rename
Code clean; renamed some package private methods  git svn id: https://svn.apache.org/repos/asf/httpcomponents/httpclient/trunk@1614354 13f79535 47bb 0310 9956 ffa450edef68,rename
Update version 0.1.1 SNAPSHOT.  commit dde54b61f6641d933d2f9073d8aa617d8d075a55 Author: Toshiki Takeuchi <take@xcoo.jp> Date:   Fri Mar 30 21:44:03 2012 +0900      Add CMYKColor class.     Add 2 enum classes for texture.  commit 5afbef4651220c3790fc5705da74aa1af78d3319 Author: Toshiki Takeuchi <take@xcoo.jp> Date:   Fri Mar 30 01:41:39 2012 +0900      Integrate mouseWheelEvent with mouseEvent.  commit 4aab2d45d5f9328927fab01240b89f572f9081ec Author: Toshiki Takeuchi <take@xcoo.jp> Date:   Thu Mar 22 20:24:17 2012 +0900      Fix a bug of SQL.     Modify ArrayList of GraphicsObject to CopyOnWriteArrayList.  commit 080c5192978a4cbf710447a73c9e80d87fb510d6 Author: Toshiki Takeuchi <take@xcoo.jp> Date:   Tue Mar 20 12:19:39 2012 +0900      Update pom.xml to use latest OpenNI and NITE.  commit 9ace0525d9f4d14a21704df1a71dc721c9cc0487 Author: Toshiki Takeuchi <take@xcoo.jp> Date:   Tue Mar 20 10:41:01 2012 +0900      Modify Trackball.  commit 78ab5ddfdd84e748131de12487e4fe6cbc4a0f5f Author: Toshiki Takeuchi <take@xcoo.jp> Date:   Fri Mar 16 00:49:27 2012 +0900      Add Mouse class.  commit a3152207d195bf41af6369b2beadd4f99d16442a Author: Toshiki Takeuchi <take@xcoo.jp> Date:   Thu Mar 15 16:13:46 2012 +0900      Fix a reshape bug.  commit 396afe9e46e2e505b45303a40de89d32db12f12e Author: Toshiki Takeuchi <take@xcoo.jp> Date:   Sat Mar 10 18:32:31 2012 +0900      Add reset method to Trackball class.     Refactoring Applet and CursorMode classes.  commit 1bfbab9ddc3c23ffa4cfaf653a179dda062537e6 Author: Toshiki Takeuchi <take@xcoo.jp> Date:   Sat Mar 10 15:16:34 2012 +0900      Add Trackball class.  commit 7e113c4d3fadf7df01dcadd472f471a00db5c9d5 Author: Toshiki Takeuchi <take@xcoo.jp> Date:   Fri Mar 9 14:37:34 2012 +0900      Fix Box class.  commit 01fe299dbb2ef0c2ef24b1da46c3888d559edaa1 Merge: 5022846 55ed6df Author: Yuki Ban <yuki@xcoo.jp> Date:   Wed Mar 7 09:09:37 2012 +0900      Merge branch  dev  of github.com:casmi/casmi into dev  commit 50228467f0fb686e92ce517772c4e5372cff5cef Author: Yuki Ban <yuki@xcoo.jp> Date:   Wed Mar 7 09:09:28 2012 +0900      Modified TimeLine class  commit 55ed6df1f21a258ec3ced88677de2d08ca5cb2cf Author: Toshiki Takeuchi <take@xcoo.jp> Date:   Tue Mar 6 14:22:05 2012 +0900      Remove warnings of CPopup.  commit d5663c385afd986f24ce55fed7ac64b02193452b Author: Toshiki Takeuchi <take@xcoo.jp> Date:   Fri Mar 2 14:51:54 2012 +0900      Add license and javadoc comments.  commit 096fec8a5adf5504068eac0b4fba49275c09009b Author: Yuki Ban <yuki@xcoo.jp> Date:   Fri Mar 2 14:35:54 2012 +0900      Modified selection buffer  commit 3cf0da85cd3259f38309dc1f5463f0f0abdc74e3 Author: XcooDev <developer@xcoo.jp> Date:   Sat Feb 25 23:37:00 2012 +0900      add synchronized block in rendering  commit b05135396611aa4409d9ca1690f6331604427aad Merge: 4df978d 8ba4300 Author: XcooDev <developer@xcoo.jp> Date:   Sat Feb 25 22:28:24 2012 +0900      Merge branch  dev  of github xcoo:casmi/casmi into dev  commit 4df978d2d072a24bced11e61b192a8515c2de92c Author: XcooDev <developer@xcoo.jp> Date:   Sat Feb 25 22:28:02 2012 +0900      add function to show a alert dialog box  commit 8ba430072ab801e1b1ed1ce337cb1d5b8424e4eb Author: Toshiki Takeuchi <take@xcoo.jp> Date:   Sat Feb 25 21:24:01 2012 +0900      Refactoring some classes.  commit 2e250a563c4efc9e2b2abb892ebb266ef6e7a93b Author: XcooDev <developer@xcoo.jp> Date:   Sat Feb 25 19:26:10 2012 +0900      fix bug in Polygon class  commit c29f1f1167281c5fd306618b2c76a25675872275 Author: Toshiki Takeuchi <take@xcoo.jp> Date:   Sat Feb 25 17:54:35 2012 +0900      Add GrayColor class.  commit 1f7a40470439fda330cffb15bce51bbd282dd92a Author: XcooDev <developer@xcoo.jp> Date:   Sat Feb 25 17:53:28 2012 +0900      fix bug in Line class  commit 578f12c89869ab394a5595817e3fd0197890d21c Author: Yuki Ban <yuki@xcoo.jp> Date:   Wed Feb 22 15:23:57 2012 +0900      add Mouse Wheel Event.  commit e46b2a55bc08505f11ff6f64533c861f61defef7 Author: shigeodayo <shigeo.yoshida.shigeo@gmail.com> Date:   Fri Feb 17 14:59:17 2012 +0900      Add CPopupmenu      Add CPopupmenu  easy to create popup menu.  commit ce5bf19848573173440f03a0dc08da8cfd1e8701 Author: Toshiki Takeuchi <take@xcoo.jp> Date:   Fri Feb 17 13:18:33 2012 +0900      Fix bugs about Primary Key and Short/Long type.  commit 18c992fe2121a6538f0aa33a8035ff0af1f516c3 Author: Toshiki Takeuchi <take@xcoo.jp> Date:   Tue Feb 14 05:11:16 2012 +0900      Divide Color class to three classes (Color interface  RGBColor class  HSBColor class).     Remove ColorMode.     Refactoring many sources.  commit 469f0e6cd6d5985e799e54ca87892c2620685872 Author: XcooDev <developer@xcoo.jp> Date:   Thu Feb 9 17:29:17 2012 +0900      fixed version reference in README  commit 814de6bf236f866956003c9e72073ca5caf26103 Author: Toshiki Takeuchi <take@xcoo.jp> Date:   Sat Feb 4 17:07:36 2012 +0900      Update version to 0.1.1 SNAPSHOT.  commit 58b4744ef60cc435965aec28e40c639948637270 Author: Toshiki Takeuchi <take@xcoo.jp> Date:   Sat Feb 4 16:46:46 2012 +0900      Rename Roundrect.java to RoundRect.java.     Add maven compiler plugin version to pom.xml.  commit b31e6ae4be80737254690e05086121de8652a955 Author: Yuki Ban <yuki@xcoo.jp> Date:   Sat Feb 4 15:16:20 2012 +0900      Add repeat function to TweenGroup  commit 50c6950486df6bbf13a6c6c236ce2fffe2b5f85e Author: Toshiki Takeuchi <toshiki@Prima Alice.local> Date:   Sat Feb 4 14:31:09 2012 +0900      Add a repository icon.,rename
Resolve  Browse Beans  issue after built  pre launch * JobRelatedResource     catch InvalidPropertyException  render as red error message rather than fouling entire trace of beans to web UI * StatisticsTracker     rename getSnapshots to listSnapshots to prevent interpretation as (invalid) bean property,rename
Upgrade to Jackson 1.9 and rename duplicate method names,rename
Rename unknown frame  > custom frame for HTTP/2,rename
* Added WriteRequest.getOriginalRequest * Renamed WriteRequestWrapper.getWriteRequest() to getParentRequest() * Simplified WriteException    git svn id: https://svn.apache.org/repos/asf/mina/trunk@594773 13f79535 47bb 0310 9956 ffa450edef68,rename
refactoring; renamed getOccurrences() to getTokens()   git svn id: https://pmd.svn.sourceforge.net/svnroot/pmd/trunk@600 51baf565 9d33 0410 a72c fc3788e3496d,rename
Renamed setMobSpawnRate for consistency.,rename
Change title handling of abstract finance view    rename abstract getTitle() to getDefaultTitle()   add new getTitle() returning the text of title label   remove updateTitle()   update all classes using the methods mentioned above,rename
Metrics improvements : rename a few things and use static instance for DummyMetrics as they are stateless,rename
rename getVersion to getHttpVersion,rename
rename varables correct return value of getter in graphrep,rename
Renamed key property on VarSpec,rename
"Clarification of the matrix assignment package  remove methods getNumberOfWorkersRows() and getNumberOfWorkersColumns() of the MatrixAssignment interface. They were only present for printing and they made no sense in that a partition can have distinct number of workers on different rows (for example in Modification3).  To allow the printing of a MatrixAssignment  the method toString() has been overloaded in both OptimalPartition and EquiMatrixAssignment.  The method verifyValidity() in Partition has been rename to valid() to be Java friendly.  The parameter of the method getRegions has been changed from """"isSRelation"""" to """"dimension"""" to be consistent with the implemented interface.  Some comments have been added to the MatrixMapping package. ",rename
Fixing the API for network registration so we can register without having to have a reference to the whole NetworkController object.     RequiresRegistration interface defines a register function for network components which require a NetworkRegistrationRequest before being able to deal with messages.    NetworkController now implements RequiresRegistration and the registerConnector function has been renamed to register.    In the NetworkController constructor we can now do a type check on the NetworkChannel we are given to see if we need to register and do so.    Tests updated for these changes.,rename
refactor rename getYAxisGroupPosistion,rename
renamed RequiredClaimSet to Policy,rename
Rename ScopeManager and create an interface,rename
WELDX 144 rename @ManagedProducer to @Unwraps,rename
SnapshotTestTool: rename exclude to excludeField,rename
rename OSCJavaToByteArrayConverter  > OSCSerializer,rename
Rename Response to Renderable.,rename
Rename scope to record,rename
More tenant  > repo renames,rename
Address further PR feedback  Address ConfigNode PR feedback  including   * Add @Override tags for all tokens() methods   * Make `children()` method in ConfigNodeComplexValue final   * Rename ConfigNodeKey to ConfigNodePath   * Rename ConfigNodeKeyValue to ConfigNodeField   * Modify PathParser so it can parse a string into either a Path     or a ConfigNodePath,rename
renamed some methods,rename
Renamed some GameServer update*() methods,rename
"Initial restructuring to add jdbc3 support.  There was a significant amount of duplicated code between the jdbc1 and jdbc2.  This checkin restructures the code so that the duplication is removed so that the jdbc3 support can be added without adding yet another copy of everything.  Also many classes were renamed to avoid confusion with multiple different objects having the same name.  The timestamp tests were also updated to add support for testing timestamp without time zone in addition to timestamp with time zone   Modified Files:  	jdbc/Makefile jdbc/build.xml jdbc/example/ImageViewer.java  	jdbc/example/basic.java jdbc/example/blobtest.java  	jdbc/example/threadsafe.java  	jdbc/org/postgresql/Driver.java.in  	jdbc/org/postgresql/Field.java  	jdbc/org/postgresql/core/QueryExecutor.java  	jdbc/org/postgresql/fastpath/Fastpath.java  	jdbc/org/postgresql/jdbc1/CallableStatement.java  	jdbc/org/postgresql/jdbc1/DatabaseMetaData.java  	jdbc/org/postgresql/jdbc1/PreparedStatement.java  	jdbc/org/postgresql/jdbc2/Array.java  	jdbc/org/postgresql/jdbc2/CallableStatement.java  	jdbc/org/postgresql/jdbc2/DatabaseMetaData.java  	jdbc/org/postgresql/jdbc2/PreparedStatement.java  	jdbc/org/postgresql/jdbc2/UpdateableResultSet.java  	jdbc/org/postgresql/largeobject/LargeObjectManager.java  	jdbc/org/postgresql/largeobject/PGblob.java  	jdbc/org/postgresql/largeobject/PGclob.java  	jdbc/org/postgresql/test/jdbc2/BlobTest.java  	jdbc/org/postgresql/test/jdbc2/ConnectionTest.java  	jdbc/org/postgresql/test/jdbc2/DatabaseMetaDataTest.java  	jdbc/org/postgresql/test/jdbc2/TimestampTest.java  	jdbc/org/postgresql/test/jdbc2/UpdateableResultTest.java  	jdbc/org/postgresql/util/Serialize.java  Added Files:  	jdbc/org/postgresql/PGConnection.java  	jdbc/org/postgresql/PGStatement.java  	jdbc/org/postgresql/jdbc1/AbstractJdbc1Connection.java  	jdbc/org/postgresql/jdbc1/AbstractJdbc1ResultSet.java  	jdbc/org/postgresql/jdbc1/AbstractJdbc1Statement.java  	jdbc/org/postgresql/jdbc1/Jdbc1Connection.java  	jdbc/org/postgresql/jdbc1/Jdbc1ResultSet.java  	jdbc/org/postgresql/jdbc1/Jdbc1Statement.java  	jdbc/org/postgresql/jdbc2/AbstractJdbc2Connection.java  	jdbc/org/postgresql/jdbc2/AbstractJdbc2ResultSet.java  	jdbc/org/postgresql/jdbc2/AbstractJdbc2Statement.java  	jdbc/org/postgresql/jdbc2/Jdbc2Connection.java  	jdbc/org/postgresql/jdbc2/Jdbc2ResultSet.java  	jdbc/org/postgresql/jdbc2/Jdbc2Statement.java  Removed Files:  	jdbc/org/postgresql/Connection.java  	jdbc/org/postgresql/ResultSet.java  	jdbc/org/postgresql/Statement.java  	jdbc/org/postgresql/jdbc1/Connection.java  	jdbc/org/postgresql/jdbc1/ResultSet.java  	jdbc/org/postgresql/jdbc1/Statement.java  	jdbc/org/postgresql/jdbc2/Connection.java  	jdbc/org/postgresql/jdbc2/ResultSet.java  	jdbc/org/postgresql/jdbc2/Statement.java ",rename
Configuration updates and changes to add missing properties and such  made Mobspawn command say it failed if spawning actually fails  renamed LavaSlime to MagmaCube (as per the community name for it)  updated the README a bit,rename
"rename """"addAll"""" method to """"replace"""" ",rename
66: Renamed foreach methods that had effects as parameters to foreachDoEffect,rename
rename to filter from matching,rename
Rename parseString to formatCalendar Rename create method to createWorker,rename
Revising the DSR script  JDBCfetch  rename and comments,rename
RF 9924 Panel menu: rename icon attributes,rename
renamed callRealMethodWith to callRealMethodWithArguments added Javadoc,rename
ASSIGNED   bug 376942: Third Party Tool Extensions not handled correctly  https://bugs.eclipse.org/bugs/show_bug.cgi?id 376942  Renamed annotation to XMLPersistenceMappingExtendedMetadata,rename
Rename method from getActionId() to getActionType() on GroomServerAction  git svn id: https://svn.apache.org/repos/asf/incubator/hama/trunk@1033805 13f79535 47bb 0310 9956 ffa450edef68,rename
Rename the new configFile API,rename
Introduce FailureMetadata  and start associated renames:   SubjectFactory  > Subject.Factory   CustomSubjectBuilderFactory  > CustomSubjectBuilder.Factory  []                Created by MOE: https://github.com/google/moe MOE_MIGRATED_REVID 169383563,rename
Fixed confusion about the getNumberOfComponents() method: renamed it to getAdjointDimension().  Also added unit tests.,rename
BoofCV converter: *rename converter *Replace static method by object methods,rename
"NON WORKING beta 1.2 release  DEVELOPERS ONLY. i made this commit of the work i have so far however there are a few errors here and there which need to be fixed however i have limited time to fix this so i m asking the community to do it ;).  so far: problems in fe.java around line 855 not all NON obfuscated have been checked if they needed some renames. workbench.java has been """"disabled"""" due to the fact it needs a rework. ",rename
rename stuff more appropriately,rename
"Renamed """"cimInstance"""" to """"connectInstance"""" in CoverityEnvBuildWrapper to be consistent with CoverityViewResults. ",rename
Renamed tests,rename
Renamed Elements select to Elements filter.  Renamed so the API is better self describing.,rename
PAXRUNNER 226 Filter duplicates in bundles to be provisioned. Also rename provision.BundleReference to ScannedBundle as the name conflicts with platform.BundleReference.  git svn id: https://scm.ops4j.org/repos/ops4j/projects/pax/runner@14717 9b982a3c 3ae5 0310 a4bc d9a3335569bd,rename
More un noticeable stuff: renamed CacheSet to ProtectionCache and it now stores a set of hard references to cached protections. At some point the other caches will only use WeakReferences  not hard. This will allow more versatile caches so we can use the cache more often while guaranteeing we can keep caches up to date (e.g when the hard reference disappears  the weak references will as well),rename
rename parse() methods to parseFoo()  for clarity and to avoid overload ambiguity,rename
"Renamed """"unifyer""""  > """"unifier"""" this was incorrect.",rename
COR 316 : rename test  testPreventRemoveUser,rename
Renamed Mapping to MappingMode,rename
Rename simple Topic type field to avoid overriding Identified type field  Topic s `type` field becomes `topicType`.,rename
Performed total rename to DirectMemory,rename
Rename set method,rename
Renamed collectionContaining()  > hasItem(). arrayContaining()  > hasItemInArray(),rename
Renamed RELATE to CREATE UNIQUE,rename
[ LIB 132] rename Issuer.issuerOfPatientID() to Issuer.fromIssuerOfPatientID(),rename
rename getJsonStore() method,rename
rename streamRecurrenceDates to streamRecurrences,rename
Added a first version of namespace browser (really basic  but already does remote consulting of clojure environment !) Corrected label for add/remove clojure nature. Corrected add/remove clojure nature code that broke when installing clojure lib    HG   rename : src/clojuredev/test.clj  > src/clojuredev/debug/test.clj extra : convert_revision : svn%3A951d75ee 2d4e 0410 a0c2 87c8fdd8ec4c/clojuredev/trunk%4085,rename
Rename MapSubReport to ImagesSubReport,rename
remove baseUrl and do full urls and added getters and setters for these variables  added tests  renamed GenericAttributes to DefaultGenericAttributes,rename
"Dev  Dheeru |  313 | adding confirm adherence feature(should fix IT test for multiple patients)  	1.) renamed SavedAdherencePrompts to GetAdherencePrompts 	2.) Added ResetPatientIndexOperation class. this operation should be added for every node in transition classes 	3.) ConfirmAdherenceTransition persists adherence input; CaptureAdherenceTransition adds input to session 	4.) using encodeBase64UrlSafe instead of encodeBase64 ",rename
Rename People to Friend,rename
Renamed method for retrieving articles for user.  git svn id: https://svn.origo.ethz.ch/eeg database/branches/hprofiler@1249 1a751040 f3c7 4aaa 98da 1e85aacc1d30,rename
renamed removeOOBMessages(),rename
renamed a poorly named method,rename
renamed methods in FeatureModelInfo Interface and implenting classes added some Javadoc for private methods,rename
Renamed API methods into nicer forms now that we allow full operator overloading,rename
Renamed getColor to getPrefix in Player,rename
"Update bill scrape check normalizations.  Update the """"replaceNonAlpha"""" method to capitalize all characters  because we don t really care about case mismatches.  Also  rename to """"basicNormalize"""" and rename """"stripNonContent"""" to """"ultraNormalize"""". ",rename
Function rename.,rename
"JCBC 748: join/nest key clause uses ON KEYS syntax  Motivation            In N1QL  the correct syntax for a on keys clause in a NEST or JOIN is """"ON KEYS Expression"""" not """"KEYS Expression"""" as currently implemented.  Also there s a clause that uses KEYS keyword  but differently: when referencing primary keys (document IDs)  the """"USE KEYS"""" syntax should be used. This syntax expects strings or array of strings (not a token). Could be implemented as a useKeys(...) method next to the current keys methods.  Modifications               KeysElement now takes an enum to denote the type of KEYS clause.  KeysPath """"keys"""" methods for the JOIN side of things have been renamed to """"onKeys""""  added """"useKeys"""" for the FROM side of things (referencing a primary key).  onKeys and useKeys accept an array of Strings. UseKeys with array of size 1 will only produce a String in query  not a JSON array.  Refactored unit tests where ON KEYS was expected. Modified unit tests where USE KEYS what meant instead of ON KEYS.  Results         All unit tests passing  one can now do a FROM clause on the primary key  using useKeys(...) methods. The syntax for JOINs key clause has been fixed in onKeys(...) methods.  Change Id: I6da78c7518b15c3893939afe3fb4877dd3dcd375 Reviewed on: http://review.couchbase.org/49606 Tested by: Simon Baslé <simon@couchbase.com> Reviewed by: Michael Nitschinger <michael.nitschinger@couchbase.com> ",rename
BVAL 61 rename getValue to getInvalidValue  git svn id: https://svn.jboss.org/repos/hibernate/validator/trunk@15490 1b8cb986 b30d 0410 93ca fae66ebed9b2,rename
renamed to show that it s for online players only  it will go null if offline,rename
[ LIB 207] Rename IDWithIssuer.fromPatientIDWithIssuer(attrs) to pidOf(attrs),rename
hacker s weekend on compiler plugin    renamed DeepStatementRewriter to DeepBlockRewriter and rewrote it to always process a whole block   heavy refactoring of AST transform related code to make it easier to understand and more extensible   added support for declaring a mock s interactions right when creating it (Mock(List) { ... })   implemented Specification.with { ... } to declare conditions and interactions in the context of an object,rename
https://bugs.eclipse.org/bugs/show_bug.cgi?id 386062   renamed some methods in FeatureDescriptor and ObjectDescriptor to try and make sense of what they actually do.,rename
renames,rename
method rename,rename
Part of HER 1857. Rename textSource >surtsSource  and make old surtsSourceFile a facade for surtsSource.,rename
Renamed stringContains to containsString,rename
Rename chain to compose to be more mathematically correct.,rename
"JCBC 833: Prefix all Query related classes with N1ql  Motivation:             In order to maintain naming consistency and avoid confusion  classes like Query and related (eg. QueryResult  QueryRow) should be prefixed with N1ql  aligning it with view related classes like ViewQuery.  Modifications:                Renamed Query  QueryResult  QueryRow  their async counterparts  concrete implementations and related tests by prefixing """"Query"""" with """"N1ql"""".  QueryMetrics and QueryParams have been respectively renamed to N1qlMetrics and N1qlParams.  QueryExecutor has been renamed to N1qlQueryExecutor. Order of fields and method declaration has been shuffled around a bit for clarity.  Results:          Less possible confusion when dealing with the various modes of querying couchbase (view  spatial view  N1QL).  Change Id: I47c45c4456800886b794634a3e01c228c7199381 Reviewed on: http://review.couchbase.org/54809 Tested by: Simon Baslé <simon@couchbase.com> Reviewed by: Michael Nitschinger <michael.nitschinger@couchbase.com> ",rename
Renamed CharacterParser is to CharacterParser of for consistency.,rename
[MSUREFIRE 23] restructure to allow different test suites to behave identically. Also improved class loader separation by not merging surefire and test classloaders  and renamed  battery  references to  test set . TestNG support is currently commented out  and exception handling needs a cleanup  which will follow.  git svn id: https://svn.apache.org/repos/asf/maven/surefire/branches/surefire testng@382683 13f79535 47bb 0310 9956 ffa450edef68,rename
"Renamed """"tunnel"""" connection property to """"jumpstation"""".    Fixed OverthereOnWindowsItest by opening the tunnels in @BeforeClass and closing them in @AfterClass. ",rename
Renamed methods in EventService to findXXX(),rename
Javadocs; renamed some methods (no functional changes),rename
"Rename """"nabla"""" in """"div"""". ",rename
HV 1245 Rename containerElementIndex to typeArgumentIndex,rename
renamed constants in hive tests for better clarity.  resolved intermittent failures due to use of incorrect constants. updated hadoop all.sh.template to include configuration steps for 1.x and CDH versions added a script to make testing easier.,rename
Renamed test methods to conform with test guidelines,rename
Renamed exporting classes.  18  85,rename
rename some classes and variables to new  interpolator  name,rename
Rename boolean  isHasXXX  methods to  hasXXX .  This exposes them as  XXX  attributes in XPath.  git svn id: https://pmd.svn.sourceforge.net/svnroot/pmd/trunk@6708 51baf565 9d33 0410 a72c fc3788e3496d,rename
Rename some methods in TestCaseWithTestFile,rename
Rename test file to be more general,rename
Revert RF 12738: Renamed jQueryObject to jQuery,rename
6: Renamed PackageOffer to PackageExportDescription,rename
Rename PeerFilter to PeerMapFilter,rename
continued rename,rename
removed some dummy code  which is no longer required. Renamed an unittest class.,rename
renamed methods,rename
Renamed Topic.interfaceControl and TopicViews.interfaceControl to mode.,rename
Rename the round robin selection of the name server to rotateServers,rename
Renamed equality method on comparators  git svn id: https://svn.ebi.ac.uk/steinbeck research/CheMet/trunk@1704 47e25a5e c6eb 4c94 8020 4a4a81ee2334,rename
Rename clear to close.  git svn id: https://svn.apache.org/repos/asf/incubator/hama/trunk@703093 13f79535 47bb 0310 9956 ffa450edef68,rename
Renamed distinctall  > distinct,rename
Renamet to  preMatching,rename
Rename getSourceString()   > getSourceAsString() + don t use parser,rename
Rename CharSequence variant of JsonStringEncoder.quoteAsString,rename
Renamed a test in ArchiveIndexesListerTest to make more sense.,rename
[refactor]: rename method,rename
Renamed compatibleType()  > classCompatibleWith(),rename
"Tiny changes to ResultsTable  More checking for table being disposed  this time around creating the combo box.  Change setColumnDestText to take no arguments  and get the column itself.  Change updateUserPreferences to not take the UserPreferences  since its a singleton and we already have it as a static variable.  There were two signatures for setCellImage: one took an image  the other took a status.  Rename the one that takes a status  to """"setCellStatus"""".  Add javadoc to three methods. ",rename
Added custom Firefly rename settings  renamed Season.setEpisode() to addEpisode()  fixed punctuation removal and added unit test,rename
renamed all parts from membase to couchbase,rename
Renamed keystore and truststore methods,rename
"QualifiedName"""" s are now also marked as generated during ASTConverter phase (just like """"SimpleName"""" s) This fixes """"Rename"""" when inner types are used (for both the main type and the inner type) ",rename
1. Rename some classes name. Change the phrase  AndroidService  to  Android . It has the following changes:    MqttServiceAndroidClient  > MqttAndroidClient    MqttServiceClient  > MqttConnection    MqttDeliveryTokenAndroidService  > MqttDeliveryTokenAndroid    MqttTokenAndroidService  > MqttDeliveryTokenAndroid  2. Add close method.  3. Merge latest code with Android Wakelock and Java Paho ping mechanism  Change Id: I3b6dc6cbee6bd51c659339e11da89d588b198095 Signed off by: pleong <wtleong@cn.ibm.com>,rename
Rename tests around GraphSONUtility,rename
simple.Channel: use PublisherDetails for availableOn  rename groups to channelGroups,rename
renamed AsyncState to BlockingVariables  and AsyncCondition to ConditionEvaluator added class BlockingVariable,rename
Rename NestedEditorInfo to EditorInfo  The long name is getting unwieldy and preferably EditorInfo should get passed instead of IEditorPart so the rename clarifies what it s for.,rename
SGF 761   Refactor Function annotation configuration to be smarter in resolving Apache Geode objects on startup.  Renames OnMember  OnMembers  OnRegion  OnServer and OnServers *ExecutionBeanDefinitionBuilder classes to *FunctionExecutionBeanDefinitionBuilder.,rename
rename some methods in the WorldManagerAPI,rename
PmTable: Renamed getSelectedRow() to getCurrentRowPm(). The name does better match for the related master details context.,rename
Rename MetricType to MetricAttribute  This is a more common terminology for this enumeration and it was introduced earlier in  837.,rename
renamed removeAll()   > reset(),rename
Fixed TSController: advancing items in L/S mode  This was previously ending the item session  which was the wrong behaviour in S mode. The logic now behaves better (suspending the session instead of ending it).  NB: I changed the name of this method to advanceItemLinear() as endItemLinear() is no longer accurate. The corresponding mayEndItemLinear() has been renamed as mayAdvanceItemLinear()  I have added a unit test for this.,rename
"A few EventFrame related tweaks and renamed a """"Gm6"""" class to """"Gm""""  EventFrame  * Key selector now grabs focus when a key event is selected  * Tree is now collapsed when the frame is closed  GmFileReader  * Renamed Gm6FileContext to GmFileContext  EventKeySelector  * Tweaked so that an empty box will not let you add <no key>  git svn id: https://lateralgm.svn.sourceforge.net/svnroot/lateralgm@334 8f422083 7f27 0410 bc82 93e204be8cd2 ",rename
Renamed  execute to  initRepository in AbstractGitMojo  This allows a bit more fine grained access and doesn t suggest that AbstractGitMojo itself does something when executing.  Additionally AbstractGitMojo getHead will now initialize the repository if not already done.,rename
rename Snapshot to Checkpoint,rename
renamed KeyStoreFactoryBean.passphrase to password  This is for consistency with the JDK documentation and system properties.,rename
Rename AndroidRelayConfiguration   > MessageBufferConfiguration  and paraemterize it in the example,rename
switch to positive formulations  i.e. nonneutral  > relevant  also renamed sumCategoryValuates to sumCategoryValuations,rename
Reworked CSV import to support currencies  * re use Extractor + validation logic * show review pages before inserting transactions * moved CSV related code into separate package * renamed UI classes to include  CSV   Issues:  14   295,rename
[case 9923] Corrected order of execution and renamed demote to reject,rename
o Added some comments in the AbstractPollingConnectionlessAcceptor o Renamed the startupWorker() method to startupAcceptor()  git svn id: https://svn.apache.org/repos/asf/mina/trunk@751472 13f79535 47bb 0310 9956 ffa450edef68,rename
renamed a poorly named method,rename
RF QCADOOMES 1160 rename countMachine and countRealized,rename
METAGEN 54 Renamed test and fixed typo in test method,rename
Renamed throwing to matches,rename
Moved parteTestCase to a child of ConnectorTestCase and renamed mrthod lookupMessageProcessorConstruct to lookupMessageProcessor.,rename
"Dev  Dheeru |  5 | Renamed resources to """"activate provider"""" theme as these resources are non reusable for reset password ",rename
Rename resourceDao to dao in GenericServiceImpl,rename
Update translator (rename...),rename
rename wrongly named unit test,rename
Rename: noThrow  > acceptUnknownOption.,rename
Rename Password to RemotePassword and Username to RemoteUsername (to more closely match REST API names).,rename
Don t create rename string if we re not renaming.  Rearrange things slightly to avoid doing unnecessary work.  Document variable baseForRename.,rename
Fix RecoveryCoordinatorTest  Use new instance of RecoveryCoordinator in each test. Otherwise  the timestamp of the next call to isTooSoon() could happen well after the backoff threshold on slow machines (such as small nodes on Cloudbees Jenkins)  causing false test failures.  This also renames and refines the individual tests.,rename
Added regimen manager to define standard regimens and ARV drugs * Added Kenya_EMR_Regimens.xml where regimens are defined * Added loading of XML to module startup * Added display of definitions version on admin home page * Updated some ART unit tests to use ARV drugs included in the new list * Renamed RegChange to DrugOrderChange for clarity * Deleted RegimenComponent.java which wasn t being used,rename
method rename,rename
Renamed signature parsing methods,rename
JCBC 665: n1ql dp4 Refactor Query into Statement  Motivation            In dp4 queries are not just a string from the query language  but they can have additional parameters. The current implementation just assume there s no other relevant parameter. We need to introduce the concept of a Statement (the current Query dsl) and allow to construct queries with either just a Statement  or with parameters (positional or named).  Modifications               What follows are BREAKING CHANGES:  Refactored Query class into Statement class (including in tests  vars  javadoc). As a side effect  fixed the references to Query in javadoc of SpatialViewQuery and ViewQuery.  The Query interface now represents a complete N1QL dp4 query  that is a Statement and some other params. Such queries are sent to the server by transforming them into Json (the N1QL server accepts Json body in POST for queries). Three implementations have been added: SimpleQuery replaces the use of Query in previous versions  while ParametrizedQuery and PreparedQuery allow to fill values for positional or named parameters in a Statement.  Previous methods query(String s) on buckets have been removed. Ad hoc querying is still possible by providing a complete json representation of the query  parameters and all included  through the queryRaw method.  The equivalent of previous query(Query q) method is now query(Statement s) as the original Query interface has been renamed to Statement.  GenericQueryRequest has been refactored in core to use factory methods to distinguish between a simple statement and a full json query. The latest is now in use in CouchbaseAsyncBucket.  Added tests for the construction of N1QL json from various Queries.  Result        User now construct Statements using the DSL  that they use in a Query. These conforms better to the dp4 specification of N1QL querying  and will ultimately allow for optional and named parameters to be used.  Change Id: I148fb2694bffe0e4235f5a151186037e92713656 Reviewed on: http://review.couchbase.org/44595 Tested by: Simon Baslé <simon@couchbase.com> Reviewed by: Michael Nitschinger <michael.nitschinger@couchbase.com>,rename
Renamed putObject (and retrieve  update...) methods in cache facade. Also some order in unit tests,rename
Rename method configureMetricsReporters to configureReporters,rename
Resolved issue: DIRMINA 504 (Allow ProtocolEncoder to generate non IoBuffer objects) * Changed ProtocolEncoderOutput.write() to accept an Object as a parameter * Renamed ProtocolEncoderOutput.getBufferQueue() to getEncodedMessageQueue()    git svn id: https://svn.apache.org/repos/asf/mina/trunk@607166 13f79535 47bb 0310 9956 ffa450edef68,rename
Review: rename getProjectListGeneral to getJobs and minor style changes,rename
"Rename model field """"hasvisible"""" to """"visible"""" ",rename
Rename castBuffer to numberBuffer to clarify the usage of this buffer,rename
rename bigFileMode to bigNumberMode.  COMPRESS 182  git svn id: https://svn.apache.org/repos/asf/commons/proper/compress/trunk@1299151 13f79535 47bb 0310 9956 ffa450edef68,rename
Made AssetsController Tests run on Windows again. Renamed an AssetsController Test to reflect correct behavior again. Marked old AssetController method as obsolete.,rename
barc: Rename to BARCDirectory.setTargetLength; easier in ruby,rename
Test rename,rename
Rename list to read,rename
Cleanup MavenUpdateRequest API class  Added some javadoc and renamed parameters to better describe what they do.  events are fired by maven project import. Maven project import synchronously create project facades  so background refresh is redundant. Removed  force attribute and made related changes to DependencyResolutionContext and ProjectRegistryRefreshJob. Check for facade.isStale in resource change listener instead.  Signed off by: Igor Fedorenko <igor@ifedorenko.com>,rename
renamed simpletouchevent into tapevent,rename
Rename classes to reveal their meaning.  They all just convert properties specific to trigger type.,rename
Rename AtomicContextFactory.newContext to AtomicContextFactory.newAtomicContext,rename
o Added sime javadoc o Renamed the processSessions method to processConnection  as it s really what it does. o Renamed the connectionRequest() method to getConnectionRequest() for clarity sake o Removed useless Assert.  o Fixed the getSlice(int  int) method  git svn id: https://svn.apache.org/repos/asf/mina/trunk@706280 13f79535 47bb 0310 9956 ffa450edef68,rename
"Renamed """"animation"""" to """"transition""""  because that is what it actually is.",rename
remove non filled bar chart style  rename some methods,rename
6: Renamed AccessModifier to AccessRestriction,rename
"implemented dynamic class loading in unit tests/Rhino by forking between Rhino and Browser code in StandardClassLoader.loadScript(). renamed JooRuntimeTestCase.loadClass into import_ which simply calls joo.classLoader._import which  in turn  will end up in StandardClassLoader.loadScript() calling JooRuntimeTestCase.Global.joo__loadScript(). now the TestCatch test also works wihtout loading all the dependant classes...  [git p4: depot paths   """"//coremedia/jangaroo/"""": change   179441] ",rename
o Added the logic to protect the writeQueue against concurrent modifications while writing the messages o Added some code to handle the future SSL processing (not yet implemented) o Renamed the session.getWriteQueue() to session.acquireWriteQueue() o Added a session.releaseWriteQueue() method  git svn id: https://svn.apache.org/repos/asf/mina/trunk@1210888 13f79535 47bb 0310 9956 ffa450edef68,rename
rename variable and method,rename
rename,rename
Renamed capture details view to acquisition details view; some timeline chainges.,rename
Rename Rrc2617Credential to HttpAuthenticationCredential * (multiple)     use more familiar name for HTTP authentication,rename
rename simplifyText to coalesceText  and make it optionally descend.,rename
Shruthi |  0 | Renamed ProvidedTreatment to Treatment,rename
Rename VIA to PIA  Preparing to create a PIA interface and one or more parallel IO device implementations.,rename
Renamed constants to follow Java standards.  Removed catch Exception block.   git svn id: https://svn.apache.org/repos/asf/jakarta/commons/proper/validator/trunk@139950 13f79535 47bb 0310 9956 ffa450edef68,rename
renamed AjaxSeleniumContext.isContextInitialized to .isInitialized(),rename
Renamed Process attributes to remove Type suffix and updated dependent classes,rename
add uuid array support (rename ArrayElementBuilder to ArrayAssistant),rename
Lifecycle related changes * renamed the stages (StartCluster  > ServiceStart  *Kill*  > *Stop*) and updates properties according to that * renamed (Start|Stop)*  > *(Start|Stop) * added lifecycle listeners  registered on SlaveState,rename
Renamed RequestResponseMapping to StubMapping,rename
API Change:  Rename Command.execute to Command.perform fix  105,rename
Better Naming  Continuing improvements around the naems of concepts in Moo:   renamed  getOriginExpression()  to  getSourcePropertyExpression()  to match the updated usage.   renamed  translation  to  source  on @CollectionProperty to match @Property   renamed  itemTranslation  to  itemClass  on @CollectionProperty. It s more accurate and makes way for item source property expressions.  Related to  82.,rename
ParseTree: rename length to numLeaves  It s clearer that way. Also  added numNodes method to count all the internal nodes of a parse tree.,rename
Moved GaugeModelEvent to GaugeModel and StyleModelEvent to StyleModel. In addition I ve added a new RadialRange with a range of 360 degrees. Also postsVisible was renamed to knobsVisible.,rename
Renamed some PublishedPort members and changed the documentation a bit.,rename
misc: rm redundant cast  rename method  git svn id: https://pmd.svn.sourceforge.net/svnroot/pmd/trunk@7641 51baf565 9d33 0410 a72c fc3788e3496d,rename
Renamed injectStatics() to requestStaticInjection().  git svn id: https://google guice.googlecode.com/svn/trunk@38 d779f126 a31b 0410 b53b 1d3aecad763e,rename
Renamed methods for consistency,rename
Renamed Start/Stop/Reset to Play/Stop/Rewind.,rename
Updates GoogleAnalytics to reflect the recent Measurement Protocol update: Renames appview to screenview  adds Application ID to the request.  Change Id: Ie7732bfdd05a6e8a3be7fdce2e8a6dffcf313a94,rename
rttm: rename  rollback  to more accurate  retry  where appropriate.,rename
rename webbeans  > weld,rename
ARQGRA 234: renamed SizzleJSPageExtension to JQueryPageExtension,rename
Rename level conversion test method (log4j),rename
Ashish Sush| 1742|added csv builder  renamed controller method  refactored callback request to retrn enum value of operator instead of string.,rename
EXOJCR 574: rename DBCreator to DBScriptExecutor,rename
Renamed column to be more sql friendly,rename
Add interval to investment plan (plus fixes)  * add interval to create transactions monthly or every x months * ensure day of month is always the same (even if end of month) * rename transaction costs to fees,rename
Docs for EL resolution and tidy up  * Add package info * Rename classes * Update javadoc,rename
Refactor generic rest attribute code     Removed the property setter/getter annotations from generic methods     Renamed base methods so that name collisions won t happen     core 99,rename
Rename Mutator.superDelete to Mutator.subDelete to be consistent with the rest of the API,rename
Added convenience methods to AbstractVerticle and renamed LoaderHelper back to ServiceHelper,rename
Update creation of ResultSet proxy    Use factory(`ResultSetProxyLogicFactory`) to create logic for resultset proxy   Rename existing proxy logic to `RepeatableReadResultSetProxyLogic`   Add `SimpleResultSetProxyLogic`   Add `ProxyConfig` class to represent all proxy related configurations     (datasource name  listeners  proxy factory  connection id manager)   `ProxyDataSourceBuilder proxyResultSet` takes `ResultSetProxyLogicFactory`,rename
Collection Item Expressions  Added more support for translation of items with collections by:   Renamed existing  itemTranslation  to  itemClass  on CollectionProperty   Added new  itemExpression  attribute on @CollectionProperty.   Added initial support for translation to value types  starting with java.lang.String.   Added support for item expressions on getEachTranslation()   Used SourceProperty to apply the item expression  so it can be used with or without MVEL.   Tests for collection translation using itemClass and itemClass + itemExpression.  Closes  90   82.,rename
Rename Änderung.java to PojoWithUmlaut.java,rename
Rename getProtocol to getMechanism,rename
Spotted an unclosed zk connection + rename isUseSolrCloud() to isSolrCloudEnabled().,rename
Rename resolveInvoker  > resolveCommand and make  > create,rename
Renamed SSL to TLS  And moved  and updated docs.,rename
Add the HistogramDataPointRPC class so users can write histogram data to TSD over HTTP or telnet style socket with base64 encoding of the raw byte data. Still need to add maps for users coming from platforms other than Java. Rename the Histogram manager to HistogramCodecManager. Modify the histo methods to allow them to include or exclude the ID depending on if we re serializing for storage or consumption.  Signed off by: Chris Larsen <clarsen@yahoo inc.com>,rename
Use ArtifactRepositoryFactory to construct alternate local repository instead of directly invoke the DefaultLocalRepostory constructor.     Rename alternateLocalRepository to localRepositoryDirectory for clarity and configuration naming convention  git svn id: https://svn.apache.org/repos/asf/maven/plugins/trunk@895269 13f79535 47bb 0310 9956 ffa450edef68,rename
Renamed interface methods to make more consistent.,rename
rename wrong methods,rename
Renamed getCurrentRow... to getMasterRow...,rename
rename Attributes.coerceAttributes() to Attributes.updateAttributes(),rename
Rename RequestPathMapping getActionMethodMetadata,rename
"Rename """"to_integer"""" to """"round"""".  This fixes  248. ",rename
code formatting  reordering  rename etc.,rename
fixed null exceptions in the unbalanced assignment inspection. refactored the annotator to a visitor  and have begun making sure the correct accept methods are getting added    HG   rename : src/lang/psi/impl/expressions/LuaDeclarationExpression.java  > src/lang/psi/expressions/LuaDeclarationExpression.java,rename
Rename isTopLevel to isTopLevelOnly,rename
Rename protocol context methods,rename
reworked extension mechanism renamed/moved some specs moved configuraiton of spock maven plugin into master POM,rename
Rename tenantId  > tenantName  I found it strange to use the combo (tenantId  tableName)  so made tenantId also into tenantName. This commit also includes RepositoryTableManager  > TableManager renames which should have been in the previous commit  sorry.,rename
Resolved issue: DIRMINA 289 (Change MINA to create heap buffers by default.) * Renamed ByteBuffer.useDirectBuffers to preferDirectBuffers * ByteBuffer.allocate(int) now can fall back to direct buffer if the preferred buffer type is  heap   git svn id: https://svn.apache.org/repos/asf/directory/trunks/mina@465125 13f79535 47bb 0310 9956 ffa450edef68,rename
renamed getRootSite() to getTopLevelSite() since this method has nothing to do with reactor execution root  git svn id: https://svn.apache.org/repos/asf/maven/plugins/trunk@1480441 13f79535 47bb 0310 9956 ffa450edef68,rename
Renamed startAt and endAt to startsAt and endsAt in Project.java.  ENGINE 780,rename
1757: Rename test methods  Signed off by: Jonas Berlin <jonas.berlin@nitorcreations.com>,rename
BVAL 64 rename getValidatedProperties to getPropertiesWithConstraints  git svn id: https://svn.jboss.org/repos/hibernate/validator/trunk@15491 1b8cb986 b30d 0410 93ca fae66ebed9b2,rename
Renamed base class Model into ModelElement and its subclasses as FieldElement  MethodElement  ClassElement,rename
API Change:  Rename Command.execute to Command.perform fix  105,rename
HV 1245 Rename TYPE_ARGUMENT to CONTAINER_ELEMENT,rename
XmlNode: rename localName  > qtiClassName,rename
BISERVER 5818   Database Tables Data Source: In Modeler  need ability to add same column twice  rename each with different names  and set different aggregations. modified the AvailableFields object to contain IPhysicalColumns rather than LogicalColumns. now the conversion to LogicalColumn happens when measures  levels  or fields are added to the model or when the workspace is populated from a Domain object.,rename
Modify Tree.storeTree() to write only the tree definition and return a Boolean Modify TreeBuilder.processTimeseriesMeta() to call the collision and not matched flush calls on a tree instead of storeTree() since processing will never modify a tree s metadata. Add copy constructor to Tree Rework TreeBuilder.processAllTrees() to cache the tree definitions in a thread  safe manner so we keep scanner calls down. It will refresh the list every 5 minutes when processing real time TSMeta entries Remove spurious System.out.println from TestTree.java Add root branch cache to TreeBuilder to speed up the real time tree generation calls so that they don t have to fetch the root for every call. Renamed TreeBuilder.loadRoot to loadOrInitializeRoot()  made it a static call  modified it to load or set the cache and return the root branch  Signed off by: Chris Larsen <clarsen@euphoriaaudio.com>,rename
Renamed KeyParser.registerAction() to KeyParser.registerIdeaAction(),rename
Renamed Condition to Supplier,rename
renamed async Vertx static factory method to vertxAsync and provided tests,rename
Rename RequestPathMapping to RouteRegistry  46,rename
Using a new  type  of deobfuscating which makes updating go 10 times faster. (using jarjar with rule file to rename class files and then deobfuscate)  Changes:    moved to new  type  of deobfuscating.    changed the jar requirement from minecraft_server.jar to minecraft_servero.jar    removed all code related to reserve list(was unused anyway).    cleaned up some other stuff.    updated minecraft.sql to match latest needed sql.    removed reserve list from update1.sql,rename
Rename Node.getAsXml() to Node.getAsDocument()  which is a more accurate naming.  git svn id: https://pmd.svn.sourceforge.net/svnroot/pmd/trunk@6474 51baf565 9d33 0410 a72c fc3788e3496d,rename
Merge the virtualBiomes and ReplaceToBiomeName features into one  To do this  I had to rewrite a lot of code  which is why this task  that sounds simple  was actually quite complicated.  We want ReplaceToBiomeName to change the savedId. This setting is read after the LocalBiome instance was created and indexed. Postponing the creation of the LocalBiome instance also wasn t an option  as the BiomeConfig requires it to create the default settings.  The solution to this was to split LocalBiome into two classes: one  still called LocalBiome  holds name and id of the biome  and one called MojangSettings holds the default settings. The MojangSettings instance is created before the biome is loaded  the LocalBiome instance is created after.  BiomeConfigs don t depend on the LocalBiome instance anymore  it s now the other way round: LocalBiome holds a BiomeConfig instance. Most of the code now looks nicer thanks to this change. Unfortunately  the biome generation code didn t really improve  as it does a lot of id based lookups.  Custom biomes don t need a MojangSettings instance to be created  as no settings from Mojang are used for custom biomes.  The registry in StandardBiomeFactory has been removed  it s now DefaultBiome s job to create it. StandardBiomeFactory has been renamed to StandardBiomeTemplate  and StandardMinecraftBiomes has been renamed MinecraftBiomeTemplates  a class that holds subclasses of MinecraftBiomeTemplate.  The concept of NullBiome s is gone. Now that LocalBiome instances are no longer required to create BiomeConfigs  the settings can be checked without creating a nonoperational LocalBiome implementation.,rename
Rename all the things!,rename
Renamed module about to team,rename
FACES 2313 Rename responsive attribute of alloy:inputDate and alloy:inputTime to nativeWhenMobile (code review),rename
Redid tile system and more work on Room s Tile pane  Tile  * Replaced ints with Points and Dimension  * Handles own ID  rather than RoomFrame  * Added autoUpdate field for efficiently modifying several fields before firing an update  Point renamed to PathPoint to easily distinguish between the two  * Updated Path and PathFrame to reflect changes  Instance: Replaced x y with Point  Listener: Fixed bug where clicking Load and cancelling opened a file anyways  RoomEditor  * Updated to reflect changes to Instance and Tile  * Now supports TileSelector and Tile Add tab  * RoomComponent now uses Rectangle instead of ints  GmFileReader and GmFileWriter updated re Instance and Tile  Room:  * Temporarily removed addTile method  since Tile now handles its own id  * Updated to reflect changes to Instance and Tile  RoomFrame  * Renamed some fields  * Updated to reflect changes to Instance and Tile  * Tile add tab now more usable  * Some tweaks to Tile Edit tab   git svn id: https://lateralgm.svn.sourceforge.net/svnroot/lateralgm@299 8f422083 7f27 0410 bc82 93e204be8cd2,rename
Refactoring: Renamed Query to QueryParams + reduced string based comparators.,rename
changed JSONLDSerializers to RDFParsers to better represent their purpose. Added helper utils for RDFParsers to use for generating the internal RDF format. renamed existing Serializers to RDFParsers and implemented them as per the new requirements,rename
rename linux to unix where appropriate,rename
Renamed group method selfadj() to adjAssign().,rename
Renamed deleteMappings to removeMappings and their static equivalents for consistency,rename
rename variable,rename
Refactored remaining Services. Added 3.7 APIs  1. Updated code based on the refactoring check in review comments Main changes include:   Added ApiType constructors   Changed account specific ApiTypes into generic ones   Renamed: operation  > action   ServicesHelper changes:   Replaced Object with generic types.  This eliminates the need for casting as well as for Suppressing warnings in Service classes Implemented other suggestions: static map replaces ‘if’ statements for type collections  2. Refactored all Services to use ApiDefintion and ServiceHelper 3. Fixed test cases as needed 4. Added DemoTestIntelligenceService  5. Implemented wrappers for Mambu 3.7 API additions: 5.1. Updated Maven’s pom to build Mambu APIs Java 3.7 bin.jar using mambu models V3.7.jar 5.2 MBU 4607   As a Developer  I d like to work with Custom Views a) added getting Custom Views API wrapper b) added filtering Clients/Groups/Loans/Savings by custom view ID 5.3  MBU 5946   As a Developer  I d like to filter lists on centres via API Updated wrappers to filter by centreId for Clients/Groups/Loans/Savings Services,rename
[issue:0001893] Use an other solution with the reflection api instead of the createCopy method and rename the method getDisplayClass to getDisplay,rename
Resolves Spec Issue 233: Removed key parameter from ExpiryPolicy interface (and renamed methods as entries  keys and values are no longer provided),rename
Fix up some string assembly   the stringbuilder isn t buying us anything  and rename wrap() to quote(),rename
Rename Bench methods,rename
Renamed UpdateAssCommand  > AssMetadataTemplate,rename
renamed bridge method getRelationTo to getRelationBetween,rename
Renamed SendFileRegion to FileRegion and renamed FileRegion.getBytesWritten() to getWrittenBytes() per Trustins comments in DIRMINA 218.  git svn id: https://svn.apache.org/repos/asf/mina/trunk@561033 13f79535 47bb 0310 9956 ffa450edef68,rename
Rename method to getMoveToDirectory  ... and add a Javadoc comment which  among other things  explains why.  Make it public to access from tests.,rename
rename variables,rename
Rename ParmeterHolder getParams() to getSetParams(),rename
Renamed IMetaData to IMetadata (Pete wot made me do it),rename
Renames P2D to C2D (Cartesian2D) for consistency.,rename
Align System  > RuntimeMetricEvent rename with core.  Change Id: I781576e38012b1a104d90a3c58574ab86bd0efdb Reviewed on: http://review.couchbase.org/54575 Tested by: Michael Nitschinger <michael.nitschinger@couchbase.com> Reviewed by: Simon Baslé <simon@couchbase.com>,rename
renamed flag1 to prepareFlag,rename
PAXRUNNER 222 Rename options useOriginalUrls to keepOriginalUrls  git svn id: https://scm.ops4j.org/repos/ops4j/projects/pax/runner@14565 9b982a3c 3ae5 0310 a4bc d9a3335569bd,rename
* Renamed anonymous address to local address * Fixed infinite loop * A lock object is created inside the VmPipeSessionImpl now   git svn id: https://svn.apache.org/repos/asf/mina/trunk@525726 13f79535 47bb 0310 9956 ffa450edef68,rename
jcopter common wca: renamed InvokeNode.getImplementingMethod  added methods to WCETProcessorModel to get cache miss costs for invoke sites and returns  new method cache analysis  refactored ExecCountAnalysis  added some helper methods to common,rename
Renamed sessionHash  > sessionToken,rename
Minor rename,rename
https://bugs.eclipse.org/bugs/show_bug.cgi?id 366194   handle the file rename problem with a workspace synchronizer,rename
Renamed transformer s java class attribute to the more intuitive target class. Split up the ExampleTransform to make it easier to test the new logic. Added a test to ensure transformation to POJOs is working correctly.,rename
renamed MockDetector methods  added spec,rename
jvm test: rename getName() to toString(),rename
minor rename,rename
Renamed HashAlgo to DigestAlgorithm,rename
renamed test programs,rename
Vishal  Vishnu  497 Renamed Patient method,rename
Renamed getOutputWindow to createOutputView for clarity,rename
Renamed Searcher.searchEditText() to searchForEditTextWithTimeout().,rename
renamed method,rename
Rename ignore() to ignoreCheck()  based on post submission API Review discussion                Created by MOE: https://github.com/google/moe MOE_MIGRATED_REVID 155520735,rename
Fix dependency on client; Fix imports;  Start fields in SingleWorld with lowercase (as @oloflarsson said  it is a bad practise to start anything that isn t a class with an uppercase letter); Complete rename LocalBiome.setCustom to LocalBiome.setVisuals,rename
Adds the reportdata and reportclient projects. The ReportClient is the client for DuraReport (similar to StoreClient for DuraStore)  it includes an example client as well. The reportdata project contains the java beans and serializers which are used by both DuraReport and the ReportClient to handle the report metrics information. Renames the data collection classes in DuraReport to indicate their use in data collection  as opposed to the new data storage classes in ReportData.  Note: If you have existing storage reports in your primary provider (in x duracloud admin)  you will need to clear those out for DuraReport to work properly.  git svn id: https://svn.duraspace.org/duracloud/trunk@437 1005ed41 97cd 4a8f 848c be5b5fe45bcb,rename
Rename RequestContext getRequestedPath to  getRequestPath,rename
Renamed ConditionSpecification to Condition,rename
renamed TextSplitter.weight to .toWords,rename
renamend featuredetection into os detection,rename
Factor out more netty configuration specifics into the config builders  This change mainly adds control over number of boss and worker threads for the Netty channel factories used by the Netty client and server thread pools.  It also renames NettyConfigBuilder to NettyServerConfigBuilder (to contrast with NettyClientConfigBuilder)  and turns the config builders into actual builders (they were just used directly before).,rename
Rename Registration  > MessageConsumer  Signed off by: Julien Viet <julien@julienviet.com>,rename
Updates based on code review:  * added a comment why we look at the class loader of `Object` * renamed internal method name to reflect it s new behavior  Signed off by: Paulo Lopes <paulo@mlopes.net>,rename
getCopyOfPropertyMap was renamed as getCopyOfContextMap in SLF4J 1.5.1,rename
o renamed addTag  > appendTag,rename
BVAL 91 rename constraint related classes to make them more readable. Check the spec. Applied to the RI as well  git svn id: https://svn.jboss.org/repos/hibernate/validator/trunk@15818 1b8cb986 b30d 0410 93ca fae66ebed9b2,rename
"Do rename test with just basename.  Use getRenamedBasename for testing.  Make expectation be solely basename  without suffix.  Don t check suffix  just basename.  In FileEpisodeTest change the expected replacement to not include the filename suffix (e.g.  instead of expecting the filename to be """"Modern Family S05E12 Under Pressure.mp4""""  expect the basename to be """"Modern Family S05E12 Under Pressure"""")  and change the framework to return the basename to match. ",rename
Implemented some Tabs in GameSettingFrame  fixed loading of resources from jar  added event replace  + ColorSelect  * Basic colour choose panel  IndexButtonGroup  * made it possible to have decimal indexed groups  rather than bitwise  * Added basic ActionListener functionality  Listener  * Added a line to the save as code to commit the changes of LGM.gameSet if it is open  Gm6File  * Corrected default icon code to work from within a jar  * Changed colorOutsideRoom to Color rather than int  Gm6FileReader/Writer  * modified to read/write colorOutsideRoom correctly  GmStreamDecoder  * Added some alternate constructors  GmStreamEncoder  * Added some alternate constructors  * renamed writei to write4  * added write2 and writeStr1 functions  Prefs  * Added String[] defaultLibs for use when in a jar (dynamic detection is planned for 1.7)  Util  * Modified getValidImage() to display error messages so that the method doesn t throw Exceptions  * moved the addDim method to here and removed the convenience version to make it thread safe  Constant  * overrode equals and hashCode (hashCode is just because of CheckStyle)  * made Comparable for sorting  * Added a copy function  LibManager  * Corrected autoLoad to work from within a jar  BackgroundFrame  * modified to use the new version of addDim  * removed try catch in image loading code  EventFrame  * modified to use the new version of addDim  * small correction to linked frame selector (frame is now selected as well as being put on top)  GameSettingFrame  * Implemented Resolution  Loading  and Constants  tabs   All fully functional  * Modified Other tab to use IndexButtonGroup  * Modified Graphics tab  * * Added scale factor field  * * Changed the background colour selector to a ColorSelect component  GmObjectFrame  * Implemented DnD event replacing  ResourceFrame  * Removed the addDim method  SpriteFrame  * modified to use the new version of addDim  * removed try catch in image loading code  TimelineFrame  * made FRAME_ICON final  checkstyle.xml  * changed to ignore lines with trailing line comments  git svn id: https://lateralgm.svn.sourceforge.net/svnroot/lateralgm@122 8f422083 7f27 0410 bc82 93e204be8cd2,rename
Renamed method around binding serialization for console strings.,rename
Ashish Sharvani |  2025 | Renamed api to changeSubscription from changeSchedule.,rename
Rename methods in JSSet,rename
Renamed Quantized to Sampling and Summarized to Summarizable.,rename
Just the stubs changes    HG   branch : idea12 rename : src/lang/psi/types/LuaPrimativeType.java  > src/lang/psi/types/LuaPrimitiveType.java rename : src/lang/psi/types/LuaPrimativeTypeImpl.java  > src/lang/psi/types/LuaPrimitiveTypeImpl.java,rename
renamed assumeJigsaw() to assumeJava9(),rename
Rename methods,rename
Renames methods on Encoder  This also moves the encodeQueryParameters method to the Encoder class.,rename
HV 1691 Rename PathImpl getPathWithoutLeafNode to createCopyWithoutLeafNode  And make it static to be more consistent with createCopy().,rename
Renamed MDL to Mol  git svn id: https://svn.ebi.ac.uk/steinbeck research/CheMet/trunk@772 47e25a5e c6eb 4c94 8020 4a4a81ee2334,rename
Renamed ContainerCreationException to CreationException (shorter). Renamed Factory to Locator.  git svn id: https://google guice.googlecode.com/svn/trunk@164 d779f126 a31b 0410 b53b 1d3aecad763e,rename
using Generics on interface BulkExecutor and renamed classes and variables to be consistent with usage,rename
common: renamed Signature to MemberID  some performance tweaks for hashes and toString,rename
Added service provider (OLS or BioPortal) as a comment on the OntologyTerm  renamed method setOntologySourceAccession to setOntologyTermAccession  removed code that extracted everything before a  :  from the ontology term accession  removed method removeRedundantSearchResults from the OntologySelectionTool (wasn t eliminating duplicates if accession numbers were different for the same term  now we show the service provider).,rename
Renamed execute methods. Added executeUpdate method. Added transaction handling.,rename
renamed ssl() to upgradeToSsl(),rename
* IToolLocatorService is now fully integrated into the PreferencePage  * the user can now choose between the shipped binary and a user defined version  * moved the prefpage stuff to the new packages  * renamed the prefpages,rename
ENUNCIATE 343 Renamed JSON specific overloads of EnunciateFreemarkerModel.add to avoid accidental calls to add(TypeDefinition)  * add(JsonTypeDefinition)  > addJsonType * add(JsonRootElementDeclaration)  > addJsonRootElement  git svn id: https://svn.codehaus.org/enunciate/trunk/enunciate@771 c2b6a248 b21b 0410 9d80 82131e002806,rename
Rename getNodeXXX() to getXXX() where Node is clear  add Prio*,rename
Renamed pad() to rightJustify(),rename
FACES 1894 Add general utilities for Liferay Faces Alloy Components (Renamed widgetVar to liferayKey and Widget to LiferayComponent),rename
Wrote some javadoc for GenePool and renamed size() to getSize(),rename
move sendPDULength  receivePDULength  maxOpsInvoked  maxOpsPerformed  packPDV from ApplicationEntity to Connection replace Connection.dimseRSPTimeout by cstoreRSPTimeout  cfindRSPTimeout  cechoRSPTimeout  neventReportRSPTimeout  ngetRSPTimeout  nsetRSPTimeout  nactionRSPTimeout  ncreateRSPTimeout  ndeleteRSPTimeout rename Association.nevent(..) to neventReport(..),rename
something is broken  but i need to take a break    HG   branch : idea11 rename : src/KahLuaInterpreterWindowFactory.java  > src/kahlua/KahLuaInterpreterWindowFactory.java rename : src/KahluaInterpreter.java  > src/kahlua/KahluaInterpreter.java rename : src/lang/Inferenceable.java  > src/lang/InferenceCapable.java rename : src/run/KahluaCommandLineState.java  > src/run/kahlua/KahluaCommandLineState.java rename : src/run/KahluaExecutionResult.java  > src/run/kahlua/KahluaExecutionResult.java rename : src/run/KahluaProcessHandler.java  > src/run/kahlua/KahluaProcessHandler.java rename : src/sdk/KahluaSdk.java  > src/sdk/LuaJSdk.java,rename
Renamed Percentiled to Quantized.  Also renamed its methods from percentiles to quantiles.,rename
Renamed classTag  > qtiClassName (and similar),rename
HV 1529 Rename getPayload() to getConstraintValidatorPayload(),rename
Moved WebEnvironment up a package as it will be used by other tests. Added JavaDoc.    HG   rename : src/test/java/com/opensymphony/sitemesh/webapp/contentfilter/WebEnvironment.java  > src/test/java/com/opensymphony/sitemesh/webapp/WebEnvironment.java,rename
fixed sampling and efficiency problems in creating splits for numeric nodes. Also renamed some things,rename
Rename splitIntsNew() to splitInts(),rename
Renamed mixins to supertypes  For backwards compatibility  the old mixin methods are kept on the Java API but have been deprecated. The REST API still accepts mixins on input  but always returns supertypes on output  this is the only API incompatibility. The mixin system fields (for use in the indexer) are also still supported but log deprecation warnings.,rename
Renamed IoSession.getManager() to IoSession.getService()  git svn id: https://svn.apache.org/repos/asf/directory/trunks/mina@372233 13f79535 47bb 0310 9956 ffa450edef68,rename
NXP 7486: Formant + Rename,rename
method rename to getContextNodeXri,rename
renamed engine model element  added constant model in dtd,rename
Rename tests and add a legacy test.,rename
renamed callRealMethodWithArguments() to callRealMethodWithArgs(),rename
Rename method and fix typo,rename
Changed Effect to Effect1 and renamed e to f,rename
"command: rename execute to createRequest  For consistency the method previously called """"execute"""" has been renamed to """"createRequest"""" since in fact it just returns the OpenStackRequest to be executed.  Signed off by: Federico Simoncelli <fsimonce@redhat.com> ",rename
UI changes  fixed renamer    Added in selected column (need to add select/deselect all control)   Now display full path in rename table where move is enabled   Fixed the renamer where move is enabled,rename
Rename attribute to attributes,rename
Renamed deserialize method,rename
Renamed getEC2HostName to getEC2HostAddress,rename
Lots of fixes of multipolygon issues. I have also added some more javadoc and code comments  renamed methods and variables and removed not very useful logging statements.    WanMil   git svn id: http://svn.mkgmap.org.uk/mkgmap/branches/mp@1486 25d90789 57f7 4ee0 8453 03a3dfeeeb22,rename
rename method,rename
Renamed  upload  for signature files to  install  throughout (github issue  14),rename
rename setters and attributes,rename
"Rename """"field"""" to """"fact.""""  RELNOTES n/a                Created by MOE: https://github.com/google/moe MOE_MIGRATED_REVID 190108589 ",rename
Fixing so that untilPass can be renamed to until,rename
Further improvements to N/I testPart rendering  * Now does testPart feedback * XSLT tidied up a bit more * Renamed XSLT for testPart feedback * Updated Simple NI example a bit more,rename
Rename builder method,rename
Renamed a method.,rename
cmdline checks also for added xprj fileending  renamed methods  added method,rename
Numerous bugfixes  improved XPath rule creation validation Specified default  user specified  priority names Renamed remaining MSGKEY prefixed String keys New reset to default values in rule properties menu (single item for now) New PMD Name column in marker prefs table & new column tooltips for same Commented out original PMD preferences view from main preference tree Repositioned Language min/max & priority fields Updated to latest PMD core  git svn id: https://pmd.svn.sourceforge.net/svnroot/pmd/trunk@7137 51baf565 9d33 0410 a72c fc3788e3496d,rename
"Rework test and rename it to testGetEpisodeTitle.  The old test """"testDownloadAndRename"""" didn t do any renaming (so  ironically  it s being renamed!).  What it does is lookup a show by its name  and once that s done  look up an episode by its season and episode numbers.  It also used to parse a filename to extract those pieces of information  but that was redundant.  That s exactly what the method testParseFileName does  and testParseFileName does it better.  So  eliminate the redundancy.  Instead of having it re parse the file name  we now just use the values already provided for show name  season  and episode.  This allows us to eliminate the filename and the expected resolution from the input  as they are irrelevant for this test. ",rename
Rename Faction Tag to Faction Name. What did tag ever mean? Name makes more sense.,rename
big rename finally happens,rename
TOU  function rename,rename
renamed confusing UsageSummaryDTO fields to show which are daily averages,rename
rename d2rq:contentColumn to d2rq:contentDownloadColumn  testers found the name confusing,rename
renamed Zone.(get|set)CaptureTouchesEnabled to (get|set)CaptureTouches,rename
added SelectPipe and renamed objectFilter step to discard,rename
Rename PipeCommand  > Pipe,rename
Allow a direct write into channel without passing through a select() : o We now pass a WriteRequest through the chain  to store the original message o Removed the lastWriteRequest field in AbstractIoSession : we don t need it anymore. o Renamed the highLevelMessage field to originalMessage in DefaultWriteRequest o Added some setters in DefaultWriteRequest o Added a writeDirect( message ) in IoSession (todo : check if it s a good idea to have it in the interface...) o Fixed the tests accordingly to those changes   git svn id: https://svn.apache.org/repos/asf/mina/mina/trunk@1430287 13f79535 47bb 0310 9956 ffa450edef68,rename
Partially completed changes to kernel package.  Started improving rule validity checking. Added ConstraintKernel interface. Renamed classes in predicateconstraint package. Implemented groundAll() in predicateconstraint package. Implemented LazyMPEInference.,rename
Minor code/comment improvements to service layer  * Renamed some ensure...() methods as assert...() when checking client conditions * Services now indicate whether they use authorisation or not.,rename
Renamed CandidateSessionState  > Status,rename
Renamed IntoPackage testcases and removed duplicate test,rename
Rename ErrorType  > ErrorKind,rename
SC QCADOOMES 933 Renamed metod names.,rename
Renamed method in BucketTransferer.,rename
Renamed GraphSONFactory to GraphSONUtility and renamed methods for better consistency.,rename
"renamed """"Easy*"""" classes to """"Relaxed*"""" to better match the solution",rename
Renamed onEvent to refresh.,rename
method rename,rename
Redesigned scopes to enable custom implementations. Renamed DependencyException to ConfigurationException. Cleaned up Container s interface. It now returns a Factory instead of a direct instance so clients don t have to keep passing in the paramters resulting in a map lookup. Added support for injecting Factory<T> where T is any bound type.  git svn id: https://google guice.googlecode.com/svn/trunk@17 d779f126 a31b 0410 b53b 1d3aecad763e,rename
Rename UpdateThread  > DatabaseThread and rewrite it. Again  there shouldn t be any plugins interfacing with this directly so it should not break anything.,rename
Shruthi  Vishal |  275 | Created RecordAdherenceOperation and renamed transitions,rename
Rename two argument remove() methods in MultiHashMap and MultiIdentityHashMap for java 8.  In java 8 there is a method of the same name but different signature on Map. So these classes don t compile on java 8.  Renamed as removeMapping()  which is the same name used by apache collections which faced a similar problem.  Note that the resulting map tiles are different when using java 7 and java 8. At least some of this appears to be due to different iteration order in maps  but there may be more serious problems   I don t know.  git svn id: http://svn.mkgmap.org.uk/mkgmap/trunk@3314 25d90789 57f7 4ee0 8453 03a3dfeeeb22,rename
* Rename some variables and methods in MemMain.java * Memory plugin interface update * Reverse calls of IMemListeners in MemMain.fireChange(),rename
BVAL 91 rename constraint related classes to make them more readable. Check the spec. Applied to the RI as well  git svn id: https://svn.jboss.org/repos/hibernate/validator/trunk@15817 1b8cb986 b30d 0410 93ca fae66ebed9b2,rename
Rename methods for tool tip settings.,rename
renamed method,rename
[AESH 110] removed old toString and renamed getAsString to toString so it should work better with PrintWriter,rename
renamed vars and methods in Digest,rename
"ExecStopTask class is extracted from Runtask down. protected """"run"""" method is renamed to """"exec"""". ",rename
Rename update.merge(pojo) into update.with(pojo),rename
LibManager now able to load in LGL and LIB files.  * Added loadFile method to delegate and store in list  * Added loadLgl method for LGL workhorse  * Renamed loadLibFile to loadLib for LIB workhorse  * Notice: mask() is statically imported from GmStreamDecoder Default libs in LGL format included in resources.library.lib  * Consider location?  * Not loaded in yet   TimelineFrame still doesn t know location Updated LibAction   merged execCode and execFunction into execInfo (since you can t have both at the same time) Added/updated methods to GmStreamDecoder  * read now handles errors (1 byte)  * read2 and read3 for 2 and 3 byte integers  * readi renamed to read4  * readStr1 for 1 byte preceded strings (instead of 4)  * mask for easier bit masking (statically imported in LibManager) Updated references in Gm6File  git svn id: https://lateralgm.svn.sourceforge.net/svnroot/lateralgm@86 8f422083 7f27 0410 bc82 93e204be8cd2,rename
renamed SamePropertyValuesAs,rename
rename methods,rename
More tenant >repository renames  Further renaming the tenant concept to simple multiple named repositories.,rename
Modified DynamicComposite to handle non dynamic composites as well Renamed DynamicComposite to Composite Fixed typo in DynamicCompositeSerializer Added changed to ComparatorType to let it reused by Composite,rename
Renamed test,rename
Added an OdometerBuilder  modified builder build() methods and renamed the FlipChar to SplitFlap control,rename
renamed ParameterInt to CommandInt,rename
renamed static function,rename
Hearbeat methods renamed,rename
Minor improvement to MathAssess glue  * Unexpected failures in the SnuggleTeX up conversion process are now wrapped in a better Exception  allowing the original input to be logged to help fix SnuggleTeX. * Renamed some methods in the MathAssess packages to use the newer naming conventions that were introduced earlier in the year when tidying things up.,rename
"Rename access restrictions from """"restriction"""" to """"access""""  since restrictions will be something else at some point.    git svn id: http://svn.mkgmap.org.uk/mkgmap/branches/nod@767 25d90789 57f7 4ee0 8453 03a3dfeeeb22 ",rename
Renamed methods.,rename
Added pesto solr module. Renamed view resolver to couchdb view.,rename
[refactor]: rename WechatAppService to WechatSmallAppService,rename
[refactor]: rename method fireReceiveMessage to onReceivingMessage,rename
Rename IPSEC PSK generation to reflect the fact that it is a PSK,rename
Renamed certType to keystoreType,rename
Code Review of WebSocket feature  Change notes:   Removed obviously unused/faulty code   Renamed/Clarified connection names   Recovered async Event handling.  Review notes:   Change introduces a ComponentUpdate.isProcessed()      feature. I still have no clue how this relates      to the WebSocket feature in general.   Also change introduce the case handling for components      without a peer at all. Not sure how this case is      relevant  because all components are required to have      an peer?   ApplicationInstance handles concurrent disposal      This case should not be possible at all.   Component introduces a lastRenderId      Same here: Mysterious use case.,rename
Finsihed rename of  kernel  to  rule .,rename
methods renamed.,rename
Renamed Dimension to World in Block  Also made getDoubleChest actually return the DoubleChest  hu.,rename
rename resolve() to find() in AbstractConfigObject  since resolve() is being used for substitution resolution,rename
prepare source for high precision with > 30 bits    rename variables and methods like lat30 to latHp or latHighPrec   use named constants instead of values 6 or 30     git svn id: http://svn.mkgmap.org.uk/mkgmap/trunk@3817 25d90789 57f7 4ee0 8453 03a3dfeeeb22,rename
Renamed Generator to Factory.  git svn id: https://google guice.googlecode.com/svn/trunk@165 d779f126 a31b 0410 b53b 1d3aecad763e,rename
Some cleanup and renamed keystore to truststore,rename
Rename setAttributeTypes method,rename
Rename ReplaceableFormatter to ReplaceableFormatWriter,rename
rename QueryCount attributes,rename
"Replaced the """"delete rename add"""" style of prototype trickery with prototype flattening trickery.  The previous mechanism was running into strange problems with duplicate entity names  and it did not support multiple database types using the same set of prototypes (i.e. EOJDBCFrontBasePrototypes + EOJDBCPostgresPrototypes in the same app).  In the new system  any model that declares and EOPrototypeEntityName (either explicitly with Wonder properties or with Entity Modeler) will have its prototyped attributes flattened at runtime.  You can disable this behavior by setting er.extensions.ERXModelGroup.flattenPrototypes to false.  If you do this  though  you will lose all support for explicitly setting prototype entities and it will fall back to the stock behavior.   ",rename
* lots of refactoring again to make everything homogeneous * introduced the new One<T> in parallel of Many<T> * renamed @Related into @Owned * added @Referenced which is not needed in the code but could be further * optimized Model instantiation by storing info into ClassInfo * corrected a few NPE risks,rename
Rename equality method for separation from Java and consistency with the Dart implemention.,rename
TOU  function rename,rename
BZ480001: rename method to mention Consumer Unregister  Signed off by: alexlehm <alexlehm@gmail.com>,rename
RC functions rename  reorganization of common model data,rename
Renamed a method to handlExpOrb.,rename
Rename transaction to disputedTransaction,rename
Moved and renamed KeyAction to VimShortcutKeyAction,rename
[refactor]: rename package,rename
Fix receive loop insns: rename ERT.receive_peek  > loop_rec  ERT.wait_forever  > wait (so ERT methods match BEAM insn names). Make corresponding changes in compiler.  Simplify [and correct] logic in the messge loop so messages are retrieved in correct order. Explicitly initialize midx to 0.,rename
Renamed Gm6File stuff to GmFile (no longer specifically 6.0)  * Refactored any references  * Updated references in Messages Extracted GmStreamEncoder.writeTree to GmFileWriter (matches the prior extraction of readTree)  git svn id: https://lateralgm.svn.sourceforge.net/svnroot/lateralgm@198 8f422083 7f27 0410 bc82 93e204be8cd2,rename
"[ 105] 	Let Match.find()  Match.child()  Match.children() and similar methods be namespace unaware (ignoring namespaces) [ 106] Add FastFilter JOOX.matchTag(String regex  boolean ignoreNamespace) as a utility to search for tags ignoring namespaces",rename
Additional changes for JIRA feature request SGF 226 supporting GemFire s new Cluster based Configuration Service.  Renamed the CacheUsingSharedConfigurationIntegrationTest class to CacheClusterConfigurationIntegrationTest and added an additional test case to assert the default  non use of cluster configuration behavior.  Renamed GemFire System properties references for enabling/disabling Cluster Config based revision r48252 in GemFire 8.,rename
Renamed diagnostic method.,rename
Rename RecordBuilder.newRecord() to RecordBuilder.build()   git svn id: svn+ssh://dev.outerthought.org/outerthought/lilyproject/trunk@5107 b80d95f8 e103 0410 bd55 e03a9dc29394,rename
Enabled temporary queues Renamed getSession() to createSession() in tests,rename
Renamed availableTypesTreeLazy method for symmetry.,rename
Vandana  Renamed a few methods,rename
Rename InvocationArguments to PreparedArguments,rename
Rename and expose getRawStatement method,rename
IMAP: Rename test to reflect the actual test case,rename
Renamed connection option winrmDebugKerberosAuth to winrmKerberosDebug.,rename
Massive refactoring to use spring  most things are automatically injected  WARNING: this change requires you to rename the config file to nl.topicus.onderwijs.dashboard.config.Settings.json,rename
Rename the handleException on ContextImpl to reportException and add it to ContextInternal so we can report exceptions to the context,rename
split up addList into two methods and rename lead in methods to AtNode,rename
PLFENG 1805 : Call git commands directly from the mojo without scripts Change the loop to be able able to commit per language Rename startDr param to workingDir Set default value for workingDir to target/eXoProject (Don t call mvm clean or redefine it in your settings  our command line ..) Create workingDir if doesn t exist,rename
"Refactor one part of the """"Cov build"""" command. The part that was done in this commit is the part calling the cov build for script sources  not compiled sources. Also  renamed the package that all the command classes are inside. ",rename
rename package. The game package contains class about the game logic  but not rendering,rename
ISQReader: rename a very long method name,rename
HV 1207 Rename misnamed methods in ValueExtractorDescriptor,rename
Simplified Introspector and renamed BeanPropertyX stuff to PropertyX stuff,rename
Renamed mapWithKey()  > hasKey()  mapWithValue()  > hasValue()  mapContaining()  > hasEntry(),rename
Renamed test,rename
rename parameter of JsonView,rename
renamed some JMX attributes,rename
Rename for onExecute method.,rename
renamed osgifyme  > osgify  model names and aspectj src folders,rename
Rename  add noop dispatcher  cleanup,rename
Drop the use of HBase rowlocks for record creates. Fixes  225.  * Exceptions during wal.processMessage were logged in case of create but not update  both are now logged (because they are the same code).  * I renamed the method putMessageOnWalAndProcess to putRowWithWalProcessing  since with the former it was not obvious that this method was doing the put of the row itself.  * The metric for HBaseAction.PUT is not reported anymore. It was only reported for create  not for update or updateMutableFields. Should be readded if of interest.   git svn id: svn+ssh://dev.outerthought.org/outerthought/lilyproject/trunk@4637 b80d95f8 e103 0410 bd55 e03a9dc29394,rename
HV 501 Renamed .constraint() to .constraintDefinition(),rename
renamed methods and members to better fit with smartclient api.,rename
Rename DumpUtils to DescriptorUtils,rename
rename,rename
Renamed getRevision to getETag to make it match the HTTP Response rather than how Couch normally uses it.,rename
"Rename """"writeParamsEntryForSinglePreparedEntry"""" to """"writeParamsForSinglePreparedEntry"""" ",rename
rename methods,rename
renamed min  max and rounding mode for BigDecimal and Double,rename
test method renames,rename
renamed a method   git svn id: https://svn.jboss.org/repos/hibernate/validator/trunk@15840 1b8cb986 b30d 0410 93ca fae66ebed9b2,rename
"JCBC 926: Drop the named prefix in primary index management  Motivation:             Method to deal with named primary indexes in previous JCBC 926 change had the """"Named"""" prefix (eg. createNamedPrimaryIndex)  which is redundant and can be dropped (these methods then becoming simple overloads of the existing xxxPrimaryIndex methods).  Modification:               Renamed createNamedPrimaryIndex methods to createPrimaryIndex (overload) and dropNamedPrimaryIndex to dropPrimaryIndex.  Results:          Dealing with default named or custom named primary indexes is now just done through overloaded methods  simplifying the API.  Change Id: I7d11a73ed292d7d6a4b22a83008a2ed8548241aa Reviewed on: http://review.couchbase.org/62239 Tested by: Simon Baslé <simon@couchbase.com> Reviewed by: Michael Nitschinger <michael.nitschinger@couchbase.com> ",rename
Rename and comment on WARCWriter stats bits to clarify their use as temporary accumulators on behalf of WARCWriterProcessor.,rename
Renamed the descriptors to match the terminology of the Debian policy,rename
renamed LoggerContext s reset() method to shutdownAndReset(),rename
renamed methods to suit the class function,rename
rename  source  options to  src  for consistency,rename
Rename Sentry to SentryClient  rename android.Sentry to SentryAndroid… ( 378)    Rename the ``Sentry`` class to ``SentryClient``.   Rename the ``SentryFactory`` class to ``SentryClientFactory``  and renamed all subclasses   to now end in ``ClientFactory``.   Remove ``Breadcrumbs`` class.   Add new ``Sentry`` class for static client access and usage.   Rename ``android.Sentry`` to ``android.AndroidSentry`` to make it unambiguous when used in code.   Rename ``sentryFactory`` option to ``factory`` so that the environment variable configuration is   now ``SENTRY_FACTORY`` and the Java System Property is ``sentry.factory``.,rename
[KARAF 2168] Rename sync properties and usage,rename
Renames: NO_ROOM  > NO_SPACE; withMaxAttemptsForPlacement  > maxAttemptsToPlaceWord,rename
Renamed Context to SiteMeshContext to avoid confusion with TagProcessorContext.    HG   rename : src/test/java/com/opensymphony/sitemesh/ContextStub.java  > src/test/java/com/opensymphony/sitemesh/SiteMeshContextStub.java rename : src/main/java/com/opensymphony/sitemesh/Context.java  > src/main/java/com/opensymphony/sitemesh/SiteMeshContext.java,rename
782 Rename Lombok Integration test classes,rename
Rename bugfix setting.,rename
"Renamed """"indexName"""" to """"index"""" and """"indexType"""" to """"type"""" for publicly visible methods  to have a consistent API. ",rename
Removed configuration singleton (injected relevant values directly into ProxyResponseRenderer)  renamed some config attributes.,rename
simplify RoadMerger   add static to methods were possible   move evaluation of routeFlags to ConvertedWay   rename Element.getEntrySetIterator()  > Element.getTagEntryIterator()   git svn id: http://svn.mkgmap.org.uk/mkgmap/branches/refactoring@3219 25d90789 57f7 4ee0 8453 03a3dfeeeb22,rename
WIP Merged with master Renamed classes around implicit and explicit property building Added additional extensions to extensions pom Extensions should depend on current project version Re worked named typemaps Removed unused test,rename
renamed static method name to parse drops sets,rename
rename method toBinaryStream to toInputStream,rename
rename Where constraints,rename
Renamed methods of TermAdapter interface (toTerm  fromTerm  toStruct).,rename
Make ConfigFunction code easier to use     Instance state and the init method Previously  there was all kinds of complex state in the ConfigFunction instance. Now all required arguments are provided in the constructor of a ConfigFunction. The init method is gone.     Error handling Previously  if the init method threw an InvalidConfigException  the instance would be kept. Now such invalid instances are no longer kept  an instance of ErroredFunction is used instead. The getError and isValid methods have been removed.     Reflection code There s still some relfection code involved  as we need a way to go from for example PlantGen.class to a PlantGen instance. If we would use Java 8  we could use the newer PlantGen::new syntax to get a reference to the constructor of PlantGen.     makeString() The ConfigFunction.makeString() method has been renamed to the more conventional toString(). The ConfigFunction.write() wrapper method has been removed.     getHolderType() This method has been removed. Checking for the holder type now happens by checking for which constructors exist.,rename
Rename .getLastLocation   > .getCurrentChunk,rename
Rename h2cUpgrade option  > http2ClearTextUpgrade,rename
Tasks on Batches: Rename  shortIds  to  redirections  in ListBasedAdiInputParameters. This is what has been spec d,rename
"Vishnu  Dev | adding provider remarks  	* Renamed setters in AuditLog as with{PropertyName} and using @Data as freemarker resolves property name to this method and throws exception that return type is not string. ",rename
Rename factory methods for collections,rename
Renamed test,rename
refactor: rename get updated row count method ( 224),rename
Rename some methods,rename
Update Portfolio Aggregate   Use @Aggregate annotation for Spring  Put all @CommandHandler annotations on the command handling functions  Drop the PortfolioCommandHandler  Rename command handler function to `handle(cmd)`  Replace @EventHandler for @EventSourcingHandler  Rename event handler functions to `on(event)`  Drop useless @author tag  Move map instantiation to the event sourcing handler for PortfolioCreatedEvent  as that instantiates a Portfolio  Simplify couple of functions  Overall reindent of file  Rename PortfolioCommandHandlerTest to PortfolioTest  Clean up the test case   28,rename
Rename methods,rename
Rename getter function to hopefully be a bit more descriptive...,rename
Rename method,rename
Rename getProtocol to getMechanism in TestClient,rename
Rename mapping methods to mapFrom/mapTo  Signed off by: Luke Hutchison <luke.hutch@gmail.com>,rename
"renaming refactor on deserialization related code:    In AbstractAction class  method convertJsonStringToMapObject(String jsonTxt)  is now called parseResponseBody(String responseBody)    In Action interface and in several other classes renamed argument names containing """"json"""" to """"responseBody"""" ",rename
renamed usage to description to match the name used in CommandDefinition,rename
renamed isOccupied(Point Point) to hasRoadUserOn(Point Point),rename
